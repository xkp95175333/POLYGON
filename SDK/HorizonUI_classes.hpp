#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HorizonUI

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"
#include "HorizonUI_structs.hpp"
#include "Slate_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class HorizonUI.HorizonDialogueStyleInfo
// 0x0010 (0x0038 - 0x0028)
class UHorizonDialogueStyleInfo final : public UObject
{
public:
	TArray<struct FHorizonDialogueSegmentInfoStyle> SegmentStyleList;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonDialogueStyleInfo">();
	}
	static class UHorizonDialogueStyleInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonDialogueStyleInfo>();
	}
};
static_assert(alignof(UHorizonDialogueStyleInfo) == 0x000008, "Wrong alignment on UHorizonDialogueStyleInfo");
static_assert(sizeof(UHorizonDialogueStyleInfo) == 0x000038, "Wrong size on UHorizonDialogueStyleInfo");
static_assert(offsetof(UHorizonDialogueStyleInfo, SegmentStyleList) == 0x000028, "Member 'UHorizonDialogueStyleInfo::SegmentStyleList' has a wrong offset!");

// Class HorizonUI.HorizonButton
// 0x00C0 (0x06B0 - 0x05F0)
class UHorizonButton final : public UButton
{
public:
	FMulticastInlineDelegateProperty_             OnClickedDelegate;                                 // 0x05E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPressedDelegate;                                 // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnReleasedDelegate;                                // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHoveredDelegate;                                 // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUnhoveredDelegate;                               // 0x0628(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_114D[0x78];                                    // 0x0638(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClickedButton();
	void OnHorizonButtonEvent__DelegateSignature(class UHorizonButton* Button);
	void OnHoveredButton();
	void OnPressedButton();
	void OnReleasedButton();
	void OnUnhoveredButton();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonButton">();
	}
	static class UHorizonButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonButton>();
	}
};
static_assert(alignof(UHorizonButton) == 0x000010, "Wrong alignment on UHorizonButton");
static_assert(sizeof(UHorizonButton) == 0x0006B0, "Wrong size on UHorizonButton");
static_assert(offsetof(UHorizonButton, OnClickedDelegate) == 0x0005E8, "Member 'UHorizonButton::OnClickedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButton, OnPressedDelegate) == 0x0005F8, "Member 'UHorizonButton::OnPressedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButton, OnReleasedDelegate) == 0x000608, "Member 'UHorizonButton::OnReleasedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButton, OnHoveredDelegate) == 0x000618, "Member 'UHorizonButton::OnHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButton, OnUnhoveredDelegate) == 0x000628, "Member 'UHorizonButton::OnUnhoveredDelegate' has a wrong offset!");

// Class HorizonUI.HorizonUserWidget
// 0x0000 (0x0280 - 0x0280)
class UHorizonUserWidget : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonUserWidget">();
	}
	static class UHorizonUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonUserWidget>();
	}
};
static_assert(alignof(UHorizonUserWidget) == 0x000008, "Wrong alignment on UHorizonUserWidget");
static_assert(sizeof(UHorizonUserWidget) == 0x000280, "Wrong size on UHorizonUserWidget");

// Class HorizonUI.HorizonDesignableUserWidget
// 0x0000 (0x0280 - 0x0280)
class UHorizonDesignableUserWidget : public UHorizonUserWidget
{
public:
	void OnSynchronizeProperties();
	void SynchronizeProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonDesignableUserWidget">();
	}
	static class UHorizonDesignableUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonDesignableUserWidget>();
	}
};
static_assert(alignof(UHorizonDesignableUserWidget) == 0x000008, "Wrong alignment on UHorizonDesignableUserWidget");
static_assert(sizeof(UHorizonDesignableUserWidget) == 0x000280, "Wrong size on UHorizonDesignableUserWidget");

// Class HorizonUI.HorizonButtonUserWidget
// 0x0230 (0x04B0 - 0x0280)
class UHorizonButtonUserWidget final : public UHorizonDesignableUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnButtonClickedDelegate;                           // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonPressedDelegate;                           // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonReleasedDelegate;                          // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonHoveredDelegate;                           // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonUnhoveredDelegate;                         // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonFocusDelegate;                             // 0x02D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonFocusLostDelegate;                         // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_114E[0xA8];                                    // 0x02F0(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                Button_Main;                                       // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock_Main;                                    // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image_Main;                                        // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text_Main;                                         // 0x03B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_114F[0x8];                                     // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            SlateBrush_ImageMain;                              // 0x03D0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bFocusOnHovered;                                   // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bButtonFocused;                                    // 0x04A1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1150[0xE];                                     // 0x04A2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NativeOnButtonClicked();
	void NativeOnButtonHovered();
	void NativeOnButtonPressed();
	void NativeOnButtonReleased();
	void NativeOnButtonUnhovered();
	void OnHorizonButtonEvent__DelegateSignature(class UHorizonButtonUserWidget* InButton);
	void OnHorizonButtonFocusEvent__DelegateSignature(class UHorizonButtonUserWidget* InButton, const struct FFocusEvent& InFocusEvent);
	void ReceiveOnButtonClicked();
	void ReceiveOnButtonFocus(const struct FFocusEvent& InFocusEvent);
	void ReceiveOnButtonHovered();
	void ReceiveOnButtonPressed();
	void ReceiveOnButtonReleased();
	void ReceiveOnButtonUnhovered();
	void ReceiveOnOnButtonFocusLost(const struct FFocusEvent& InFocusEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonButtonUserWidget">();
	}
	static class UHorizonButtonUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonButtonUserWidget>();
	}
};
static_assert(alignof(UHorizonButtonUserWidget) == 0x000010, "Wrong alignment on UHorizonButtonUserWidget");
static_assert(sizeof(UHorizonButtonUserWidget) == 0x0004B0, "Wrong size on UHorizonButtonUserWidget");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonClickedDelegate) == 0x000280, "Member 'UHorizonButtonUserWidget::OnButtonClickedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonPressedDelegate) == 0x000290, "Member 'UHorizonButtonUserWidget::OnButtonPressedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonReleasedDelegate) == 0x0002A0, "Member 'UHorizonButtonUserWidget::OnButtonReleasedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonHoveredDelegate) == 0x0002B0, "Member 'UHorizonButtonUserWidget::OnButtonHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonUnhoveredDelegate) == 0x0002C0, "Member 'UHorizonButtonUserWidget::OnButtonUnhoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonFocusDelegate) == 0x0002D0, "Member 'UHorizonButtonUserWidget::OnButtonFocusDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, OnButtonFocusLostDelegate) == 0x0002E0, "Member 'UHorizonButtonUserWidget::OnButtonFocusLostDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, Button_Main) == 0x000398, "Member 'UHorizonButtonUserWidget::Button_Main' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, TextBlock_Main) == 0x0003A0, "Member 'UHorizonButtonUserWidget::TextBlock_Main' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, Image_Main) == 0x0003A8, "Member 'UHorizonButtonUserWidget::Image_Main' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, Text_Main) == 0x0003B0, "Member 'UHorizonButtonUserWidget::Text_Main' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, SlateBrush_ImageMain) == 0x0003D0, "Member 'UHorizonButtonUserWidget::SlateBrush_ImageMain' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, bFocusOnHovered) == 0x0004A0, "Member 'UHorizonButtonUserWidget::bFocusOnHovered' has a wrong offset!");
static_assert(offsetof(UHorizonButtonUserWidget, bButtonFocused) == 0x0004A1, "Member 'UHorizonButtonUserWidget::bButtonFocused' has a wrong offset!");

// Class HorizonUI.HorizonDialogueMsgDecorator
// 0x0000 (0x0028 - 0x0028)
class UHorizonDialogueMsgDecorator : public UObject
{
public:
	bool BuildSegment(class UHorizonDialogueMsgTextBlock* InMsgTextBlock, int32 InCurrentSegInfoIndex, struct FHorizonDialogueSegmentInfo& InCurrentSegInfo, const TArray<struct FHorizonDialogueSegmentInfo>& InSegInfos);
	bool PreRun(class UHorizonDialogueMsgTextBlock* InMsgTextBlock, struct FHorizonDialogueBlockInfo& InDialogueBlockInfo, struct FHorizonDialogueSegmentInfo& InSegInfo);
	bool Run(class UHorizonDialogueMsgTextBlock* InMsgTextBlock, struct FHorizonDialogueBlockInfo& InDialogueBlockInfo, struct FHorizonDialogueSegmentInfo& InSegInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonDialogueMsgDecorator">();
	}
	static class UHorizonDialogueMsgDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonDialogueMsgDecorator>();
	}
};
static_assert(alignof(UHorizonDialogueMsgDecorator) == 0x000008, "Wrong alignment on UHorizonDialogueMsgDecorator");
static_assert(sizeof(UHorizonDialogueMsgDecorator) == 0x000028, "Wrong size on UHorizonDialogueMsgDecorator");

// Class HorizonUI.HorizonDialogueMsgSpaceDecorator
// 0x0038 (0x0060 - 0x0028)
class UHorizonDialogueMsgSpaceDecorator final : public UHorizonDialogueMsgDecorator
{
public:
	class FText                                   FirstLineSpaceL;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Space;                                             // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bDefaultWithSpaceL_AlphabeticOnly;                 // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1155[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonDialogueMsgSpaceDecorator">();
	}
	static class UHorizonDialogueMsgSpaceDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonDialogueMsgSpaceDecorator>();
	}
};
static_assert(alignof(UHorizonDialogueMsgSpaceDecorator) == 0x000008, "Wrong alignment on UHorizonDialogueMsgSpaceDecorator");
static_assert(sizeof(UHorizonDialogueMsgSpaceDecorator) == 0x000060, "Wrong size on UHorizonDialogueMsgSpaceDecorator");
static_assert(offsetof(UHorizonDialogueMsgSpaceDecorator, FirstLineSpaceL) == 0x000028, "Member 'UHorizonDialogueMsgSpaceDecorator::FirstLineSpaceL' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgSpaceDecorator, Space) == 0x000040, "Member 'UHorizonDialogueMsgSpaceDecorator::Space' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgSpaceDecorator, bDefaultWithSpaceL_AlphabeticOnly) == 0x000058, "Member 'UHorizonDialogueMsgSpaceDecorator::bDefaultWithSpaceL_AlphabeticOnly' has a wrong offset!");

// Class HorizonUI.HorizonDialogueMsgTextBlock
// 0x03F0 (0x0568 - 0x0178)
class UHorizonDialogueMsgTextBlock final : public UCanvasPanel
{
public:
	uint8                                         Pad_1156[0x8];                                     // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextClickedDelegate;                        // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1157[0x18];                                    // 0x0190(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextPressedDelegate;                        // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1158[0x18];                                    // 0x01B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextReleasedDelegate;                       // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1159[0x18];                                    // 0x01E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextHoveredDelegate;                        // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_115A[0x18];                                    // 0x0208(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHypertextUnhoveredDelegate;                      // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_115B[0x18];                                    // 0x0230(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDialogueMsgLoopFunction;                         // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_115C[0x18];                                    // 0x0258(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDialogueMsgCompleteFunction;                     // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_115D[0x18];                                    // 0x0280(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSetDialoguePageFunction;                         // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_115E[0x18];                                    // 0x02A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDialoguePageEndFunction;                         // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_115F[0x18];                                    // 0x02D0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRebuildDialogueDelegate;                         // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1160[0x18];                                    // 0x02F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCustomEventDelegate;                             // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1161[0x18];                                    // 0x0320(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCharAdvancedDelegate;                            // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1162[0x18];                                    // 0x0348(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0360(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EHorizonDialogueTextOverflowWrapMethod        TextOverFlowWrapMethod;                            // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EHorizonDialogueTextOverflowWarpMethod_DEPRECATED TextOverFlowWarpMethod;                            // 0x0379(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1163[0x2];                                     // 0x037A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DialogueMsgSpeed;                                  // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStartTickDialogueMsg;                           // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRepeatDialogueMsg;                              // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1164[0x2];                                     // 0x0382(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RepeatDialogueMsgInterval;                         // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDialogueMsgText;                                // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutoNextDialogueMsgPage;                        // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1165[0x2];                                     // 0x038A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoNextDialogueMsgPageIntervalRate;               // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoNextDialogueMsgPageIntervalMin;                // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoNextDialogueMsgPageIntervalMax;                // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTimeDilation;                               // 0x0398(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1166[0x3];                                     // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomTimeDilation;                                // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRebuildDialogueMsgText;                      // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBlinkingCursor;                             // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1167[0x6];                                     // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHorizonDialogueBlinkingCursorInfo     BlinkCursorInfo;                                   // 0x03A8(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UHorizonDialogueStyleInfo>> StyleInfoClassList;                                // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FHorizonDialogueSegmentInfoStyle> SegmentStyleList;                                  // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsRichText;                                       // 0x0438(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1168[0x3];                                     // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ColorAndOpacity;                                   // 0x043C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0450(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x04A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x04B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x04C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1169[0x3];                                     // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                LineMargin;                                        // 0x04CC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_116A[0x4];                                     // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHorizonButton>             DefaultButtonStyleWidgetClass;                     // 0x04E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UHorizonDialogueMsgDecorator>> DecoratorClasses;                                  // 0x04E8(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_116B[0x50];                                    // 0x04F8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHorizonDialogueStyleInfo*>      StyleInfoList;                                     // 0x0548(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_116C[0x10];                                    // 0x0558(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrentPageIndex();
	void NextDialogueMsgPage(bool bShouldStartTick);
	void OnHorizonDialogueCharAdvancedEvent__DelegateSignature(const struct FHorizonDialogueBlockInfo& InCurrentBlockInfo);
	void OnHorizonDialogueCustomEvent__DelegateSignature(const class FString& InEventName, const struct FHorizonDialogueSegmentInfo& InSegInfo);
	void OnHorizonDialogueMsgEvent__DelegateSignature();
	void OnHorizonDialoguePageEvent__DelegateSignature(const struct FHorizonDialogueDialoguePageResult& InResult);
	void OnHorizonHypertextEvent__DelegateSignature(const struct FHorizonDialogueHypertextResult& InResult);
	void PauseDialogue();
	void PrevDialogueMsgPage(bool bShouldStartTick);
	void RebuildDialogueMsgTextBlock();
	void RequestRebuildDialogue();
	void ResumeDialogue();
	void SetAutoNextDialogueMsgPageIntervalRate(float InAutoNextDialogueMsgPageIntervalRate);
	void SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity);
	void SetDialogueMsgPage(int32 InPageIndex, bool bShouldStartTick);
	void SetDialogueMsgSpeed(float Speed, bool bForce);
	void SetFont(const struct FSlateFontInfo& InFontInfo, bool bForce);
	void SetFontSize(int32 FontSize);
	void SetIsAutoNextDialogueMsgPage(bool B);
	void SetIsDialogueMsgText(bool B);
	void SetIsRepeatDialogueMsg(bool B);
	void SetIsStartTickDialogueMsg(bool bShouldStartTick, bool bShouldResetDialogue);
	void SetJustification(ETextJustify InJustification, bool bForce);
	void SetOpacity(float InOpacity);
	void SetRepeatDialogueMsgInterval(float Interval);
	void SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity, bool bForce);
	void SetShadowOffset(const struct FVector2D& InShadowOffset, bool bForce);
	void SetTextAndRebuildDialogue(const class FText& InText);
	void SetTextAndRebuildDialogueImmediately(const class FText& InText);
	void SetTextOverflowWrapMethod(EHorizonDialogueTextOverflowWrapMethod InOverflowWrapMethod);
	void SkipCurrentDialogueMsgPageTick();
	void SkipCurrentDialoguePage();
	void SkipDialogue();
	void StartDialogue();
	void StopDialogue();

	class UHorizonFlipbookWidget* GetBlinkCursorWidget() const;
	int32 GetCurrentPageTextLength() const;
	ETextJustify GetJustification() const;
	int32 GetNumLine() const;
	int32 GetNumPage() const;
	class FText GetPageTextByIndex(int32 PageIndex) const;
	class FText GetText() const;
	int32 GetTextLength() const;
	EHorizonDialogueTextOverflowWrapMethod GetTextOverflowWrapMethod() const;
	bool IsDialogueMsgCompleted() const;
	bool IsDialogueMsgPageEnd() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonDialogueMsgTextBlock">();
	}
	static class UHorizonDialogueMsgTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonDialogueMsgTextBlock>();
	}
};
static_assert(alignof(UHorizonDialogueMsgTextBlock) == 0x000008, "Wrong alignment on UHorizonDialogueMsgTextBlock");
static_assert(sizeof(UHorizonDialogueMsgTextBlock) == 0x000568, "Wrong size on UHorizonDialogueMsgTextBlock");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextClickedDelegate) == 0x000180, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextClickedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextPressedDelegate) == 0x0001A8, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextPressedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextReleasedDelegate) == 0x0001D0, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextReleasedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextHoveredDelegate) == 0x0001F8, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextHoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnHypertextUnhoveredDelegate) == 0x000220, "Member 'UHorizonDialogueMsgTextBlock::OnHypertextUnhoveredDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnDialogueMsgLoopFunction) == 0x000248, "Member 'UHorizonDialogueMsgTextBlock::OnDialogueMsgLoopFunction' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnDialogueMsgCompleteFunction) == 0x000270, "Member 'UHorizonDialogueMsgTextBlock::OnDialogueMsgCompleteFunction' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnSetDialoguePageFunction) == 0x000298, "Member 'UHorizonDialogueMsgTextBlock::OnSetDialoguePageFunction' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnDialoguePageEndFunction) == 0x0002C0, "Member 'UHorizonDialogueMsgTextBlock::OnDialoguePageEndFunction' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnRebuildDialogueDelegate) == 0x0002E8, "Member 'UHorizonDialogueMsgTextBlock::OnRebuildDialogueDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnCustomEventDelegate) == 0x000310, "Member 'UHorizonDialogueMsgTextBlock::OnCustomEventDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, OnCharAdvancedDelegate) == 0x000338, "Member 'UHorizonDialogueMsgTextBlock::OnCharAdvancedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, Text) == 0x000360, "Member 'UHorizonDialogueMsgTextBlock::Text' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, TextOverFlowWrapMethod) == 0x000378, "Member 'UHorizonDialogueMsgTextBlock::TextOverFlowWrapMethod' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, TextOverFlowWarpMethod) == 0x000379, "Member 'UHorizonDialogueMsgTextBlock::TextOverFlowWarpMethod' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, DialogueMsgSpeed) == 0x00037C, "Member 'UHorizonDialogueMsgTextBlock::DialogueMsgSpeed' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsStartTickDialogueMsg) == 0x000380, "Member 'UHorizonDialogueMsgTextBlock::bIsStartTickDialogueMsg' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsRepeatDialogueMsg) == 0x000381, "Member 'UHorizonDialogueMsgTextBlock::bIsRepeatDialogueMsg' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, RepeatDialogueMsgInterval) == 0x000384, "Member 'UHorizonDialogueMsgTextBlock::RepeatDialogueMsgInterval' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsDialogueMsgText) == 0x000388, "Member 'UHorizonDialogueMsgTextBlock::bIsDialogueMsgText' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsAutoNextDialogueMsgPage) == 0x000389, "Member 'UHorizonDialogueMsgTextBlock::bIsAutoNextDialogueMsgPage' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, AutoNextDialogueMsgPageIntervalRate) == 0x00038C, "Member 'UHorizonDialogueMsgTextBlock::AutoNextDialogueMsgPageIntervalRate' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, AutoNextDialogueMsgPageIntervalMin) == 0x000390, "Member 'UHorizonDialogueMsgTextBlock::AutoNextDialogueMsgPageIntervalMin' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, AutoNextDialogueMsgPageIntervalMax) == 0x000394, "Member 'UHorizonDialogueMsgTextBlock::AutoNextDialogueMsgPageIntervalMax' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIgnoreTimeDilation) == 0x000398, "Member 'UHorizonDialogueMsgTextBlock::bIgnoreTimeDilation' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, CustomTimeDilation) == 0x00039C, "Member 'UHorizonDialogueMsgTextBlock::CustomTimeDilation' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bForceRebuildDialogueMsgText) == 0x0003A0, "Member 'UHorizonDialogueMsgTextBlock::bForceRebuildDialogueMsgText' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bEnableBlinkingCursor) == 0x0003A1, "Member 'UHorizonDialogueMsgTextBlock::bEnableBlinkingCursor' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, BlinkCursorInfo) == 0x0003A8, "Member 'UHorizonDialogueMsgTextBlock::BlinkCursorInfo' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, StyleInfoClassList) == 0x000418, "Member 'UHorizonDialogueMsgTextBlock::StyleInfoClassList' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, SegmentStyleList) == 0x000428, "Member 'UHorizonDialogueMsgTextBlock::SegmentStyleList' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, bIsRichText) == 0x000438, "Member 'UHorizonDialogueMsgTextBlock::bIsRichText' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, ColorAndOpacity) == 0x00043C, "Member 'UHorizonDialogueMsgTextBlock::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, Font) == 0x000450, "Member 'UHorizonDialogueMsgTextBlock::Font' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, ShadowOffset) == 0x0004A8, "Member 'UHorizonDialogueMsgTextBlock::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, ShadowColorAndOpacity) == 0x0004B8, "Member 'UHorizonDialogueMsgTextBlock::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, Justification) == 0x0004C8, "Member 'UHorizonDialogueMsgTextBlock::Justification' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, LineMargin) == 0x0004CC, "Member 'UHorizonDialogueMsgTextBlock::LineMargin' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, DefaultButtonStyleWidgetClass) == 0x0004E0, "Member 'UHorizonDialogueMsgTextBlock::DefaultButtonStyleWidgetClass' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, DecoratorClasses) == 0x0004E8, "Member 'UHorizonDialogueMsgTextBlock::DecoratorClasses' has a wrong offset!");
static_assert(offsetof(UHorizonDialogueMsgTextBlock, StyleInfoList) == 0x000548, "Member 'UHorizonDialogueMsgTextBlock::StyleInfoList' has a wrong offset!");

// Class HorizonUI.HorizonFileSystem
// 0x0010 (0x0038 - 0x0028)
class UHorizonFileSystem final : public UObject
{
public:
	uint8                                         Pad_1173[0x10];                                    // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void DestroyInstance();
	static class UHorizonFileSystem* GetInstance();

	void CreateDirectoryRecursively(const class FString& InFolderToMake);
	class UFont* LoadFont(const class FString& InPackageFilePath);
	class UMaterial* LoadMaterial(const class FString& InPackageFilePath);
	class UPaperFlipbook* LoadPaperFlipbook(const class FString& InPackageFilePath);
	class USoundBase* LoadSound(const class FString& InPackageFilePath);
	class UTexture2D* LoadTexture2D(const class FString& InPackageFilePath, int32* OutWidth, int32* OutHeight);
	class UObject* LoadUAsset(const class FString& InPackageFilePath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonFileSystem">();
	}
	static class UHorizonFileSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonFileSystem>();
	}
};
static_assert(alignof(UHorizonFileSystem) == 0x000008, "Wrong alignment on UHorizonFileSystem");
static_assert(sizeof(UHorizonFileSystem) == 0x000038, "Wrong size on UHorizonFileSystem");

// Class HorizonUI.HorizonFlipbookWidget
// 0x0080 (0x0330 - 0x02B0)
class UHorizonFlipbookWidget final : public UImage
{
public:
	uint8                                         Pad_1174[0x8];                                     // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsStartTick;                                      // 0x02B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1175[0x3];                                     // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumOfLoop;                                         // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimationFinished;                                // 0x02B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1176[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperFlipbook*                         PaperFlipbook;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnAnimationStart;                                  // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1177[0x18];                                    // 0x02D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnAnimationFinished;                               // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1178[0x30];                                    // 0x0300(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurrentAnimationDuration();
	void OnHorizonFlipbookEvent__DelegateSignature();
	void OnHorizonFlipbookStartEvent__DelegateSignature(int32 InCurrentNumOfLoop);
	void PauseAnimation();
	void PlayAnimation();
	void ResetAnimation();
	void ResumeAnimation();
	void SetCurrentAnimationDuration(float InDuration);
	void SetFlipbook(class UPaperFlipbook* InFlipbook);
	void StopAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonFlipbookWidget">();
	}
	static class UHorizonFlipbookWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonFlipbookWidget>();
	}
};
static_assert(alignof(UHorizonFlipbookWidget) == 0x000010, "Wrong alignment on UHorizonFlipbookWidget");
static_assert(sizeof(UHorizonFlipbookWidget) == 0x000330, "Wrong size on UHorizonFlipbookWidget");
static_assert(offsetof(UHorizonFlipbookWidget, bIsStartTick) == 0x0002B0, "Member 'UHorizonFlipbookWidget::bIsStartTick' has a wrong offset!");
static_assert(offsetof(UHorizonFlipbookWidget, NumOfLoop) == 0x0002B4, "Member 'UHorizonFlipbookWidget::NumOfLoop' has a wrong offset!");
static_assert(offsetof(UHorizonFlipbookWidget, bAnimationFinished) == 0x0002B8, "Member 'UHorizonFlipbookWidget::bAnimationFinished' has a wrong offset!");
static_assert(offsetof(UHorizonFlipbookWidget, PaperFlipbook) == 0x0002C0, "Member 'UHorizonFlipbookWidget::PaperFlipbook' has a wrong offset!");
static_assert(offsetof(UHorizonFlipbookWidget, OnAnimationStart) == 0x0002C8, "Member 'UHorizonFlipbookWidget::OnAnimationStart' has a wrong offset!");
static_assert(offsetof(UHorizonFlipbookWidget, OnAnimationFinished) == 0x0002F0, "Member 'UHorizonFlipbookWidget::OnAnimationFinished' has a wrong offset!");

// Class HorizonUI.HorizonImage
// 0x0020 (0x02D0 - 0x02B0)
class UHorizonImage final : public UImage
{
public:
	struct FBox2D                                 UVRegion;                                          // 0x02A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonImage">();
	}
	static class UHorizonImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonImage>();
	}
};
static_assert(alignof(UHorizonImage) == 0x000010, "Wrong alignment on UHorizonImage");
static_assert(sizeof(UHorizonImage) == 0x0002D0, "Wrong size on UHorizonImage");
static_assert(offsetof(UHorizonImage, UVRegion) == 0x0002A8, "Member 'UHorizonImage::UVRegion' has a wrong offset!");

// Class HorizonUI.HorizonListViewItemObject
// 0x0000 (0x0028 - 0x0028)
class UHorizonListViewItemObject final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonListViewItemObject">();
	}
	static class UHorizonListViewItemObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonListViewItemObject>();
	}
};
static_assert(alignof(UHorizonListViewItemObject) == 0x000008, "Wrong alignment on UHorizonListViewItemObject");
static_assert(sizeof(UHorizonListViewItemObject) == 0x000028, "Wrong size on UHorizonListViewItemObject");

// Class HorizonUI.HorizonListViewItemWidget
// 0x0010 (0x0290 - 0x0280)
class UHorizonListViewItemWidget final : public UUserWidget
{
public:
	uint8                                         Pad_1179[0x8];                                     // 0x0280(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                Button_ClickArea;                                  // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnListItemObjectButtonClicked();
	void OnListItemObjectButtonHovered();
	void OnListItemObjectButtonPressed();
	void OnListItemObjectButtonReleased();
	void OnListItemObjectButtonUnhovered();
	void OnListItemObjectClicked();
	void OnListItemObjectHovered();
	void OnListItemObjectPressed();
	void OnListItemObjectReleased();
	void OnListItemObjectUnhovered();
	void OnSynchronizeProperties();
	void SynchronizeProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonListViewItemWidget">();
	}
	static class UHorizonListViewItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonListViewItemWidget>();
	}
};
static_assert(alignof(UHorizonListViewItemWidget) == 0x000008, "Wrong alignment on UHorizonListViewItemWidget");
static_assert(sizeof(UHorizonListViewItemWidget) == 0x000290, "Wrong size on UHorizonListViewItemWidget");
static_assert(offsetof(UHorizonListViewItemWidget, Button_ClickArea) == 0x000288, "Member 'UHorizonListViewItemWidget::Button_ClickArea' has a wrong offset!");

// Class HorizonUI.HorizonMultiToggleButtonWidget
// 0x0088 (0x0308 - 0x0280)
class UHorizonMultiToggleButtonWidget final : public UHorizonDesignableUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnStateSyncDelegate;                               // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_117A[0x18];                                    // 0x0290(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStateChangedDelegate;                            // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_117B[0x18];                                    // 0x02B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UButton*                                Button_ToggleState_Prev;                           // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                Button_ToggleState_Next;                           // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock_CurrentState;                            // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image_CurrentState;                                // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHorizonMultiToggleButtonState> StateList;                                         // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bLoopToggleState;                                  // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_117C[0x3];                                     // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentStateIndex;                                 // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	int32 GetCurrentStateIndex();
	bool GetLoopToggleState();
	int32 GetToggleState_NextIndex();
	int32 GetToggleState_PrevIndex();
	void OnHorizonMultiToggleButtonEvent__DelegateSignature(int32 InCurrentStateIndex, int32 InToStateIndex);
	void OnHorizonMultiToggleButtonSyncEvent__DelegateSignature(int32 InCurrentStateIndex);
	void SetCurrentStateIndex(int32 InStateIndex);
	void SetLoopToggleState(bool InLoopToggleState);
	void ToggleState_Next();
	void ToggleState_Prev();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonMultiToggleButtonWidget">();
	}
	static class UHorizonMultiToggleButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonMultiToggleButtonWidget>();
	}
};
static_assert(alignof(UHorizonMultiToggleButtonWidget) == 0x000008, "Wrong alignment on UHorizonMultiToggleButtonWidget");
static_assert(sizeof(UHorizonMultiToggleButtonWidget) == 0x000308, "Wrong size on UHorizonMultiToggleButtonWidget");
static_assert(offsetof(UHorizonMultiToggleButtonWidget, OnStateSyncDelegate) == 0x000280, "Member 'UHorizonMultiToggleButtonWidget::OnStateSyncDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonMultiToggleButtonWidget, OnStateChangedDelegate) == 0x0002A8, "Member 'UHorizonMultiToggleButtonWidget::OnStateChangedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonMultiToggleButtonWidget, Button_ToggleState_Prev) == 0x0002D0, "Member 'UHorizonMultiToggleButtonWidget::Button_ToggleState_Prev' has a wrong offset!");
static_assert(offsetof(UHorizonMultiToggleButtonWidget, Button_ToggleState_Next) == 0x0002D8, "Member 'UHorizonMultiToggleButtonWidget::Button_ToggleState_Next' has a wrong offset!");
static_assert(offsetof(UHorizonMultiToggleButtonWidget, TextBlock_CurrentState) == 0x0002E0, "Member 'UHorizonMultiToggleButtonWidget::TextBlock_CurrentState' has a wrong offset!");
static_assert(offsetof(UHorizonMultiToggleButtonWidget, Image_CurrentState) == 0x0002E8, "Member 'UHorizonMultiToggleButtonWidget::Image_CurrentState' has a wrong offset!");
static_assert(offsetof(UHorizonMultiToggleButtonWidget, StateList) == 0x0002F0, "Member 'UHorizonMultiToggleButtonWidget::StateList' has a wrong offset!");
static_assert(offsetof(UHorizonMultiToggleButtonWidget, bLoopToggleState) == 0x000300, "Member 'UHorizonMultiToggleButtonWidget::bLoopToggleState' has a wrong offset!");
static_assert(offsetof(UHorizonMultiToggleButtonWidget, CurrentStateIndex) == 0x000304, "Member 'UHorizonMultiToggleButtonWidget::CurrentStateIndex' has a wrong offset!");

// Class HorizonUI.HorizonRadioButtonUserWidget
// 0x0090 (0x0310 - 0x0280)
class UHorizonRadioButtonUserWidget final : public UHorizonDesignableUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnCheckedDelegate;                                 // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUnCheckedDelegate;                               // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_117D[0x30];                                    // 0x02A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UCheckBox*                              CheckBox_Main;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock_Main;                                    // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text_Main;                                         // 0x02E0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCheckedByDefault;                                 // 0x02F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117E[0x17];                                    // 0x02F9(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnCheckStateChanged(bool bIsChecked);
	void NativeOnCheckStateChanged(bool bIsChecked);
	void OnHorizonRadioButtonEvent__DelegateSignature();
	void SetChecked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonRadioButtonUserWidget">();
	}
	static class UHorizonRadioButtonUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonRadioButtonUserWidget>();
	}
};
static_assert(alignof(UHorizonRadioButtonUserWidget) == 0x000008, "Wrong alignment on UHorizonRadioButtonUserWidget");
static_assert(sizeof(UHorizonRadioButtonUserWidget) == 0x000310, "Wrong size on UHorizonRadioButtonUserWidget");
static_assert(offsetof(UHorizonRadioButtonUserWidget, OnCheckedDelegate) == 0x000280, "Member 'UHorizonRadioButtonUserWidget::OnCheckedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonRadioButtonUserWidget, OnUnCheckedDelegate) == 0x000290, "Member 'UHorizonRadioButtonUserWidget::OnUnCheckedDelegate' has a wrong offset!");
static_assert(offsetof(UHorizonRadioButtonUserWidget, CheckBox_Main) == 0x0002D0, "Member 'UHorizonRadioButtonUserWidget::CheckBox_Main' has a wrong offset!");
static_assert(offsetof(UHorizonRadioButtonUserWidget, TextBlock_Main) == 0x0002D8, "Member 'UHorizonRadioButtonUserWidget::TextBlock_Main' has a wrong offset!");
static_assert(offsetof(UHorizonRadioButtonUserWidget, Text_Main) == 0x0002E0, "Member 'UHorizonRadioButtonUserWidget::Text_Main' has a wrong offset!");
static_assert(offsetof(UHorizonRadioButtonUserWidget, bCheckedByDefault) == 0x0002F8, "Member 'UHorizonRadioButtonUserWidget::bCheckedByDefault' has a wrong offset!");

// Class HorizonUI.HorizonTextBlock
// 0x0000 (0x0340 - 0x0340)
class UHorizonTextBlock final : public UTextBlock
{
public:
	ETextJustify GetJustification() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonTextBlock">();
	}
	static class UHorizonTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonTextBlock>();
	}
};
static_assert(alignof(UHorizonTextBlock) == 0x000010, "Wrong alignment on UHorizonTextBlock");
static_assert(sizeof(UHorizonTextBlock) == 0x000340, "Wrong size on UHorizonTextBlock");

// Class HorizonUI.HorizonTileView
// 0x0110 (0x0D60 - 0x0C50)
class UHorizonTileView final : public UTileView
{
public:
	uint8                                         Pad_117F[0x8];                                     // 0x0C50(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnInitListItemEvent;                               // 0x0C58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1180[0x18];                                    // 0x0C68(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnItemPressedEvent;                                // 0x0C80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1181[0x18];                                    // 0x0C90(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnItemReleasedEvent;                               // 0x0CA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1182[0x18];                                    // 0x0CB8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnItemHoveredEvent;                                // 0x0CD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1183[0x18];                                    // 0x0CE0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnItemUnhoveredEvent;                              // 0x0CF8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1184[0x18];                                    // 0x0D08(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnItemClickedEvent;                                // 0x0D20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1185[0x30];                                    // 0x0D30(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UHorizonListViewItemWidget* BP_GetEntryWidgetFromItem(class UObject* InItem);
	int32 GetNumGeneratedChildren();
	void InitListItem();
	bool IsFocusable();
	bool IsPendingRefresh();
	void NavigateToAndSelectIndex(int32 InIndex);
	void OnInitListItemEvent__DelegateSignature(class UHorizonTileView* InTileView);
	void OnItemEvent__DelegateSignature(class UObject* InItem);
	void RequestListRefresh();
	void RerouteItemClicked(class UObject* InItem);
	void RerouteItemHovered(class UObject* InItem);
	void RerouteItemPressed(class UObject* InItem);
	void RerouteItemReleased(class UObject* InItem);
	void RerouteItemUnhovered(class UObject* InItem);
	void SynchronizeProperties();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonTileView">();
	}
	static class UHorizonTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonTileView>();
	}
};
static_assert(alignof(UHorizonTileView) == 0x000010, "Wrong alignment on UHorizonTileView");
static_assert(sizeof(UHorizonTileView) == 0x000D60, "Wrong size on UHorizonTileView");
static_assert(offsetof(UHorizonTileView, OnInitListItemEvent) == 0x000C58, "Member 'UHorizonTileView::OnInitListItemEvent' has a wrong offset!");
static_assert(offsetof(UHorizonTileView, OnItemPressedEvent) == 0x000C80, "Member 'UHorizonTileView::OnItemPressedEvent' has a wrong offset!");
static_assert(offsetof(UHorizonTileView, OnItemReleasedEvent) == 0x000CA8, "Member 'UHorizonTileView::OnItemReleasedEvent' has a wrong offset!");
static_assert(offsetof(UHorizonTileView, OnItemHoveredEvent) == 0x000CD0, "Member 'UHorizonTileView::OnItemHoveredEvent' has a wrong offset!");
static_assert(offsetof(UHorizonTileView, OnItemUnhoveredEvent) == 0x000CF8, "Member 'UHorizonTileView::OnItemUnhoveredEvent' has a wrong offset!");
static_assert(offsetof(UHorizonTileView, OnItemClickedEvent) == 0x000D20, "Member 'UHorizonTileView::OnItemClickedEvent' has a wrong offset!");

// Class HorizonUI.HorizonWidgetFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UHorizonWidgetFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static EHorizonUIInputMode GetInputMode(const class APlayerController* InPC);
	static class UCanvasPanelSlot* GetParentCanvasPanelSlot(class UWidget* PWidget);
	static int32 GetUserIndex(class UWidget* InWidget);
	static class UWidgetAnimation* GetUserWidgetAnimation(class UUserWidget* PUserWidget, const class FName& AnimeName);
	static class UWidget* GetWidgetFromNameRecursively(class UUserWidget* PUserWidget, const class FName& InWidgetName);
	static bool IsAlphabetic(int32 InCodePoint);
	static bool IsIdeographic(int32 InCodePoint);
	static void SetInputMode(class APlayerController* InPC, EHorizonUIInputMode InInputMode, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode, bool bInHideCursorDuringCapture);
	static class UWidget* SetWidgetVisibility(class UUserWidget* UserWidget, class FName WidgetName, ESlateVisibility EVisiblity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HorizonWidgetFunctionLibrary">();
	}
	static class UHorizonWidgetFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHorizonWidgetFunctionLibrary>();
	}
};
static_assert(alignof(UHorizonWidgetFunctionLibrary) == 0x000008, "Wrong alignment on UHorizonWidgetFunctionLibrary");
static_assert(sizeof(UHorizonWidgetFunctionLibrary) == 0x000028, "Wrong size on UHorizonWidgetFunctionLibrary");

}

