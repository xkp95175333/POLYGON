#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: POLYGON

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "NetCore_structs.hpp"
#include "Engine_structs.hpp"
#include "POLYGON_structs.hpp"
#include "PlayFab_structs.hpp"


namespace SDK::Params
{

// Function POLYGON.PG_PlayerState_Base.SetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct PG_PlayerState_Base_SetPlayerName final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerState_Base_SetPlayerName) == 0x000008, "Wrong alignment on PG_PlayerState_Base_SetPlayerName");
static_assert(sizeof(PG_PlayerState_Base_SetPlayerName) == 0x000010, "Wrong size on PG_PlayerState_Base_SetPlayerName");
static_assert(offsetof(PG_PlayerState_Base_SetPlayerName, PlayerName) == 0x000000, "Member 'PG_PlayerState_Base_SetPlayerName::PlayerName' has a wrong offset!");

// Function POLYGON.PG_PlayerState_Base.UpdatePlayerCombinedInfo
// 0x0020 (0x0020 - 0x0000)
struct PG_PlayerState_Base_UpdatePlayerCombinedInfo final
{
public:
	TArray<EModifiedData>                         ModifiedData;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 CustomDelegateString;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerState_Base_UpdatePlayerCombinedInfo) == 0x000008, "Wrong alignment on PG_PlayerState_Base_UpdatePlayerCombinedInfo");
static_assert(sizeof(PG_PlayerState_Base_UpdatePlayerCombinedInfo) == 0x000020, "Wrong size on PG_PlayerState_Base_UpdatePlayerCombinedInfo");
static_assert(offsetof(PG_PlayerState_Base_UpdatePlayerCombinedInfo, ModifiedData) == 0x000000, "Member 'PG_PlayerState_Base_UpdatePlayerCombinedInfo::ModifiedData' has a wrong offset!");
static_assert(offsetof(PG_PlayerState_Base_UpdatePlayerCombinedInfo, CustomDelegateString) == 0x000010, "Member 'PG_PlayerState_Base_UpdatePlayerCombinedInfo::CustomDelegateString' has a wrong offset!");

// Function POLYGON.PG_PlayerState_Base.GetUniqueNetId
// 0x0030 (0x0030 - 0x0000)
struct PG_PlayerState_Base_GetUniqueNetId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerState_Base_GetUniqueNetId) == 0x000008, "Wrong alignment on PG_PlayerState_Base_GetUniqueNetId");
static_assert(sizeof(PG_PlayerState_Base_GetUniqueNetId) == 0x000030, "Wrong size on PG_PlayerState_Base_GetUniqueNetId");
static_assert(offsetof(PG_PlayerState_Base_GetUniqueNetId, ReturnValue) == 0x000000, "Member 'PG_PlayerState_Base_GetUniqueNetId::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_PlayerState_Game.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct PG_PlayerState_Game_SetTeam final
{
public:
	ETeam                                         NewTeam;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerState_Game_SetTeam) == 0x000001, "Wrong alignment on PG_PlayerState_Game_SetTeam");
static_assert(sizeof(PG_PlayerState_Game_SetTeam) == 0x000001, "Wrong size on PG_PlayerState_Game_SetTeam");
static_assert(offsetof(PG_PlayerState_Game_SetTeam, NewTeam) == 0x000000, "Member 'PG_PlayerState_Game_SetTeam::NewTeam' has a wrong offset!");

// Function POLYGON.PG_PlayerState_Game.CustomIsInactive
// 0x0001 (0x0001 - 0x0000)
struct PG_PlayerState_Game_CustomIsInactive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerState_Game_CustomIsInactive) == 0x000001, "Wrong alignment on PG_PlayerState_Game_CustomIsInactive");
static_assert(sizeof(PG_PlayerState_Game_CustomIsInactive) == 0x000001, "Wrong size on PG_PlayerState_Game_CustomIsInactive");
static_assert(offsetof(PG_PlayerState_Game_CustomIsInactive, ReturnValue) == 0x000000, "Member 'PG_PlayerState_Game_CustomIsInactive::ReturnValue' has a wrong offset!");

// Function POLYGON.TraceProjectile.Spawn
// 0x0048 (0x0048 - 0x0000)
struct TraceProjectile_Spawn final
{
public:
	TSubclassOf<class ATraceProjectile>           bulletClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem_Gun_General*                      Gun;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartVelocity;                                     // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomSeed;                                        // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C15[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceProjectile_Spawn) == 0x000008, "Wrong alignment on TraceProjectile_Spawn");
static_assert(sizeof(TraceProjectile_Spawn) == 0x000048, "Wrong size on TraceProjectile_Spawn");
static_assert(offsetof(TraceProjectile_Spawn, bulletClass) == 0x000000, "Member 'TraceProjectile_Spawn::bulletClass' has a wrong offset!");
static_assert(offsetof(TraceProjectile_Spawn, Gun) == 0x000008, "Member 'TraceProjectile_Spawn::Gun' has a wrong offset!");
static_assert(offsetof(TraceProjectile_Spawn, SpawnLocation) == 0x000010, "Member 'TraceProjectile_Spawn::SpawnLocation' has a wrong offset!");
static_assert(offsetof(TraceProjectile_Spawn, StartVelocity) == 0x000028, "Member 'TraceProjectile_Spawn::StartVelocity' has a wrong offset!");
static_assert(offsetof(TraceProjectile_Spawn, RandomSeed) == 0x000040, "Member 'TraceProjectile_Spawn::RandomSeed' has a wrong offset!");

// Function POLYGON.TraceProjectile.SpawnWithExactVelocity
// 0x0048 (0x0048 - 0x0000)
struct TraceProjectile_SpawnWithExactVelocity final
{
public:
	TSubclassOf<class ATraceProjectile>           bulletClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem_Gun_General*                      Gun;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartVelocity;                                     // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomSeed;                                        // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C16[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceProjectile_SpawnWithExactVelocity) == 0x000008, "Wrong alignment on TraceProjectile_SpawnWithExactVelocity");
static_assert(sizeof(TraceProjectile_SpawnWithExactVelocity) == 0x000048, "Wrong size on TraceProjectile_SpawnWithExactVelocity");
static_assert(offsetof(TraceProjectile_SpawnWithExactVelocity, bulletClass) == 0x000000, "Member 'TraceProjectile_SpawnWithExactVelocity::bulletClass' has a wrong offset!");
static_assert(offsetof(TraceProjectile_SpawnWithExactVelocity, Gun) == 0x000008, "Member 'TraceProjectile_SpawnWithExactVelocity::Gun' has a wrong offset!");
static_assert(offsetof(TraceProjectile_SpawnWithExactVelocity, SpawnLocation) == 0x000010, "Member 'TraceProjectile_SpawnWithExactVelocity::SpawnLocation' has a wrong offset!");
static_assert(offsetof(TraceProjectile_SpawnWithExactVelocity, StartVelocity) == 0x000028, "Member 'TraceProjectile_SpawnWithExactVelocity::StartVelocity' has a wrong offset!");
static_assert(offsetof(TraceProjectile_SpawnWithExactVelocity, RandomSeed) == 0x000040, "Member 'TraceProjectile_SpawnWithExactVelocity::RandomSeed' has a wrong offset!");

// Function POLYGON.TraceProjectile.OnImpact
// 0x0128 (0x0128 - 0x0000)
struct TraceProjectile_OnImpact final
{
public:
	bool                                          Ricochet;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PassedThrough;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C17[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ExitVelocity;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Impulse;                                           // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PenetrationDepth;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C18[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0040(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TraceProjectile_OnImpact) == 0x000008, "Wrong alignment on TraceProjectile_OnImpact");
static_assert(sizeof(TraceProjectile_OnImpact) == 0x000128, "Wrong size on TraceProjectile_OnImpact");
static_assert(offsetof(TraceProjectile_OnImpact, Ricochet) == 0x000000, "Member 'TraceProjectile_OnImpact::Ricochet' has a wrong offset!");
static_assert(offsetof(TraceProjectile_OnImpact, PassedThrough) == 0x000001, "Member 'TraceProjectile_OnImpact::PassedThrough' has a wrong offset!");
static_assert(offsetof(TraceProjectile_OnImpact, ExitVelocity) == 0x000008, "Member 'TraceProjectile_OnImpact::ExitVelocity' has a wrong offset!");
static_assert(offsetof(TraceProjectile_OnImpact, Impulse) == 0x000020, "Member 'TraceProjectile_OnImpact::Impulse' has a wrong offset!");
static_assert(offsetof(TraceProjectile_OnImpact, PenetrationDepth) == 0x000038, "Member 'TraceProjectile_OnImpact::PenetrationDepth' has a wrong offset!");
static_assert(offsetof(TraceProjectile_OnImpact, HitResult) == 0x000040, "Member 'TraceProjectile_OnImpact::HitResult' has a wrong offset!");

// Function POLYGON.TraceProjectile.OnTrace
// 0x0030 (0x0030 - 0x0000)
struct TraceProjectile_OnTrace final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TraceProjectile_OnTrace) == 0x000008, "Wrong alignment on TraceProjectile_OnTrace");
static_assert(sizeof(TraceProjectile_OnTrace) == 0x000030, "Wrong size on TraceProjectile_OnTrace");
static_assert(offsetof(TraceProjectile_OnTrace, StartLocation) == 0x000000, "Member 'TraceProjectile_OnTrace::StartLocation' has a wrong offset!");
static_assert(offsetof(TraceProjectile_OnTrace, EndLocation) == 0x000018, "Member 'TraceProjectile_OnTrace::EndLocation' has a wrong offset!");

// Function POLYGON.TraceProjectile.OnTrajectoryUpdateReceived
// 0x0048 (0x0048 - 0x0000)
struct TraceProjectile_OnTrajectoryUpdateReceived final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewVelocity;                                       // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TraceProjectile_OnTrajectoryUpdateReceived) == 0x000008, "Wrong alignment on TraceProjectile_OnTrajectoryUpdateReceived");
static_assert(sizeof(TraceProjectile_OnTrajectoryUpdateReceived) == 0x000048, "Wrong size on TraceProjectile_OnTrajectoryUpdateReceived");
static_assert(offsetof(TraceProjectile_OnTrajectoryUpdateReceived, Location) == 0x000000, "Member 'TraceProjectile_OnTrajectoryUpdateReceived::Location' has a wrong offset!");
static_assert(offsetof(TraceProjectile_OnTrajectoryUpdateReceived, OldVelocity) == 0x000018, "Member 'TraceProjectile_OnTrajectoryUpdateReceived::OldVelocity' has a wrong offset!");
static_assert(offsetof(TraceProjectile_OnTrajectoryUpdateReceived, NewVelocity) == 0x000030, "Member 'TraceProjectile_OnTrajectoryUpdateReceived::NewVelocity' has a wrong offset!");

// Function POLYGON.TraceProjectile.CollisionFilter
// 0x00F0 (0x00F0 - 0x0000)
struct TraceProjectile_CollisionFilter final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C19[0x7];                                     // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TraceProjectile_CollisionFilter) == 0x000008, "Wrong alignment on TraceProjectile_CollisionFilter");
static_assert(sizeof(TraceProjectile_CollisionFilter) == 0x0000F0, "Wrong size on TraceProjectile_CollisionFilter");
static_assert(offsetof(TraceProjectile_CollisionFilter, HitResult) == 0x000000, "Member 'TraceProjectile_CollisionFilter::HitResult' has a wrong offset!");
static_assert(offsetof(TraceProjectile_CollisionFilter, ReturnValue) == 0x0000E8, "Member 'TraceProjectile_CollisionFilter::ReturnValue' has a wrong offset!");

// Function POLYGON.TraceProjectile.UpdateVelocity
// 0x0050 (0x0050 - 0x0000)
struct TraceProjectile_UpdateVelocity final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreviousVelocity;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1A[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TraceProjectile_UpdateVelocity) == 0x000008, "Wrong alignment on TraceProjectile_UpdateVelocity");
static_assert(sizeof(TraceProjectile_UpdateVelocity) == 0x000050, "Wrong size on TraceProjectile_UpdateVelocity");
static_assert(offsetof(TraceProjectile_UpdateVelocity, Location) == 0x000000, "Member 'TraceProjectile_UpdateVelocity::Location' has a wrong offset!");
static_assert(offsetof(TraceProjectile_UpdateVelocity, PreviousVelocity) == 0x000018, "Member 'TraceProjectile_UpdateVelocity::PreviousVelocity' has a wrong offset!");
static_assert(offsetof(TraceProjectile_UpdateVelocity, DeltaTime) == 0x000030, "Member 'TraceProjectile_UpdateVelocity::DeltaTime' has a wrong offset!");
static_assert(offsetof(TraceProjectile_UpdateVelocity, ReturnValue) == 0x000038, "Member 'TraceProjectile_UpdateVelocity::ReturnValue' has a wrong offset!");

// Function POLYGON.PlayerCoreComponent.GetLevelByProgress
// 0x0050 (0x0050 - 0x0000)
struct PlayerCoreComponent_GetLevelByProgress final
{
public:
	int32                                         Progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelInfo                             ReturnValue;                                       // 0x0008(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCoreComponent_GetLevelByProgress) == 0x000008, "Wrong alignment on PlayerCoreComponent_GetLevelByProgress");
static_assert(sizeof(PlayerCoreComponent_GetLevelByProgress) == 0x000050, "Wrong size on PlayerCoreComponent_GetLevelByProgress");
static_assert(offsetof(PlayerCoreComponent_GetLevelByProgress, Progress) == 0x000000, "Member 'PlayerCoreComponent_GetLevelByProgress::Progress' has a wrong offset!");
static_assert(offsetof(PlayerCoreComponent_GetLevelByProgress, ReturnValue) == 0x000008, "Member 'PlayerCoreComponent_GetLevelByProgress::ReturnValue' has a wrong offset!");

// Function POLYGON.PlayerCoreComponent.GetNextLevelByLevelID
// 0x0050 (0x0050 - 0x0000)
struct PlayerCoreComponent_GetNextLevelByLevelID final
{
public:
	class FName                                   LevelID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelInfo                             ReturnValue;                                       // 0x0008(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCoreComponent_GetNextLevelByLevelID) == 0x000008, "Wrong alignment on PlayerCoreComponent_GetNextLevelByLevelID");
static_assert(sizeof(PlayerCoreComponent_GetNextLevelByLevelID) == 0x000050, "Wrong size on PlayerCoreComponent_GetNextLevelByLevelID");
static_assert(offsetof(PlayerCoreComponent_GetNextLevelByLevelID, LevelID) == 0x000000, "Member 'PlayerCoreComponent_GetNextLevelByLevelID::LevelID' has a wrong offset!");
static_assert(offsetof(PlayerCoreComponent_GetNextLevelByLevelID, ReturnValue) == 0x000008, "Member 'PlayerCoreComponent_GetNextLevelByLevelID::ReturnValue' has a wrong offset!");

// Function POLYGON.PlayerCoreComponent.AddCredits
// 0x0004 (0x0004 - 0x0000)
struct PlayerCoreComponent_AddCredits final
{
public:
	int32                                         Param_AddCredits;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCoreComponent_AddCredits) == 0x000004, "Wrong alignment on PlayerCoreComponent_AddCredits");
static_assert(sizeof(PlayerCoreComponent_AddCredits) == 0x000004, "Wrong size on PlayerCoreComponent_AddCredits");
static_assert(offsetof(PlayerCoreComponent_AddCredits, Param_AddCredits) == 0x000000, "Member 'PlayerCoreComponent_AddCredits::Param_AddCredits' has a wrong offset!");

// Function POLYGON.PlayerCoreComponent.NotifyAddedGameScore_client
// 0x0010 (0x0010 - 0x0000)
struct PlayerCoreComponent_NotifyAddedGameScore_client final
{
public:
	TArray<struct FScoreInfo>                     ScoreInfos;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCoreComponent_NotifyAddedGameScore_client) == 0x000008, "Wrong alignment on PlayerCoreComponent_NotifyAddedGameScore_client");
static_assert(sizeof(PlayerCoreComponent_NotifyAddedGameScore_client) == 0x000010, "Wrong size on PlayerCoreComponent_NotifyAddedGameScore_client");
static_assert(offsetof(PlayerCoreComponent_NotifyAddedGameScore_client, ScoreInfos) == 0x000000, "Member 'PlayerCoreComponent_NotifyAddedGameScore_client::ScoreInfos' has a wrong offset!");

// Function POLYGON.PlayerCoreComponent.UpdatePlayerCombinedInfo
// 0x0020 (0x0020 - 0x0000)
struct PlayerCoreComponent_UpdatePlayerCombinedInfo final
{
public:
	TArray<EModifiedData>                         ModifiedData;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 CustomDelegateString;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCoreComponent_UpdatePlayerCombinedInfo) == 0x000008, "Wrong alignment on PlayerCoreComponent_UpdatePlayerCombinedInfo");
static_assert(sizeof(PlayerCoreComponent_UpdatePlayerCombinedInfo) == 0x000020, "Wrong size on PlayerCoreComponent_UpdatePlayerCombinedInfo");
static_assert(offsetof(PlayerCoreComponent_UpdatePlayerCombinedInfo, ModifiedData) == 0x000000, "Member 'PlayerCoreComponent_UpdatePlayerCombinedInfo::ModifiedData' has a wrong offset!");
static_assert(offsetof(PlayerCoreComponent_UpdatePlayerCombinedInfo, CustomDelegateString) == 0x000010, "Member 'PlayerCoreComponent_UpdatePlayerCombinedInfo::CustomDelegateString' has a wrong offset!");

// Function POLYGON.PlayerCoreComponent.GetCurrentLevelInfo
// 0x0048 (0x0048 - 0x0000)
struct PlayerCoreComponent_GetCurrentLevelInfo final
{
public:
	struct FLevelInfo                             ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCoreComponent_GetCurrentLevelInfo) == 0x000008, "Wrong alignment on PlayerCoreComponent_GetCurrentLevelInfo");
static_assert(sizeof(PlayerCoreComponent_GetCurrentLevelInfo) == 0x000048, "Wrong size on PlayerCoreComponent_GetCurrentLevelInfo");
static_assert(offsetof(PlayerCoreComponent_GetCurrentLevelInfo, ReturnValue) == 0x000000, "Member 'PlayerCoreComponent_GetCurrentLevelInfo::ReturnValue' has a wrong offset!");

// Function POLYGON.PlayerCoreComponent.GetNextLevelInfo
// 0x0048 (0x0048 - 0x0000)
struct PlayerCoreComponent_GetNextLevelInfo final
{
public:
	struct FLevelInfo                             ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCoreComponent_GetNextLevelInfo) == 0x000008, "Wrong alignment on PlayerCoreComponent_GetNextLevelInfo");
static_assert(sizeof(PlayerCoreComponent_GetNextLevelInfo) == 0x000048, "Wrong size on PlayerCoreComponent_GetNextLevelInfo");
static_assert(offsetof(PlayerCoreComponent_GetNextLevelInfo, ReturnValue) == 0x000000, "Member 'PlayerCoreComponent_GetNextLevelInfo::ReturnValue' has a wrong offset!");

// Function POLYGON.ChatSystemComponent.SendMessage_Server
// 0x0020 (0x0020 - 0x0000)
struct ChatSystemComponent_SendMessage_Server final
{
public:
	struct FGameChatMessage                       Message;                                           // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatSystemComponent_SendMessage_Server) == 0x000008, "Wrong alignment on ChatSystemComponent_SendMessage_Server");
static_assert(sizeof(ChatSystemComponent_SendMessage_Server) == 0x000020, "Wrong size on ChatSystemComponent_SendMessage_Server");
static_assert(offsetof(ChatSystemComponent_SendMessage_Server, Message) == 0x000000, "Member 'ChatSystemComponent_SendMessage_Server::Message' has a wrong offset!");

// Function POLYGON.ChatSystemComponent.SentMessage_Multicast
// 0x0020 (0x0020 - 0x0000)
struct ChatSystemComponent_SentMessage_Multicast final
{
public:
	struct FGameChatMessage                       Message;                                           // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatSystemComponent_SentMessage_Multicast) == 0x000008, "Wrong alignment on ChatSystemComponent_SentMessage_Multicast");
static_assert(sizeof(ChatSystemComponent_SentMessage_Multicast) == 0x000020, "Wrong size on ChatSystemComponent_SentMessage_Multicast");
static_assert(offsetof(ChatSystemComponent_SentMessage_Multicast, Message) == 0x000000, "Member 'ChatSystemComponent_SentMessage_Multicast::Message' has a wrong offset!");

// Function POLYGON.ClientBackendComponent.IsClientLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct ClientBackendComponent_IsClientLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientBackendComponent_IsClientLoggedIn) == 0x000001, "Wrong alignment on ClientBackendComponent_IsClientLoggedIn");
static_assert(sizeof(ClientBackendComponent_IsClientLoggedIn) == 0x000001, "Wrong size on ClientBackendComponent_IsClientLoggedIn");
static_assert(offsetof(ClientBackendComponent_IsClientLoggedIn, ReturnValue) == 0x000000, "Member 'ClientBackendComponent_IsClientLoggedIn::ReturnValue' has a wrong offset!");

// Function POLYGON.ClientBackendComponent.GiveVipLocal
// 0x0010 (0x0010 - 0x0000)
struct ClientBackendComponent_GiveVipLocal final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientBackendComponent_GiveVipLocal) == 0x000008, "Wrong alignment on ClientBackendComponent_GiveVipLocal");
static_assert(sizeof(ClientBackendComponent_GiveVipLocal) == 0x000010, "Wrong size on ClientBackendComponent_GiveVipLocal");
static_assert(offsetof(ClientBackendComponent_GiveVipLocal, ID) == 0x000000, "Member 'ClientBackendComponent_GiveVipLocal::ID' has a wrong offset!");

// Function POLYGON.ClientBackendComponent.SerPlayerExperiments
// 0x0008 (0x0008 - 0x0000)
struct ClientBackendComponent_SerPlayerExperiments final
{
public:
	class UPlayFabJsonObject*                     Experiments;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientBackendComponent_SerPlayerExperiments) == 0x000008, "Wrong alignment on ClientBackendComponent_SerPlayerExperiments");
static_assert(sizeof(ClientBackendComponent_SerPlayerExperiments) == 0x000008, "Wrong size on ClientBackendComponent_SerPlayerExperiments");
static_assert(offsetof(ClientBackendComponent_SerPlayerExperiments, Experiments) == 0x000000, "Member 'ClientBackendComponent_SerPlayerExperiments::Experiments' has a wrong offset!");

// Function POLYGON.ClientBackendComponent.SetPlayerCombinedInfo
// 0x0028 (0x0028 - 0x0000)
struct ClientBackendComponent_SetPlayerCombinedInfo final
{
public:
	class UPlayFabJsonObject*                     NewPlayerCombinedInfo;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EModifiedData>                         ModifiedData;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 CustomDelegateString;                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientBackendComponent_SetPlayerCombinedInfo) == 0x000008, "Wrong alignment on ClientBackendComponent_SetPlayerCombinedInfo");
static_assert(sizeof(ClientBackendComponent_SetPlayerCombinedInfo) == 0x000028, "Wrong size on ClientBackendComponent_SetPlayerCombinedInfo");
static_assert(offsetof(ClientBackendComponent_SetPlayerCombinedInfo, NewPlayerCombinedInfo) == 0x000000, "Member 'ClientBackendComponent_SetPlayerCombinedInfo::NewPlayerCombinedInfo' has a wrong offset!");
static_assert(offsetof(ClientBackendComponent_SetPlayerCombinedInfo, ModifiedData) == 0x000008, "Member 'ClientBackendComponent_SetPlayerCombinedInfo::ModifiedData' has a wrong offset!");
static_assert(offsetof(ClientBackendComponent_SetPlayerCombinedInfo, CustomDelegateString) == 0x000018, "Member 'ClientBackendComponent_SetPlayerCombinedInfo::CustomDelegateString' has a wrong offset!");

// Function POLYGON.ClientBackendComponent.SetPlayerId
// 0x0010 (0x0010 - 0x0000)
struct ClientBackendComponent_SetPlayerId final
{
public:
	class FString                                 NewPlayerMasterId;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientBackendComponent_SetPlayerId) == 0x000008, "Wrong alignment on ClientBackendComponent_SetPlayerId");
static_assert(sizeof(ClientBackendComponent_SetPlayerId) == 0x000010, "Wrong size on ClientBackendComponent_SetPlayerId");
static_assert(offsetof(ClientBackendComponent_SetPlayerId, NewPlayerMasterId) == 0x000000, "Member 'ClientBackendComponent_SetPlayerId::NewPlayerMasterId' has a wrong offset!");

// Function POLYGON.ClientBackendComponent.GetPlayerCombinedInfo
// 0x0008 (0x0008 - 0x0000)
struct ClientBackendComponent_GetPlayerCombinedInfo final
{
public:
	class UPlayFabJsonObject*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientBackendComponent_GetPlayerCombinedInfo) == 0x000008, "Wrong alignment on ClientBackendComponent_GetPlayerCombinedInfo");
static_assert(sizeof(ClientBackendComponent_GetPlayerCombinedInfo) == 0x000008, "Wrong size on ClientBackendComponent_GetPlayerCombinedInfo");
static_assert(offsetof(ClientBackendComponent_GetPlayerCombinedInfo, ReturnValue) == 0x000000, "Member 'ClientBackendComponent_GetPlayerCombinedInfo::ReturnValue' has a wrong offset!");

// Function POLYGON.ClientBackendComponent.GetPlayerExperiments
// 0x0008 (0x0008 - 0x0000)
struct ClientBackendComponent_GetPlayerExperiments final
{
public:
	class UPlayFabJsonObject*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientBackendComponent_GetPlayerExperiments) == 0x000008, "Wrong alignment on ClientBackendComponent_GetPlayerExperiments");
static_assert(sizeof(ClientBackendComponent_GetPlayerExperiments) == 0x000008, "Wrong size on ClientBackendComponent_GetPlayerExperiments");
static_assert(offsetof(ClientBackendComponent_GetPlayerExperiments, ReturnValue) == 0x000000, "Member 'ClientBackendComponent_GetPlayerExperiments::ReturnValue' has a wrong offset!");

// Function POLYGON.ServerGameInstance.OnGSDKHealthCheck
// 0x0001 (0x0001 - 0x0000)
struct ServerGameInstance_OnGSDKHealthCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerGameInstance_OnGSDKHealthCheck) == 0x000001, "Wrong alignment on ServerGameInstance_OnGSDKHealthCheck");
static_assert(sizeof(ServerGameInstance_OnGSDKHealthCheck) == 0x000001, "Wrong size on ServerGameInstance_OnGSDKHealthCheck");
static_assert(offsetof(ServerGameInstance_OnGSDKHealthCheck, ReturnValue) == 0x000000, "Member 'ServerGameInstance_OnGSDKHealthCheck::ReturnValue' has a wrong offset!");

// Function POLYGON.ClientGameInstance.HandleNetworkFailure
// 0x0028 (0x0028 - 0x0000)
struct ClientGameInstance_HandleNetworkFailure final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                             NetDriver;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetworkFailure                               FailureType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C23[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientGameInstance_HandleNetworkFailure) == 0x000008, "Wrong alignment on ClientGameInstance_HandleNetworkFailure");
static_assert(sizeof(ClientGameInstance_HandleNetworkFailure) == 0x000028, "Wrong size on ClientGameInstance_HandleNetworkFailure");
static_assert(offsetof(ClientGameInstance_HandleNetworkFailure, World) == 0x000000, "Member 'ClientGameInstance_HandleNetworkFailure::World' has a wrong offset!");
static_assert(offsetof(ClientGameInstance_HandleNetworkFailure, NetDriver) == 0x000008, "Member 'ClientGameInstance_HandleNetworkFailure::NetDriver' has a wrong offset!");
static_assert(offsetof(ClientGameInstance_HandleNetworkFailure, FailureType) == 0x000010, "Member 'ClientGameInstance_HandleNetworkFailure::FailureType' has a wrong offset!");
static_assert(offsetof(ClientGameInstance_HandleNetworkFailure, ErrorString) == 0x000018, "Member 'ClientGameInstance_HandleNetworkFailure::ErrorString' has a wrong offset!");

// Function POLYGON.ClientGameInstance.SetPlayerCombinedInfo
// 0x0008 (0x0008 - 0x0000)
struct ClientGameInstance_SetPlayerCombinedInfo final
{
public:
	class UPlayFabJsonObject*                     NewPlayerCombinedInfo;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientGameInstance_SetPlayerCombinedInfo) == 0x000008, "Wrong alignment on ClientGameInstance_SetPlayerCombinedInfo");
static_assert(sizeof(ClientGameInstance_SetPlayerCombinedInfo) == 0x000008, "Wrong size on ClientGameInstance_SetPlayerCombinedInfo");
static_assert(offsetof(ClientGameInstance_SetPlayerCombinedInfo, NewPlayerCombinedInfo) == 0x000000, "Member 'ClientGameInstance_SetPlayerCombinedInfo::NewPlayerCombinedInfo' has a wrong offset!");

// Function POLYGON.ClientGameInstance.SetPlayerId
// 0x0010 (0x0010 - 0x0000)
struct ClientGameInstance_SetPlayerId final
{
public:
	class FString                                 NewPlayerMasterId;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientGameInstance_SetPlayerId) == 0x000008, "Wrong alignment on ClientGameInstance_SetPlayerId");
static_assert(sizeof(ClientGameInstance_SetPlayerId) == 0x000010, "Wrong size on ClientGameInstance_SetPlayerId");
static_assert(offsetof(ClientGameInstance_SetPlayerId, NewPlayerMasterId) == 0x000000, "Member 'ClientGameInstance_SetPlayerId::NewPlayerMasterId' has a wrong offset!");

// Function POLYGON.ClientGameInstance.SetServerTime
// 0x0008 (0x0008 - 0x0000)
struct ClientGameInstance_SetServerTime final
{
public:
	struct FDateTime                              ServerTime;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientGameInstance_SetServerTime) == 0x000008, "Wrong alignment on ClientGameInstance_SetServerTime");
static_assert(sizeof(ClientGameInstance_SetServerTime) == 0x000008, "Wrong size on ClientGameInstance_SetServerTime");
static_assert(offsetof(ClientGameInstance_SetServerTime, ServerTime) == 0x000000, "Member 'ClientGameInstance_SetServerTime::ServerTime' has a wrong offset!");

// Function POLYGON.ClientGameInstance.GetPlayerCombinedInfo
// 0x0008 (0x0008 - 0x0000)
struct ClientGameInstance_GetPlayerCombinedInfo final
{
public:
	class UPlayFabJsonObject*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientGameInstance_GetPlayerCombinedInfo) == 0x000008, "Wrong alignment on ClientGameInstance_GetPlayerCombinedInfo");
static_assert(sizeof(ClientGameInstance_GetPlayerCombinedInfo) == 0x000008, "Wrong size on ClientGameInstance_GetPlayerCombinedInfo");
static_assert(offsetof(ClientGameInstance_GetPlayerCombinedInfo, ReturnValue) == 0x000000, "Member 'ClientGameInstance_GetPlayerCombinedInfo::ReturnValue' has a wrong offset!");

// Function POLYGON.ClientGameInstance.GetPlayerMasterId
// 0x0010 (0x0010 - 0x0000)
struct ClientGameInstance_GetPlayerMasterId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientGameInstance_GetPlayerMasterId) == 0x000008, "Wrong alignment on ClientGameInstance_GetPlayerMasterId");
static_assert(sizeof(ClientGameInstance_GetPlayerMasterId) == 0x000010, "Wrong size on ClientGameInstance_GetPlayerMasterId");
static_assert(offsetof(ClientGameInstance_GetPlayerMasterId, ReturnValue) == 0x000000, "Member 'ClientGameInstance_GetPlayerMasterId::ReturnValue' has a wrong offset!");

// Function POLYGON.ClientGameInstance.GetServerTime
// 0x0008 (0x0008 - 0x0000)
struct ClientGameInstance_GetServerTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientGameInstance_GetServerTime) == 0x000008, "Wrong alignment on ClientGameInstance_GetServerTime");
static_assert(sizeof(ClientGameInstance_GetServerTime) == 0x000008, "Wrong size on ClientGameInstance_GetServerTime");
static_assert(offsetof(ClientGameInstance_GetServerTime, ReturnValue) == 0x000000, "Member 'ClientGameInstance_GetServerTime::ReturnValue' has a wrong offset!");

// Function POLYGON.ControlPoint.ContainsCharacter
// 0x0010 (0x0010 - 0x0000)
struct ControlPoint_ContainsCharacter final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C29[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlPoint_ContainsCharacter) == 0x000008, "Wrong alignment on ControlPoint_ContainsCharacter");
static_assert(sizeof(ControlPoint_ContainsCharacter) == 0x000010, "Wrong size on ControlPoint_ContainsCharacter");
static_assert(offsetof(ControlPoint_ContainsCharacter, Character) == 0x000000, "Member 'ControlPoint_ContainsCharacter::Character' has a wrong offset!");
static_assert(offsetof(ControlPoint_ContainsCharacter, ReturnValue) == 0x000008, "Member 'ControlPoint_ContainsCharacter::ReturnValue' has a wrong offset!");

// Function POLYGON.ControlPoint.GetControlPointNameAsOneLetter
// 0x0010 (0x0010 - 0x0000)
struct ControlPoint_GetControlPointNameAsOneLetter final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlPoint_GetControlPointNameAsOneLetter) == 0x000008, "Wrong alignment on ControlPoint_GetControlPointNameAsOneLetter");
static_assert(sizeof(ControlPoint_GetControlPointNameAsOneLetter) == 0x000010, "Wrong size on ControlPoint_GetControlPointNameAsOneLetter");
static_assert(offsetof(ControlPoint_GetControlPointNameAsOneLetter, ReturnValue) == 0x000000, "Member 'ControlPoint_GetControlPointNameAsOneLetter::ReturnValue' has a wrong offset!");

// Function POLYGON.ControlPoint.GetControlPointNameAsString
// 0x0010 (0x0010 - 0x0000)
struct ControlPoint_GetControlPointNameAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ControlPoint_GetControlPointNameAsString) == 0x000008, "Wrong alignment on ControlPoint_GetControlPointNameAsString");
static_assert(sizeof(ControlPoint_GetControlPointNameAsString) == 0x000010, "Wrong size on ControlPoint_GetControlPointNameAsString");
static_assert(offsetof(ControlPoint_GetControlPointNameAsString, ReturnValue) == 0x000000, "Member 'ControlPoint_GetControlPointNameAsString::ReturnValue' has a wrong offset!");

// Function POLYGON.DataManagerLibrary.GetDataTableReferences
// 0x0008 (0x0008 - 0x0000)
struct DataManagerLibrary_GetDataTableReferences final
{
public:
	class UDataContainerAsset*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataManagerLibrary_GetDataTableReferences) == 0x000008, "Wrong alignment on DataManagerLibrary_GetDataTableReferences");
static_assert(sizeof(DataManagerLibrary_GetDataTableReferences) == 0x000008, "Wrong size on DataManagerLibrary_GetDataTableReferences");
static_assert(offsetof(DataManagerLibrary_GetDataTableReferences, ReturnValue) == 0x000000, "Member 'DataManagerLibrary_GetDataTableReferences::ReturnValue' has a wrong offset!");

// Function POLYGON.EOSPartyId.ToString
// 0x0010 (0x0010 - 0x0000)
struct EOSPartyId_ToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSPartyId_ToString) == 0x000008, "Wrong alignment on EOSPartyId_ToString");
static_assert(sizeof(EOSPartyId_ToString) == 0x000010, "Wrong size on EOSPartyId_ToString");
static_assert(offsetof(EOSPartyId_ToString, ReturnValue) == 0x000000, "Member 'EOSPartyId_ToString::ReturnValue' has a wrong offset!");

// Function POLYGON.EOSPartyMemberId.ToString
// 0x0010 (0x0010 - 0x0000)
struct EOSPartyMemberId_ToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSPartyMemberId_ToString) == 0x000008, "Wrong alignment on EOSPartyMemberId_ToString");
static_assert(sizeof(EOSPartyMemberId_ToString) == 0x000010, "Wrong size on EOSPartyMemberId_ToString");
static_assert(offsetof(EOSPartyMemberId_ToString, ReturnValue) == 0x000000, "Member 'EOSPartyMemberId_ToString::ReturnValue' has a wrong offset!");

// Function POLYGON.EOSSubsystemAvanced.GetJoinedParties
// 0x0018 (0x0018 - 0x0000)
struct EOSSubsystemAvanced_GetJoinedParties final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEOSPartyId*>                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSSubsystemAvanced_GetJoinedParties) == 0x000008, "Wrong alignment on EOSSubsystemAvanced_GetJoinedParties");
static_assert(sizeof(EOSSubsystemAvanced_GetJoinedParties) == 0x000018, "Wrong size on EOSSubsystemAvanced_GetJoinedParties");
static_assert(offsetof(EOSSubsystemAvanced_GetJoinedParties, WorldContextObject) == 0x000000, "Member 'EOSSubsystemAvanced_GetJoinedParties::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSSubsystemAvanced_GetJoinedParties, ReturnValue) == 0x000008, "Member 'EOSSubsystemAvanced_GetJoinedParties::ReturnValue' has a wrong offset!");

// Function POLYGON.EOSSubsystemAvanced.GetPartyMembers
// 0x0020 (0x0020 - 0x0000)
struct EOSSubsystemAvanced_GetPartyMembers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEOSPartyId*                            PartyId;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEOSPartyMemberId*>              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSSubsystemAvanced_GetPartyMembers) == 0x000008, "Wrong alignment on EOSSubsystemAvanced_GetPartyMembers");
static_assert(sizeof(EOSSubsystemAvanced_GetPartyMembers) == 0x000020, "Wrong size on EOSSubsystemAvanced_GetPartyMembers");
static_assert(offsetof(EOSSubsystemAvanced_GetPartyMembers, WorldContextObject) == 0x000000, "Member 'EOSSubsystemAvanced_GetPartyMembers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSSubsystemAvanced_GetPartyMembers, PartyId) == 0x000008, "Member 'EOSSubsystemAvanced_GetPartyMembers::PartyId' has a wrong offset!");
static_assert(offsetof(EOSSubsystemAvanced_GetPartyMembers, ReturnValue) == 0x000010, "Member 'EOSSubsystemAvanced_GetPartyMembers::ReturnValue' has a wrong offset!");

// Function POLYGON.EOSSubsystemAvanced.StartCreateParty
// 0x0020 (0x0020 - 0x0000)
struct EOSSubsystemAvanced_StartCreateParty final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyTypeId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool WasSuccessful)>           OnDone;                                            // 0x000C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C2D[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EOSSubsystemAvanced_StartCreateParty) == 0x000008, "Wrong alignment on EOSSubsystemAvanced_StartCreateParty");
static_assert(sizeof(EOSSubsystemAvanced_StartCreateParty) == 0x000020, "Wrong size on EOSSubsystemAvanced_StartCreateParty");
static_assert(offsetof(EOSSubsystemAvanced_StartCreateParty, WorldContextObject) == 0x000000, "Member 'EOSSubsystemAvanced_StartCreateParty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(EOSSubsystemAvanced_StartCreateParty, PartyTypeId) == 0x000008, "Member 'EOSSubsystemAvanced_StartCreateParty::PartyTypeId' has a wrong offset!");
static_assert(offsetof(EOSSubsystemAvanced_StartCreateParty, OnDone) == 0x00000C, "Member 'EOSSubsystemAvanced_StartCreateParty::OnDone' has a wrong offset!");

// Function POLYGON.EOSSubsystemAvanced.StartLogin
// 0x0010 (0x0010 - 0x0000)
struct EOSSubsystemAvanced_StartLogin final
{
public:
	TDelegate<void(bool IsSuccessful, const class FString& ErrorMessage)> OnLoginComplete;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EOSSubsystemAvanced_StartLogin) == 0x000004, "Wrong alignment on EOSSubsystemAvanced_StartLogin");
static_assert(sizeof(EOSSubsystemAvanced_StartLogin) == 0x000010, "Wrong size on EOSSubsystemAvanced_StartLogin");
static_assert(offsetof(EOSSubsystemAvanced_StartLogin, OnLoginComplete) == 0x000000, "Member 'EOSSubsystemAvanced_StartLogin::OnLoginComplete' has a wrong offset!");

// Function POLYGON.FOVManagerComponent.SetCameraFOV
// 0x0004 (0x0004 - 0x0000)
struct FOVManagerComponent_SetCameraFOV final
{
public:
	float                                         NewCameraFOV;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOVManagerComponent_SetCameraFOV) == 0x000004, "Wrong alignment on FOVManagerComponent_SetCameraFOV");
static_assert(sizeof(FOVManagerComponent_SetCameraFOV) == 0x000004, "Wrong size on FOVManagerComponent_SetCameraFOV");
static_assert(offsetof(FOVManagerComponent_SetCameraFOV, NewCameraFOV) == 0x000000, "Member 'FOVManagerComponent_SetCameraFOV::NewCameraFOV' has a wrong offset!");

// Function POLYGON.FOVManagerComponent.SetDefaultCameraFOV
// 0x0004 (0x0004 - 0x0000)
struct FOVManagerComponent_SetDefaultCameraFOV final
{
public:
	float                                         NewDefaultCameraFOV;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOVManagerComponent_SetDefaultCameraFOV) == 0x000004, "Wrong alignment on FOVManagerComponent_SetDefaultCameraFOV");
static_assert(sizeof(FOVManagerComponent_SetDefaultCameraFOV) == 0x000004, "Wrong size on FOVManagerComponent_SetDefaultCameraFOV");
static_assert(offsetof(FOVManagerComponent_SetDefaultCameraFOV, NewDefaultCameraFOV) == 0x000000, "Member 'FOVManagerComponent_SetDefaultCameraFOV::NewDefaultCameraFOV' has a wrong offset!");

// Function POLYGON.FOVManagerComponent.SetMeshFOV
// 0x0004 (0x0004 - 0x0000)
struct FOVManagerComponent_SetMeshFOV final
{
public:
	float                                         NewMeshFOV;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOVManagerComponent_SetMeshFOV) == 0x000004, "Wrong alignment on FOVManagerComponent_SetMeshFOV");
static_assert(sizeof(FOVManagerComponent_SetMeshFOV) == 0x000004, "Wrong size on FOVManagerComponent_SetMeshFOV");
static_assert(offsetof(FOVManagerComponent_SetMeshFOV, NewMeshFOV) == 0x000000, "Member 'FOVManagerComponent_SetMeshFOV::NewMeshFOV' has a wrong offset!");

// Function POLYGON.FOVManagerInterface.SetCorrectiveFovMaterial
// 0x0001 (0x0001 - 0x0000)
struct FOVManagerInterface_SetCorrectiveFovMaterial final
{
public:
	bool                                          UseFovMaterial;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOVManagerInterface_SetCorrectiveFovMaterial) == 0x000001, "Wrong alignment on FOVManagerInterface_SetCorrectiveFovMaterial");
static_assert(sizeof(FOVManagerInterface_SetCorrectiveFovMaterial) == 0x000001, "Wrong size on FOVManagerInterface_SetCorrectiveFovMaterial");
static_assert(offsetof(FOVManagerInterface_SetCorrectiveFovMaterial, UseFovMaterial) == 0x000000, "Member 'FOVManagerInterface_SetCorrectiveFovMaterial::UseFovMaterial' has a wrong offset!");

// Function POLYGON.GunModulesInfo.FindModule
// 0x0058 (0x0058 - 0x0000)
struct GunModulesInfo_FindModule final
{
public:
	TArray<struct FGunModuleInfo>                 Array;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem_Module_General>       ModuleClass;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGunModuleInfo                         ReturnValue;                                       // 0x0018(0x0040)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunModulesInfo_FindModule) == 0x000008, "Wrong alignment on GunModulesInfo_FindModule");
static_assert(sizeof(GunModulesInfo_FindModule) == 0x000058, "Wrong size on GunModulesInfo_FindModule");
static_assert(offsetof(GunModulesInfo_FindModule, Array) == 0x000000, "Member 'GunModulesInfo_FindModule::Array' has a wrong offset!");
static_assert(offsetof(GunModulesInfo_FindModule, ModuleClass) == 0x000010, "Member 'GunModulesInfo_FindModule::ModuleClass' has a wrong offset!");
static_assert(offsetof(GunModulesInfo_FindModule, ReturnValue) == 0x000018, "Member 'GunModulesInfo_FindModule::ReturnValue' has a wrong offset!");

// Function POLYGON.HealthStatsComponent.OnRep_Health
// 0x0001 (0x0001 - 0x0000)
struct HealthStatsComponent_OnRep_Health final
{
public:
	uint8                                         PreviousHealth;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthStatsComponent_OnRep_Health) == 0x000001, "Wrong alignment on HealthStatsComponent_OnRep_Health");
static_assert(sizeof(HealthStatsComponent_OnRep_Health) == 0x000001, "Wrong size on HealthStatsComponent_OnRep_Health");
static_assert(offsetof(HealthStatsComponent_OnRep_Health, PreviousHealth) == 0x000000, "Member 'HealthStatsComponent_OnRep_Health::PreviousHealth' has a wrong offset!");

// Function POLYGON.HealthStatsComponent.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthStatsComponent_GetHealth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthStatsComponent_GetHealth) == 0x000004, "Wrong alignment on HealthStatsComponent_GetHealth");
static_assert(sizeof(HealthStatsComponent_GetHealth) == 0x000004, "Wrong size on HealthStatsComponent_GetHealth");
static_assert(offsetof(HealthStatsComponent_GetHealth, ReturnValue) == 0x000000, "Member 'HealthStatsComponent_GetHealth::ReturnValue' has a wrong offset!");

// Function POLYGON.HealthStatsComponent.GetHealthProtection
// 0x0001 (0x0001 - 0x0000)
struct HealthStatsComponent_GetHealthProtection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthStatsComponent_GetHealthProtection) == 0x000001, "Wrong alignment on HealthStatsComponent_GetHealthProtection");
static_assert(sizeof(HealthStatsComponent_GetHealthProtection) == 0x000001, "Wrong size on HealthStatsComponent_GetHealthProtection");
static_assert(offsetof(HealthStatsComponent_GetHealthProtection, ReturnValue) == 0x000000, "Member 'HealthStatsComponent_GetHealthProtection::ReturnValue' has a wrong offset!");

// Function POLYGON.HealthStatsComponent.GetStamina
// 0x0004 (0x0004 - 0x0000)
struct HealthStatsComponent_GetStamina final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthStatsComponent_GetStamina) == 0x000004, "Wrong alignment on HealthStatsComponent_GetStamina");
static_assert(sizeof(HealthStatsComponent_GetStamina) == 0x000004, "Wrong size on HealthStatsComponent_GetStamina");
static_assert(offsetof(HealthStatsComponent_GetStamina, ReturnValue) == 0x000000, "Member 'HealthStatsComponent_GetStamina::ReturnValue' has a wrong offset!");

// Function POLYGON.InspectManagerComponent.SetPivotOffset
// 0x0010 (0x0010 - 0x0000)
struct InspectManagerComponent_SetPivotOffset final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InspectManagerComponent_SetPivotOffset) == 0x000008, "Wrong alignment on InspectManagerComponent_SetPivotOffset");
static_assert(sizeof(InspectManagerComponent_SetPivotOffset) == 0x000010, "Wrong size on InspectManagerComponent_SetPivotOffset");
static_assert(offsetof(InspectManagerComponent_SetPivotOffset, Offset) == 0x000000, "Member 'InspectManagerComponent_SetPivotOffset::Offset' has a wrong offset!");

// Function POLYGON.InteractInterface.SetPlayerLooks
// 0x0010 (0x0010 - 0x0000)
struct InteractInterface_SetPlayerLooks final
{
public:
	class APG_Game_Character*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooks;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C33[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractInterface_SetPlayerLooks) == 0x000008, "Wrong alignment on InteractInterface_SetPlayerLooks");
static_assert(sizeof(InteractInterface_SetPlayerLooks) == 0x000010, "Wrong size on InteractInterface_SetPlayerLooks");
static_assert(offsetof(InteractInterface_SetPlayerLooks, Character) == 0x000000, "Member 'InteractInterface_SetPlayerLooks::Character' has a wrong offset!");
static_assert(offsetof(InteractInterface_SetPlayerLooks, bIsLooks) == 0x000008, "Member 'InteractInterface_SetPlayerLooks::bIsLooks' has a wrong offset!");

// Function POLYGON.InteractInterface.StartInteract
// 0x0008 (0x0008 - 0x0000)
struct InteractInterface_StartInteract final
{
public:
	class APG_Game_Character*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractInterface_StartInteract) == 0x000008, "Wrong alignment on InteractInterface_StartInteract");
static_assert(sizeof(InteractInterface_StartInteract) == 0x000008, "Wrong size on InteractInterface_StartInteract");
static_assert(offsetof(InteractInterface_StartInteract, Character) == 0x000000, "Member 'InteractInterface_StartInteract::Character' has a wrong offset!");

// Function POLYGON.InteractInterface.StopInteract
// 0x0008 (0x0008 - 0x0000)
struct InteractInterface_StopInteract final
{
public:
	class APG_Game_Character*                     Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractInterface_StopInteract) == 0x000008, "Wrong alignment on InteractInterface_StopInteract");
static_assert(sizeof(InteractInterface_StopInteract) == 0x000008, "Wrong size on InteractInterface_StopInteract");
static_assert(offsetof(InteractInterface_StopInteract, Character) == 0x000000, "Member 'InteractInterface_StopInteract::Character' has a wrong offset!");

// Function POLYGON.InventoryComponent_Base.GetGunBySlot
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_Base_GetGunBySlot final
{
public:
	EGunSlot                                      GunSlot;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C34[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AItem_Gun_General*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_Base_GetGunBySlot) == 0x000008, "Wrong alignment on InventoryComponent_Base_GetGunBySlot");
static_assert(sizeof(InventoryComponent_Base_GetGunBySlot) == 0x000010, "Wrong size on InventoryComponent_Base_GetGunBySlot");
static_assert(offsetof(InventoryComponent_Base_GetGunBySlot, GunSlot) == 0x000000, "Member 'InventoryComponent_Base_GetGunBySlot::GunSlot' has a wrong offset!");
static_assert(offsetof(InventoryComponent_Base_GetGunBySlot, ReturnValue) == 0x000008, "Member 'InventoryComponent_Base_GetGunBySlot::ReturnValue' has a wrong offset!");

// Function POLYGON.InventoryComponent_Base.OnRep_PrimaryGun
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_Base_OnRep_PrimaryGun final
{
public:
	class AItem_Gun_General*                      OldGun;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_Base_OnRep_PrimaryGun) == 0x000008, "Wrong alignment on InventoryComponent_Base_OnRep_PrimaryGun");
static_assert(sizeof(InventoryComponent_Base_OnRep_PrimaryGun) == 0x000008, "Wrong size on InventoryComponent_Base_OnRep_PrimaryGun");
static_assert(offsetof(InventoryComponent_Base_OnRep_PrimaryGun, OldGun) == 0x000000, "Member 'InventoryComponent_Base_OnRep_PrimaryGun::OldGun' has a wrong offset!");

// Function POLYGON.InventoryComponent_Base.OnRep_SecondaryGun
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_Base_OnRep_SecondaryGun final
{
public:
	class AItem_Gun_General*                      OldGun;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_Base_OnRep_SecondaryGun) == 0x000008, "Wrong alignment on InventoryComponent_Base_OnRep_SecondaryGun");
static_assert(sizeof(InventoryComponent_Base_OnRep_SecondaryGun) == 0x000008, "Wrong size on InventoryComponent_Base_OnRep_SecondaryGun");
static_assert(offsetof(InventoryComponent_Base_OnRep_SecondaryGun, OldGun) == 0x000000, "Member 'InventoryComponent_Base_OnRep_SecondaryGun::OldGun' has a wrong offset!");

// Function POLYGON.InventoryComponent_Base.UpdatePlayerCombinedInfo
// 0x0020 (0x0020 - 0x0000)
struct InventoryComponent_Base_UpdatePlayerCombinedInfo final
{
public:
	TArray<EModifiedData>                         ModifiedData;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 CustomDelegateString;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_Base_UpdatePlayerCombinedInfo) == 0x000008, "Wrong alignment on InventoryComponent_Base_UpdatePlayerCombinedInfo");
static_assert(sizeof(InventoryComponent_Base_UpdatePlayerCombinedInfo) == 0x000020, "Wrong size on InventoryComponent_Base_UpdatePlayerCombinedInfo");
static_assert(offsetof(InventoryComponent_Base_UpdatePlayerCombinedInfo, ModifiedData) == 0x000000, "Member 'InventoryComponent_Base_UpdatePlayerCombinedInfo::ModifiedData' has a wrong offset!");
static_assert(offsetof(InventoryComponent_Base_UpdatePlayerCombinedInfo, CustomDelegateString) == 0x000010, "Member 'InventoryComponent_Base_UpdatePlayerCombinedInfo::CustomDelegateString' has a wrong offset!");

// Function POLYGON.InventoryComponent_Game.AddGrenate_server
// 0x0001 (0x0001 - 0x0000)
struct InventoryComponent_Game_AddGrenate_server final
{
public:
	uint8                                         Number;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_Game_AddGrenate_server) == 0x000001, "Wrong alignment on InventoryComponent_Game_AddGrenate_server");
static_assert(sizeof(InventoryComponent_Game_AddGrenate_server) == 0x000001, "Wrong size on InventoryComponent_Game_AddGrenate_server");
static_assert(offsetof(InventoryComponent_Game_AddGrenate_server, Number) == 0x000000, "Member 'InventoryComponent_Game_AddGrenate_server::Number' has a wrong offset!");

// Function POLYGON.InventoryComponent_Game.EquipItems
// 0x0028 (0x0028 - 0x0000)
struct InventoryComponent_Game_EquipItems final
{
public:
	TArray<class FString>                         ItemsInstanceId;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          CallUpdate;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C36[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_Game_EquipItems) == 0x000008, "Wrong alignment on InventoryComponent_Game_EquipItems");
static_assert(sizeof(InventoryComponent_Game_EquipItems) == 0x000028, "Wrong size on InventoryComponent_Game_EquipItems");
static_assert(offsetof(InventoryComponent_Game_EquipItems, ItemsInstanceId) == 0x000000, "Member 'InventoryComponent_Game_EquipItems::ItemsInstanceId' has a wrong offset!");
static_assert(offsetof(InventoryComponent_Game_EquipItems, CallUpdate) == 0x000010, "Member 'InventoryComponent_Game_EquipItems::CallUpdate' has a wrong offset!");
static_assert(offsetof(InventoryComponent_Game_EquipItems, ReturnValue) == 0x000018, "Member 'InventoryComponent_Game_EquipItems::ReturnValue' has a wrong offset!");

// Function POLYGON.InventoryComponent_Game.OnRep_CurrentGun
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_Game_OnRep_CurrentGun final
{
public:
	class AItem_Gun_General*                      PreviousGun;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_Game_OnRep_CurrentGun) == 0x000008, "Wrong alignment on InventoryComponent_Game_OnRep_CurrentGun");
static_assert(sizeof(InventoryComponent_Game_OnRep_CurrentGun) == 0x000008, "Wrong size on InventoryComponent_Game_OnRep_CurrentGun");
static_assert(offsetof(InventoryComponent_Game_OnRep_CurrentGun, PreviousGun) == 0x000000, "Member 'InventoryComponent_Game_OnRep_CurrentGun::PreviousGun' has a wrong offset!");

// Function POLYGON.InventoryComponent_Game.RequestEquipItems_server
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_Game_RequestEquipItems_server final
{
public:
	TArray<class FString>                         ItemsInstanceId;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_Game_RequestEquipItems_server) == 0x000008, "Wrong alignment on InventoryComponent_Game_RequestEquipItems_server");
static_assert(sizeof(InventoryComponent_Game_RequestEquipItems_server) == 0x000010, "Wrong size on InventoryComponent_Game_RequestEquipItems_server");
static_assert(offsetof(InventoryComponent_Game_RequestEquipItems_server, ItemsInstanceId) == 0x000000, "Member 'InventoryComponent_Game_RequestEquipItems_server::ItemsInstanceId' has a wrong offset!");

// Function POLYGON.InventoryComponent_Game.RequestSetGunModules_server
// 0x0020 (0x0020 - 0x0000)
struct InventoryComponent_Game_RequestSetGunModules_server final
{
public:
	class AItem_Gun_General*                      GunRef;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModuleId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGunModuleType                                ModuleType;                                        // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C37[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_Game_RequestSetGunModules_server) == 0x000008, "Wrong alignment on InventoryComponent_Game_RequestSetGunModules_server");
static_assert(sizeof(InventoryComponent_Game_RequestSetGunModules_server) == 0x000020, "Wrong size on InventoryComponent_Game_RequestSetGunModules_server");
static_assert(offsetof(InventoryComponent_Game_RequestSetGunModules_server, GunRef) == 0x000000, "Member 'InventoryComponent_Game_RequestSetGunModules_server::GunRef' has a wrong offset!");
static_assert(offsetof(InventoryComponent_Game_RequestSetGunModules_server, ModuleId) == 0x000008, "Member 'InventoryComponent_Game_RequestSetGunModules_server::ModuleId' has a wrong offset!");
static_assert(offsetof(InventoryComponent_Game_RequestSetGunModules_server, ModuleType) == 0x000018, "Member 'InventoryComponent_Game_RequestSetGunModules_server::ModuleType' has a wrong offset!");

// Function POLYGON.Item_Grenade_General.NotifyThrow_server
// 0x0030 (0x0030 - 0x0000)
struct Item_Grenade_General_NotifyThrow_server final
{
public:
	struct FVector_NetQuantize                    StartPosition;                                     // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    Impulse;                                           // 0x0018(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Grenade_General_NotifyThrow_server) == 0x000008, "Wrong alignment on Item_Grenade_General_NotifyThrow_server");
static_assert(sizeof(Item_Grenade_General_NotifyThrow_server) == 0x000030, "Wrong size on Item_Grenade_General_NotifyThrow_server");
static_assert(offsetof(Item_Grenade_General_NotifyThrow_server, StartPosition) == 0x000000, "Member 'Item_Grenade_General_NotifyThrow_server::StartPosition' has a wrong offset!");
static_assert(offsetof(Item_Grenade_General_NotifyThrow_server, Impulse) == 0x000018, "Member 'Item_Grenade_General_NotifyThrow_server::Impulse' has a wrong offset!");

// Function POLYGON.Item_Grenade_General.OnMeshHit
// 0x0118 (0x0118 - 0x0000)
struct Item_Grenade_General_OnMeshHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Grenade_General_OnMeshHit) == 0x000008, "Wrong alignment on Item_Grenade_General_OnMeshHit");
static_assert(sizeof(Item_Grenade_General_OnMeshHit) == 0x000118, "Wrong size on Item_Grenade_General_OnMeshHit");
static_assert(offsetof(Item_Grenade_General_OnMeshHit, HitComponent) == 0x000000, "Member 'Item_Grenade_General_OnMeshHit::HitComponent' has a wrong offset!");
static_assert(offsetof(Item_Grenade_General_OnMeshHit, OtherActor) == 0x000008, "Member 'Item_Grenade_General_OnMeshHit::OtherActor' has a wrong offset!");
static_assert(offsetof(Item_Grenade_General_OnMeshHit, OtherComp) == 0x000010, "Member 'Item_Grenade_General_OnMeshHit::OtherComp' has a wrong offset!");
static_assert(offsetof(Item_Grenade_General_OnMeshHit, NormalImpulse) == 0x000018, "Member 'Item_Grenade_General_OnMeshHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Item_Grenade_General_OnMeshHit, Hit) == 0x000030, "Member 'Item_Grenade_General_OnMeshHit::Hit' has a wrong offset!");

// Function POLYGON.Item_Gun_General.AddStockAmmo_server
// 0x0001 (0x0001 - 0x0000)
struct Item_Gun_General_AddStockAmmo_server final
{
public:
	int8                                          AddAmmo;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_AddStockAmmo_server) == 0x000001, "Wrong alignment on Item_Gun_General_AddStockAmmo_server");
static_assert(sizeof(Item_Gun_General_AddStockAmmo_server) == 0x000001, "Wrong size on Item_Gun_General_AddStockAmmo_server");
static_assert(offsetof(Item_Gun_General_AddStockAmmo_server, AddAmmo) == 0x000000, "Member 'Item_Gun_General_AddStockAmmo_server::AddAmmo' has a wrong offset!");

// Function POLYGON.Item_Gun_General.GetForwardShot
// 0x0018 (0x0018 - 0x0000)
struct Item_Gun_General_GetForwardShot final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_GetForwardShot) == 0x000008, "Wrong alignment on Item_Gun_General_GetForwardShot");
static_assert(sizeof(Item_Gun_General_GetForwardShot) == 0x000018, "Wrong size on Item_Gun_General_GetForwardShot");
static_assert(offsetof(Item_Gun_General_GetForwardShot, ReturnValue) == 0x000000, "Member 'Item_Gun_General_GetForwardShot::ReturnValue' has a wrong offset!");

// Function POLYGON.Item_Gun_General.NotifyGrantedModulesDataContainer_client
// 0x0010 (0x0010 - 0x0000)
struct Item_Gun_General_NotifyGrantedModulesDataContainer_client final
{
public:
	class FString                                 ItemInstanceId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_NotifyGrantedModulesDataContainer_client) == 0x000008, "Wrong alignment on Item_Gun_General_NotifyGrantedModulesDataContainer_client");
static_assert(sizeof(Item_Gun_General_NotifyGrantedModulesDataContainer_client) == 0x000010, "Wrong size on Item_Gun_General_NotifyGrantedModulesDataContainer_client");
static_assert(offsetof(Item_Gun_General_NotifyGrantedModulesDataContainer_client, ItemInstanceId) == 0x000000, "Member 'Item_Gun_General_NotifyGrantedModulesDataContainer_client::ItemInstanceId' has a wrong offset!");

// Function POLYGON.Item_Gun_General.NotifyGrantedProgressDataContainer_client
// 0x0010 (0x0010 - 0x0000)
struct Item_Gun_General_NotifyGrantedProgressDataContainer_client final
{
public:
	class FString                                 ItemInstanceId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_NotifyGrantedProgressDataContainer_client) == 0x000008, "Wrong alignment on Item_Gun_General_NotifyGrantedProgressDataContainer_client");
static_assert(sizeof(Item_Gun_General_NotifyGrantedProgressDataContainer_client) == 0x000010, "Wrong size on Item_Gun_General_NotifyGrantedProgressDataContainer_client");
static_assert(offsetof(Item_Gun_General_NotifyGrantedProgressDataContainer_client, ItemInstanceId) == 0x000000, "Member 'Item_Gun_General_NotifyGrantedProgressDataContainer_client::ItemInstanceId' has a wrong offset!");

// Function POLYGON.Item_Gun_General.NotifyServerHit
// 0x0028 (0x0028 - 0x0000)
struct Item_Gun_General_NotifyServerHit final
{
public:
	struct FGunHitOnCharacter                     HitOnCharacter;                                    // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_NotifyServerHit) == 0x000008, "Wrong alignment on Item_Gun_General_NotifyServerHit");
static_assert(sizeof(Item_Gun_General_NotifyServerHit) == 0x000028, "Wrong size on Item_Gun_General_NotifyServerHit");
static_assert(offsetof(Item_Gun_General_NotifyServerHit, HitOnCharacter) == 0x000000, "Member 'Item_Gun_General_NotifyServerHit::HitOnCharacter' has a wrong offset!");

// Function POLYGON.Item_Gun_General.NotifyServerHitWithEnergy
// 0x0030 (0x0030 - 0x0000)
struct Item_Gun_General_NotifyServerHitWithEnergy final
{
public:
	struct FGunHitOnCharacter                     HitOnCharacter;                                    // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Energy;                                            // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C47[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Item_Gun_General_NotifyServerHitWithEnergy) == 0x000008, "Wrong alignment on Item_Gun_General_NotifyServerHitWithEnergy");
static_assert(sizeof(Item_Gun_General_NotifyServerHitWithEnergy) == 0x000030, "Wrong size on Item_Gun_General_NotifyServerHitWithEnergy");
static_assert(offsetof(Item_Gun_General_NotifyServerHitWithEnergy, HitOnCharacter) == 0x000000, "Member 'Item_Gun_General_NotifyServerHitWithEnergy::HitOnCharacter' has a wrong offset!");
static_assert(offsetof(Item_Gun_General_NotifyServerHitWithEnergy, Energy) == 0x000028, "Member 'Item_Gun_General_NotifyServerHitWithEnergy::Energy' has a wrong offset!");

// Function POLYGON.Item_Gun_General.NotifyServerOfShot
// 0x0020 (0x0020 - 0x0000)
struct Item_Gun_General_NotifyServerOfShot final
{
public:
	struct FGunShot                               Param_GunShot;                                     // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_NotifyServerOfShot) == 0x000008, "Wrong alignment on Item_Gun_General_NotifyServerOfShot");
static_assert(sizeof(Item_Gun_General_NotifyServerOfShot) == 0x000020, "Wrong size on Item_Gun_General_NotifyServerOfShot");
static_assert(offsetof(Item_Gun_General_NotifyServerOfShot, Param_GunShot) == 0x000000, "Member 'Item_Gun_General_NotifyServerOfShot::Param_GunShot' has a wrong offset!");

// Function POLYGON.Item_Gun_General.NotifyServerTraceHit
// 0x0028 (0x0028 - 0x0000)
struct Item_Gun_General_NotifyServerTraceHit final
{
public:
	struct FGunHitOnCharacter                     HitOnCharacter;                                    // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_NotifyServerTraceHit) == 0x000008, "Wrong alignment on Item_Gun_General_NotifyServerTraceHit");
static_assert(sizeof(Item_Gun_General_NotifyServerTraceHit) == 0x000028, "Wrong size on Item_Gun_General_NotifyServerTraceHit");
static_assert(offsetof(Item_Gun_General_NotifyServerTraceHit, HitOnCharacter) == 0x000000, "Member 'Item_Gun_General_NotifyServerTraceHit::HitOnCharacter' has a wrong offset!");

// Function POLYGON.Item_Gun_General.OnRep_CallHardReset
// 0x0001 (0x0001 - 0x0000)
struct Item_Gun_General_OnRep_CallHardReset final
{
public:
	uint8                                         PreviousValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_OnRep_CallHardReset) == 0x000001, "Wrong alignment on Item_Gun_General_OnRep_CallHardReset");
static_assert(sizeof(Item_Gun_General_OnRep_CallHardReset) == 0x000001, "Wrong size on Item_Gun_General_OnRep_CallHardReset");
static_assert(offsetof(Item_Gun_General_OnRep_CallHardReset, PreviousValue) == 0x000000, "Member 'Item_Gun_General_OnRep_CallHardReset::PreviousValue' has a wrong offset!");

// Function POLYGON.Item_Gun_General.OnRep_GunHitOfShortShot
// 0x0018 (0x0018 - 0x0000)
struct Item_Gun_General_OnRep_GunHitOfShortShot final
{
public:
	struct FVector_NetQuantize                    PreviousValue;                                     // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_OnRep_GunHitOfShortShot) == 0x000008, "Wrong alignment on Item_Gun_General_OnRep_GunHitOfShortShot");
static_assert(sizeof(Item_Gun_General_OnRep_GunHitOfShortShot) == 0x000018, "Wrong size on Item_Gun_General_OnRep_GunHitOfShortShot");
static_assert(offsetof(Item_Gun_General_OnRep_GunHitOfShortShot, PreviousValue) == 0x000000, "Member 'Item_Gun_General_OnRep_GunHitOfShortShot::PreviousValue' has a wrong offset!");

// Function POLYGON.Item_Gun_General.OnRep_GunShot
// 0x0020 (0x0020 - 0x0000)
struct Item_Gun_General_OnRep_GunShot final
{
public:
	struct FGunShot                               PreviousShot;                                      // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_OnRep_GunShot) == 0x000008, "Wrong alignment on Item_Gun_General_OnRep_GunShot");
static_assert(sizeof(Item_Gun_General_OnRep_GunShot) == 0x000020, "Wrong size on Item_Gun_General_OnRep_GunShot");
static_assert(offsetof(Item_Gun_General_OnRep_GunShot, PreviousShot) == 0x000000, "Member 'Item_Gun_General_OnRep_GunShot::PreviousShot' has a wrong offset!");

// Function POLYGON.Item_Gun_General.OnRep_ReloadCaller
// 0x0001 (0x0001 - 0x0000)
struct Item_Gun_General_OnRep_ReloadCaller final
{
public:
	uint8                                         PreviousValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_OnRep_ReloadCaller) == 0x000001, "Wrong alignment on Item_Gun_General_OnRep_ReloadCaller");
static_assert(sizeof(Item_Gun_General_OnRep_ReloadCaller) == 0x000001, "Wrong size on Item_Gun_General_OnRep_ReloadCaller");
static_assert(offsetof(Item_Gun_General_OnRep_ReloadCaller, PreviousValue) == 0x000000, "Member 'Item_Gun_General_OnRep_ReloadCaller::PreviousValue' has a wrong offset!");

// Function POLYGON.Item_Gun_General.RequestReload_server
// 0x0001 (0x0001 - 0x0000)
struct Item_Gun_General_RequestReload_server final
{
public:
	uint8                                         CurrentNumberAmmo;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_RequestReload_server) == 0x000001, "Wrong alignment on Item_Gun_General_RequestReload_server");
static_assert(sizeof(Item_Gun_General_RequestReload_server) == 0x000001, "Wrong size on Item_Gun_General_RequestReload_server");
static_assert(offsetof(Item_Gun_General_RequestReload_server, CurrentNumberAmmo) == 0x000000, "Member 'Item_Gun_General_RequestReload_server::CurrentNumberAmmo' has a wrong offset!");

// Function POLYGON.Item_Gun_General.SetGunModules
// 0x0008 (0x0008 - 0x0000)
struct Item_Gun_General_SetGunModules final
{
public:
	class UPlayFabJsonObject*                     Modules;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_SetGunModules) == 0x000008, "Wrong alignment on Item_Gun_General_SetGunModules");
static_assert(sizeof(Item_Gun_General_SetGunModules) == 0x000008, "Wrong size on Item_Gun_General_SetGunModules");
static_assert(offsetof(Item_Gun_General_SetGunModules, Modules) == 0x000000, "Member 'Item_Gun_General_SetGunModules::Modules' has a wrong offset!");

// Function POLYGON.Item_Gun_General.UpdateAmmoCount_server
// 0x0001 (0x0001 - 0x0000)
struct Item_Gun_General_UpdateAmmoCount_server final
{
public:
	uint8                                         CurrentNumberAmmo;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_UpdateAmmoCount_server) == 0x000001, "Wrong alignment on Item_Gun_General_UpdateAmmoCount_server");
static_assert(sizeof(Item_Gun_General_UpdateAmmoCount_server) == 0x000001, "Wrong size on Item_Gun_General_UpdateAmmoCount_server");
static_assert(offsetof(Item_Gun_General_UpdateAmmoCount_server, CurrentNumberAmmo) == 0x000000, "Member 'Item_Gun_General_UpdateAmmoCount_server::CurrentNumberAmmo' has a wrong offset!");

// Function POLYGON.Item_Gun_General.UpdatePlayerCombinedInfo
// 0x0020 (0x0020 - 0x0000)
struct Item_Gun_General_UpdatePlayerCombinedInfo final
{
public:
	TArray<EModifiedData>                         ModifiedData;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 CustomDelegateString;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_UpdatePlayerCombinedInfo) == 0x000008, "Wrong alignment on Item_Gun_General_UpdatePlayerCombinedInfo");
static_assert(sizeof(Item_Gun_General_UpdatePlayerCombinedInfo) == 0x000020, "Wrong size on Item_Gun_General_UpdatePlayerCombinedInfo");
static_assert(offsetof(Item_Gun_General_UpdatePlayerCombinedInfo, ModifiedData) == 0x000000, "Member 'Item_Gun_General_UpdatePlayerCombinedInfo::ModifiedData' has a wrong offset!");
static_assert(offsetof(Item_Gun_General_UpdatePlayerCombinedInfo, CustomDelegateString) == 0x000010, "Member 'Item_Gun_General_UpdatePlayerCombinedInfo::CustomDelegateString' has a wrong offset!");

// Function POLYGON.Item_Gun_General.GetCurrentStockAmmo
// 0x0004 (0x0004 - 0x0000)
struct Item_Gun_General_GetCurrentStockAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_GetCurrentStockAmmo) == 0x000004, "Wrong alignment on Item_Gun_General_GetCurrentStockAmmo");
static_assert(sizeof(Item_Gun_General_GetCurrentStockAmmo) == 0x000004, "Wrong size on Item_Gun_General_GetCurrentStockAmmo");
static_assert(offsetof(Item_Gun_General_GetCurrentStockAmmo, ReturnValue) == 0x000000, "Member 'Item_Gun_General_GetCurrentStockAmmo::ReturnValue' has a wrong offset!");

// Function POLYGON.Item_Gun_General.GetItemReference
// 0x0008 (0x0008 - 0x0000)
struct Item_Gun_General_GetItemReference final
{
public:
	class UPlayFabJsonObject*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Gun_General_GetItemReference) == 0x000008, "Wrong alignment on Item_Gun_General_GetItemReference");
static_assert(sizeof(Item_Gun_General_GetItemReference) == 0x000008, "Wrong size on Item_Gun_General_GetItemReference");
static_assert(offsetof(Item_Gun_General_GetItemReference, ReturnValue) == 0x000000, "Member 'Item_Gun_General_GetItemReference::ReturnValue' has a wrong offset!");

// Function POLYGON.Item_Module_Flashlight.OnChangeEnableState
// 0x0001 (0x0001 - 0x0000)
struct Item_Module_Flashlight_OnChangeEnableState final
{
public:
	bool                                          bPlaySound;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Module_Flashlight_OnChangeEnableState) == 0x000001, "Wrong alignment on Item_Module_Flashlight_OnChangeEnableState");
static_assert(sizeof(Item_Module_Flashlight_OnChangeEnableState) == 0x000001, "Wrong size on Item_Module_Flashlight_OnChangeEnableState");
static_assert(offsetof(Item_Module_Flashlight_OnChangeEnableState, bPlaySound) == 0x000000, "Member 'Item_Module_Flashlight_OnChangeEnableState::bPlaySound' has a wrong offset!");

// Function POLYGON.Item_Module_Flashlight.OnRep_IsEnable
// 0x0001 (0x0001 - 0x0000)
struct Item_Module_Flashlight_OnRep_IsEnable final
{
public:
	bool                                          OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Module_Flashlight_OnRep_IsEnable) == 0x000001, "Wrong alignment on Item_Module_Flashlight_OnRep_IsEnable");
static_assert(sizeof(Item_Module_Flashlight_OnRep_IsEnable) == 0x000001, "Wrong size on Item_Module_Flashlight_OnRep_IsEnable");
static_assert(offsetof(Item_Module_Flashlight_OnRep_IsEnable, OldState) == 0x000000, "Member 'Item_Module_Flashlight_OnRep_IsEnable::OldState' has a wrong offset!");

// Function POLYGON.Item_Module_Flashlight.OnSetCurrentGun
// 0x0008 (0x0008 - 0x0000)
struct Item_Module_Flashlight_OnSetCurrentGun final
{
public:
	class AItem_Gun_General*                      PreviousGun;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Module_Flashlight_OnSetCurrentGun) == 0x000008, "Wrong alignment on Item_Module_Flashlight_OnSetCurrentGun");
static_assert(sizeof(Item_Module_Flashlight_OnSetCurrentGun) == 0x000008, "Wrong size on Item_Module_Flashlight_OnSetCurrentGun");
static_assert(offsetof(Item_Module_Flashlight_OnSetCurrentGun, PreviousGun) == 0x000000, "Member 'Item_Module_Flashlight_OnSetCurrentGun::PreviousGun' has a wrong offset!");

// Function POLYGON.Item_Module_Flashlight.SetFlashlightEnable
// 0x0002 (0x0002 - 0x0000)
struct Item_Module_Flashlight_SetFlashlightEnable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallOnServer;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Module_Flashlight_SetFlashlightEnable) == 0x000001, "Wrong alignment on Item_Module_Flashlight_SetFlashlightEnable");
static_assert(sizeof(Item_Module_Flashlight_SetFlashlightEnable) == 0x000002, "Wrong size on Item_Module_Flashlight_SetFlashlightEnable");
static_assert(offsetof(Item_Module_Flashlight_SetFlashlightEnable, IsEnable) == 0x000000, "Member 'Item_Module_Flashlight_SetFlashlightEnable::IsEnable' has a wrong offset!");
static_assert(offsetof(Item_Module_Flashlight_SetFlashlightEnable, bCallOnServer) == 0x000001, "Member 'Item_Module_Flashlight_SetFlashlightEnable::bCallOnServer' has a wrong offset!");

// Function POLYGON.Item_Module_Flashlight.SetFlashlightEnable_server
// 0x0001 (0x0001 - 0x0000)
struct Item_Module_Flashlight_SetFlashlightEnable_server final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Module_Flashlight_SetFlashlightEnable_server) == 0x000001, "Wrong alignment on Item_Module_Flashlight_SetFlashlightEnable_server");
static_assert(sizeof(Item_Module_Flashlight_SetFlashlightEnable_server) == 0x000001, "Wrong size on Item_Module_Flashlight_SetFlashlightEnable_server");
static_assert(offsetof(Item_Module_Flashlight_SetFlashlightEnable_server, IsEnable) == 0x000000, "Member 'Item_Module_Flashlight_SetFlashlightEnable_server::IsEnable' has a wrong offset!");

// Function POLYGON.Item_Module_Optic.ToggleAiming
// 0x0001 (0x0001 - 0x0000)
struct Item_Module_Optic_ToggleAiming final
{
public:
	bool                                          IsAiming;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_Module_Optic_ToggleAiming) == 0x000001, "Wrong alignment on Item_Module_Optic_ToggleAiming");
static_assert(sizeof(Item_Module_Optic_ToggleAiming) == 0x000001, "Wrong size on Item_Module_Optic_ToggleAiming");
static_assert(offsetof(Item_Module_Optic_ToggleAiming, IsAiming) == 0x000000, "Member 'Item_Module_Optic_ToggleAiming::IsAiming' has a wrong offset!");

// Function POLYGON.PG_FunctionLibraryKit.ConfigureGameAnalyticsUserId
// 0x0010 (0x0010 - 0x0000)
struct PG_FunctionLibraryKit_ConfigureGameAnalyticsUserId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_FunctionLibraryKit_ConfigureGameAnalyticsUserId) == 0x000008, "Wrong alignment on PG_FunctionLibraryKit_ConfigureGameAnalyticsUserId");
static_assert(sizeof(PG_FunctionLibraryKit_ConfigureGameAnalyticsUserId) == 0x000010, "Wrong size on PG_FunctionLibraryKit_ConfigureGameAnalyticsUserId");
static_assert(offsetof(PG_FunctionLibraryKit_ConfigureGameAnalyticsUserId, UserId) == 0x000000, "Member 'PG_FunctionLibraryKit_ConfigureGameAnalyticsUserId::UserId' has a wrong offset!");

// Function POLYGON.PG_FunctionLibraryKit.GetBuildNumber
// 0x0004 (0x0004 - 0x0000)
struct PG_FunctionLibraryKit_GetBuildNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_FunctionLibraryKit_GetBuildNumber) == 0x000004, "Wrong alignment on PG_FunctionLibraryKit_GetBuildNumber");
static_assert(sizeof(PG_FunctionLibraryKit_GetBuildNumber) == 0x000004, "Wrong size on PG_FunctionLibraryKit_GetBuildNumber");
static_assert(offsetof(PG_FunctionLibraryKit_GetBuildNumber, ReturnValue) == 0x000000, "Member 'PG_FunctionLibraryKit_GetBuildNumber::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_FunctionLibraryKit.GetProjectVersion
// 0x0010 (0x0010 - 0x0000)
struct PG_FunctionLibraryKit_GetProjectVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_FunctionLibraryKit_GetProjectVersion) == 0x000008, "Wrong alignment on PG_FunctionLibraryKit_GetProjectVersion");
static_assert(sizeof(PG_FunctionLibraryKit_GetProjectVersion) == 0x000010, "Wrong size on PG_FunctionLibraryKit_GetProjectVersion");
static_assert(offsetof(PG_FunctionLibraryKit_GetProjectVersion, ReturnValue) == 0x000000, "Member 'PG_FunctionLibraryKit_GetProjectVersion::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_FunctionLibraryKit.GetRateScale
// 0x0010 (0x0010 - 0x0000)
struct PG_FunctionLibraryKit_GetRateScale final
{
public:
	const class UAnimSequenceBase*                AnimationSequenceBase;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C53[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_FunctionLibraryKit_GetRateScale) == 0x000008, "Wrong alignment on PG_FunctionLibraryKit_GetRateScale");
static_assert(sizeof(PG_FunctionLibraryKit_GetRateScale) == 0x000010, "Wrong size on PG_FunctionLibraryKit_GetRateScale");
static_assert(offsetof(PG_FunctionLibraryKit_GetRateScale, AnimationSequenceBase) == 0x000000, "Member 'PG_FunctionLibraryKit_GetRateScale::AnimationSequenceBase' has a wrong offset!");
static_assert(offsetof(PG_FunctionLibraryKit_GetRateScale, ReturnValue) == 0x000008, "Member 'PG_FunctionLibraryKit_GetRateScale::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_FunctionLibraryKit.GetRegionEnum
// 0x0018 (0x0018 - 0x0000)
struct PG_FunctionLibraryKit_GetRegionEnum final
{
public:
	class FString                                 RegionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzureRegion                                  ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C54[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_FunctionLibraryKit_GetRegionEnum) == 0x000008, "Wrong alignment on PG_FunctionLibraryKit_GetRegionEnum");
static_assert(sizeof(PG_FunctionLibraryKit_GetRegionEnum) == 0x000018, "Wrong size on PG_FunctionLibraryKit_GetRegionEnum");
static_assert(offsetof(PG_FunctionLibraryKit_GetRegionEnum, RegionName) == 0x000000, "Member 'PG_FunctionLibraryKit_GetRegionEnum::RegionName' has a wrong offset!");
static_assert(offsetof(PG_FunctionLibraryKit_GetRegionEnum, ReturnValue) == 0x000010, "Member 'PG_FunctionLibraryKit_GetRegionEnum::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_FunctionLibraryKit.ParseOption
// 0x0040 (0x0040 - 0x0000)
struct PG_FunctionLibraryKit_ParseOption final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Separator;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_FunctionLibraryKit_ParseOption) == 0x000008, "Wrong alignment on PG_FunctionLibraryKit_ParseOption");
static_assert(sizeof(PG_FunctionLibraryKit_ParseOption) == 0x000040, "Wrong size on PG_FunctionLibraryKit_ParseOption");
static_assert(offsetof(PG_FunctionLibraryKit_ParseOption, Options) == 0x000000, "Member 'PG_FunctionLibraryKit_ParseOption::Options' has a wrong offset!");
static_assert(offsetof(PG_FunctionLibraryKit_ParseOption, Key) == 0x000010, "Member 'PG_FunctionLibraryKit_ParseOption::Key' has a wrong offset!");
static_assert(offsetof(PG_FunctionLibraryKit_ParseOption, Separator) == 0x000020, "Member 'PG_FunctionLibraryKit_ParseOption::Separator' has a wrong offset!");
static_assert(offsetof(PG_FunctionLibraryKit_ParseOption, ReturnValue) == 0x000030, "Member 'PG_FunctionLibraryKit_ParseOption::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_GameInstance.GetClientGameInstance
// 0x0008 (0x0008 - 0x0000)
struct PG_GameInstance_GetClientGameInstance final
{
public:
	class UClientGameInstance*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_GameInstance_GetClientGameInstance) == 0x000008, "Wrong alignment on PG_GameInstance_GetClientGameInstance");
static_assert(sizeof(PG_GameInstance_GetClientGameInstance) == 0x000008, "Wrong size on PG_GameInstance_GetClientGameInstance");
static_assert(offsetof(PG_GameInstance_GetClientGameInstance, ReturnValue) == 0x000000, "Member 'PG_GameInstance_GetClientGameInstance::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_GameInstance.GetServerGameInstance
// 0x0008 (0x0008 - 0x0000)
struct PG_GameInstance_GetServerGameInstance final
{
public:
	class UServerGameInstance*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_GameInstance_GetServerGameInstance) == 0x000008, "Wrong alignment on PG_GameInstance_GetServerGameInstance");
static_assert(sizeof(PG_GameInstance_GetServerGameInstance) == 0x000008, "Wrong size on PG_GameInstance_GetServerGameInstance");
static_assert(offsetof(PG_GameInstance_GetServerGameInstance, ReturnValue) == 0x000000, "Member 'PG_GameInstance_GetServerGameInstance::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_GameMode_Game.LoginPlayer
// 0x0018 (0x0018 - 0x0000)
struct PG_GameMode_Game_LoginPlayer final
{
public:
	class APG_PlayerController_Game*              PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerMasterId;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_GameMode_Game_LoginPlayer) == 0x000008, "Wrong alignment on PG_GameMode_Game_LoginPlayer");
static_assert(sizeof(PG_GameMode_Game_LoginPlayer) == 0x000018, "Wrong size on PG_GameMode_Game_LoginPlayer");
static_assert(offsetof(PG_GameMode_Game_LoginPlayer, PlayerController) == 0x000000, "Member 'PG_GameMode_Game_LoginPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(PG_GameMode_Game_LoginPlayer, PlayerMasterId) == 0x000008, "Member 'PG_GameMode_Game_LoginPlayer::PlayerMasterId' has a wrong offset!");

// Function POLYGON.PG_GameState_Game.NotifyPlayerWasKicked
// 0x0018 (0x0018 - 0x0000)
struct PG_GameState_Game_NotifyPlayerWasKicked final
{
public:
	class FString                                 badGuyName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNameWasOptimized;                                 // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C5B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_GameState_Game_NotifyPlayerWasKicked) == 0x000008, "Wrong alignment on PG_GameState_Game_NotifyPlayerWasKicked");
static_assert(sizeof(PG_GameState_Game_NotifyPlayerWasKicked) == 0x000018, "Wrong size on PG_GameState_Game_NotifyPlayerWasKicked");
static_assert(offsetof(PG_GameState_Game_NotifyPlayerWasKicked, badGuyName) == 0x000000, "Member 'PG_GameState_Game_NotifyPlayerWasKicked::badGuyName' has a wrong offset!");
static_assert(offsetof(PG_GameState_Game_NotifyPlayerWasKicked, bNameWasOptimized) == 0x000010, "Member 'PG_GameState_Game_NotifyPlayerWasKicked::bNameWasOptimized' has a wrong offset!");

// Function POLYGON.PG_GameState_Game.SetCanMovePlayers
// 0x0001 (0x0001 - 0x0000)
struct PG_GameState_Game_SetCanMovePlayers final
{
public:
	bool                                          NewMoveState;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_GameState_Game_SetCanMovePlayers) == 0x000001, "Wrong alignment on PG_GameState_Game_SetCanMovePlayers");
static_assert(sizeof(PG_GameState_Game_SetCanMovePlayers) == 0x000001, "Wrong size on PG_GameState_Game_SetCanMovePlayers");
static_assert(offsetof(PG_GameState_Game_SetCanMovePlayers, NewMoveState) == 0x000000, "Member 'PG_GameState_Game_SetCanMovePlayers::NewMoveState' has a wrong offset!");

// Function POLYGON.PG_GameState_Game.GetGameTimer
// 0x0004 (0x0004 - 0x0000)
struct PG_GameState_Game_GetGameTimer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_GameState_Game_GetGameTimer) == 0x000004, "Wrong alignment on PG_GameState_Game_GetGameTimer");
static_assert(sizeof(PG_GameState_Game_GetGameTimer) == 0x000004, "Wrong size on PG_GameState_Game_GetGameTimer");
static_assert(offsetof(PG_GameState_Game_GetGameTimer, ReturnValue) == 0x000000, "Member 'PG_GameState_Game_GetGameTimer::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_GameState_Game.GetMaxScoreForWin
// 0x0004 (0x0004 - 0x0000)
struct PG_GameState_Game_GetMaxScoreForWin final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_GameState_Game_GetMaxScoreForWin) == 0x000004, "Wrong alignment on PG_GameState_Game_GetMaxScoreForWin");
static_assert(sizeof(PG_GameState_Game_GetMaxScoreForWin) == 0x000004, "Wrong size on PG_GameState_Game_GetMaxScoreForWin");
static_assert(offsetof(PG_GameState_Game_GetMaxScoreForWin, ReturnValue) == 0x000000, "Member 'PG_GameState_Game_GetMaxScoreForWin::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_GameState_Game.GetScoreAlphaTeam
// 0x0004 (0x0004 - 0x0000)
struct PG_GameState_Game_GetScoreAlphaTeam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_GameState_Game_GetScoreAlphaTeam) == 0x000004, "Wrong alignment on PG_GameState_Game_GetScoreAlphaTeam");
static_assert(sizeof(PG_GameState_Game_GetScoreAlphaTeam) == 0x000004, "Wrong size on PG_GameState_Game_GetScoreAlphaTeam");
static_assert(offsetof(PG_GameState_Game_GetScoreAlphaTeam, ReturnValue) == 0x000000, "Member 'PG_GameState_Game_GetScoreAlphaTeam::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_GameState_Game.GetScoreBravoTeam
// 0x0004 (0x0004 - 0x0000)
struct PG_GameState_Game_GetScoreBravoTeam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_GameState_Game_GetScoreBravoTeam) == 0x000004, "Wrong alignment on PG_GameState_Game_GetScoreBravoTeam");
static_assert(sizeof(PG_GameState_Game_GetScoreBravoTeam) == 0x000004, "Wrong size on PG_GameState_Game_GetScoreBravoTeam");
static_assert(offsetof(PG_GameState_Game_GetScoreBravoTeam, ReturnValue) == 0x000000, "Member 'PG_GameState_Game_GetScoreBravoTeam::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_Game_Character.ActionWhenGunHit_client
// 0x0010 (0x0010 - 0x0000)
struct PG_Game_Character_ActionWhenGunHit_client final
{
public:
	class APG_Game_Character*                     CharacterInstigator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitBoneIndex;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C63[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_Game_Character_ActionWhenGunHit_client) == 0x000008, "Wrong alignment on PG_Game_Character_ActionWhenGunHit_client");
static_assert(sizeof(PG_Game_Character_ActionWhenGunHit_client) == 0x000010, "Wrong size on PG_Game_Character_ActionWhenGunHit_client");
static_assert(offsetof(PG_Game_Character_ActionWhenGunHit_client, CharacterInstigator) == 0x000000, "Member 'PG_Game_Character_ActionWhenGunHit_client::CharacterInstigator' has a wrong offset!");
static_assert(offsetof(PG_Game_Character_ActionWhenGunHit_client, HitBoneIndex) == 0x000008, "Member 'PG_Game_Character_ActionWhenGunHit_client::HitBoneIndex' has a wrong offset!");

// Function POLYGON.PG_Game_Character.ActionWhenTakeDamage_client
// 0x0008 (0x0008 - 0x0000)
struct PG_Game_Character_ActionWhenTakeDamage_client final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_ActionWhenTakeDamage_client) == 0x000008, "Wrong alignment on PG_Game_Character_ActionWhenTakeDamage_client");
static_assert(sizeof(PG_Game_Character_ActionWhenTakeDamage_client) == 0x000008, "Wrong size on PG_Game_Character_ActionWhenTakeDamage_client");
static_assert(offsetof(PG_Game_Character_ActionWhenTakeDamage_client, DamageCauser) == 0x000000, "Member 'PG_Game_Character_ActionWhenTakeDamage_client::DamageCauser' has a wrong offset!");

// Function POLYGON.PG_Game_Character.CameraNeutralizationEffectEvent
// 0x0004 (0x0004 - 0x0000)
struct PG_Game_Character_CameraNeutralizationEffectEvent final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_CameraNeutralizationEffectEvent) == 0x000004, "Wrong alignment on PG_Game_Character_CameraNeutralizationEffectEvent");
static_assert(sizeof(PG_Game_Character_CameraNeutralizationEffectEvent) == 0x000004, "Wrong size on PG_Game_Character_CameraNeutralizationEffectEvent");
static_assert(offsetof(PG_Game_Character_CameraNeutralizationEffectEvent, Damage) == 0x000000, "Member 'PG_Game_Character_CameraNeutralizationEffectEvent::Damage' has a wrong offset!");

// Function POLYGON.PG_Game_Character.DeathEvent
// 0x0010 (0x0010 - 0x0000)
struct PG_Game_Character_DeathEvent final
{
public:
	class APG_PlayerState_Game*                   Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerDeathType                              DeathType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C64[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_Game_Character_DeathEvent) == 0x000008, "Wrong alignment on PG_Game_Character_DeathEvent");
static_assert(sizeof(PG_Game_Character_DeathEvent) == 0x000010, "Wrong size on PG_Game_Character_DeathEvent");
static_assert(offsetof(PG_Game_Character_DeathEvent, Killer) == 0x000000, "Member 'PG_Game_Character_DeathEvent::Killer' has a wrong offset!");
static_assert(offsetof(PG_Game_Character_DeathEvent, DeathType) == 0x000008, "Member 'PG_Game_Character_DeathEvent::DeathType' has a wrong offset!");

// Function POLYGON.PG_Game_Character.EventTakeDamage
// 0x0018 (0x0018 - 0x0000)
struct PG_Game_Character_EventTakeDamage final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_EventTakeDamage) == 0x000008, "Wrong alignment on PG_Game_Character_EventTakeDamage");
static_assert(sizeof(PG_Game_Character_EventTakeDamage) == 0x000018, "Wrong size on PG_Game_Character_EventTakeDamage");
static_assert(offsetof(PG_Game_Character_EventTakeDamage, Origin) == 0x000000, "Member 'PG_Game_Character_EventTakeDamage::Origin' has a wrong offset!");

// Function POLYGON.PG_Game_Character.LeanBody_server
// 0x0001 (0x0001 - 0x0000)
struct PG_Game_Character_LeanBody_server final
{
public:
	int8                                          Param_LeanBodyAlpha;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_LeanBody_server) == 0x000001, "Wrong alignment on PG_Game_Character_LeanBody_server");
static_assert(sizeof(PG_Game_Character_LeanBody_server) == 0x000001, "Wrong size on PG_Game_Character_LeanBody_server");
static_assert(offsetof(PG_Game_Character_LeanBody_server, Param_LeanBodyAlpha) == 0x000000, "Member 'PG_Game_Character_LeanBody_server::Param_LeanBodyAlpha' has a wrong offset!");

// Function POLYGON.PG_Game_Character.NotifyDeath_multicast
// 0x0010 (0x0010 - 0x0000)
struct PG_Game_Character_NotifyDeath_multicast final
{
public:
	class APG_PlayerState_Game*                   Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerDeathType                              DeathType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C65[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_Game_Character_NotifyDeath_multicast) == 0x000008, "Wrong alignment on PG_Game_Character_NotifyDeath_multicast");
static_assert(sizeof(PG_Game_Character_NotifyDeath_multicast) == 0x000010, "Wrong size on PG_Game_Character_NotifyDeath_multicast");
static_assert(offsetof(PG_Game_Character_NotifyDeath_multicast, Killer) == 0x000000, "Member 'PG_Game_Character_NotifyDeath_multicast::Killer' has a wrong offset!");
static_assert(offsetof(PG_Game_Character_NotifyDeath_multicast, DeathType) == 0x000008, "Member 'PG_Game_Character_NotifyDeath_multicast::DeathType' has a wrong offset!");

// Function POLYGON.PG_Game_Character.NotifyDeathWithImpulse_multicast
// 0x0030 (0x0030 - 0x0000)
struct PG_Game_Character_NotifyDeathWithImpulse_multicast final
{
public:
	class APG_PlayerState_Game*                   Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerDeathType                              DeathType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C66[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    Impulse;                                           // 0x0010(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BoneIndex;                                         // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C67[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_Game_Character_NotifyDeathWithImpulse_multicast) == 0x000008, "Wrong alignment on PG_Game_Character_NotifyDeathWithImpulse_multicast");
static_assert(sizeof(PG_Game_Character_NotifyDeathWithImpulse_multicast) == 0x000030, "Wrong size on PG_Game_Character_NotifyDeathWithImpulse_multicast");
static_assert(offsetof(PG_Game_Character_NotifyDeathWithImpulse_multicast, Killer) == 0x000000, "Member 'PG_Game_Character_NotifyDeathWithImpulse_multicast::Killer' has a wrong offset!");
static_assert(offsetof(PG_Game_Character_NotifyDeathWithImpulse_multicast, DeathType) == 0x000008, "Member 'PG_Game_Character_NotifyDeathWithImpulse_multicast::DeathType' has a wrong offset!");
static_assert(offsetof(PG_Game_Character_NotifyDeathWithImpulse_multicast, Impulse) == 0x000010, "Member 'PG_Game_Character_NotifyDeathWithImpulse_multicast::Impulse' has a wrong offset!");
static_assert(offsetof(PG_Game_Character_NotifyDeathWithImpulse_multicast, BoneIndex) == 0x000028, "Member 'PG_Game_Character_NotifyDeathWithImpulse_multicast::BoneIndex' has a wrong offset!");

// Function POLYGON.PG_Game_Character.OnRep_PlayerAction
// 0x0001 (0x0001 - 0x0000)
struct PG_Game_Character_OnRep_PlayerAction final
{
public:
	EPlayerAction                                 PreviousAction;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_OnRep_PlayerAction) == 0x000001, "Wrong alignment on PG_Game_Character_OnRep_PlayerAction");
static_assert(sizeof(PG_Game_Character_OnRep_PlayerAction) == 0x000001, "Wrong size on PG_Game_Character_OnRep_PlayerAction");
static_assert(offsetof(PG_Game_Character_OnRep_PlayerAction, PreviousAction) == 0x000000, "Member 'PG_Game_Character_OnRep_PlayerAction::PreviousAction' has a wrong offset!");

// Function POLYGON.PG_Game_Character.OnRep_RespawnCounter
// 0x0001 (0x0001 - 0x0000)
struct PG_Game_Character_OnRep_RespawnCounter final
{
public:
	uint8                                         PreviousValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_OnRep_RespawnCounter) == 0x000001, "Wrong alignment on PG_Game_Character_OnRep_RespawnCounter");
static_assert(sizeof(PG_Game_Character_OnRep_RespawnCounter) == 0x000001, "Wrong size on PG_Game_Character_OnRep_RespawnCounter");
static_assert(offsetof(PG_Game_Character_OnRep_RespawnCounter, PreviousValue) == 0x000000, "Member 'PG_Game_Character_OnRep_RespawnCounter::PreviousValue' has a wrong offset!");

// Function POLYGON.PG_Game_Character.Respawn_client
// 0x0030 (0x0030 - 0x0000)
struct PG_Game_Character_Respawn_client final
{
public:
	struct FVector_NetQuantize                    NewLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              NewRotator;                                        // 0x0018(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_Respawn_client) == 0x000008, "Wrong alignment on PG_Game_Character_Respawn_client");
static_assert(sizeof(PG_Game_Character_Respawn_client) == 0x000030, "Wrong size on PG_Game_Character_Respawn_client");
static_assert(offsetof(PG_Game_Character_Respawn_client, NewLocation) == 0x000000, "Member 'PG_Game_Character_Respawn_client::NewLocation' has a wrong offset!");
static_assert(offsetof(PG_Game_Character_Respawn_client, NewRotator) == 0x000018, "Member 'PG_Game_Character_Respawn_client::NewRotator' has a wrong offset!");

// Function POLYGON.PG_Game_Character.SetIsSprinting_server
// 0x0001 (0x0001 - 0x0000)
struct PG_Game_Character_SetIsSprinting_server final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_SetIsSprinting_server) == 0x000001, "Wrong alignment on PG_Game_Character_SetIsSprinting_server");
static_assert(sizeof(PG_Game_Character_SetIsSprinting_server) == 0x000001, "Wrong size on PG_Game_Character_SetIsSprinting_server");
static_assert(offsetof(PG_Game_Character_SetIsSprinting_server, NewState) == 0x000000, "Member 'PG_Game_Character_SetIsSprinting_server::NewState' has a wrong offset!");

// Function POLYGON.PG_Game_Character.SetNeutralizationVignetteImpact
// 0x0004 (0x0004 - 0x0000)
struct PG_Game_Character_SetNeutralizationVignetteImpact final
{
public:
	float                                         NewNeutralizationVignetteImpact;                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_SetNeutralizationVignetteImpact) == 0x000004, "Wrong alignment on PG_Game_Character_SetNeutralizationVignetteImpact");
static_assert(sizeof(PG_Game_Character_SetNeutralizationVignetteImpact) == 0x000004, "Wrong size on PG_Game_Character_SetNeutralizationVignetteImpact");
static_assert(offsetof(PG_Game_Character_SetNeutralizationVignetteImpact, NewNeutralizationVignetteImpact) == 0x000000, "Member 'PG_Game_Character_SetNeutralizationVignetteImpact::NewNeutralizationVignetteImpact' has a wrong offset!");

// Function POLYGON.PG_Game_Character.StartInteractWithObject_server
// 0x0008 (0x0008 - 0x0000)
struct PG_Game_Character_StartInteractWithObject_server final
{
public:
	class AActor*                                 InteractActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_StartInteractWithObject_server) == 0x000008, "Wrong alignment on PG_Game_Character_StartInteractWithObject_server");
static_assert(sizeof(PG_Game_Character_StartInteractWithObject_server) == 0x000008, "Wrong size on PG_Game_Character_StartInteractWithObject_server");
static_assert(offsetof(PG_Game_Character_StartInteractWithObject_server, InteractActor) == 0x000000, "Member 'PG_Game_Character_StartInteractWithObject_server::InteractActor' has a wrong offset!");

// Function POLYGON.PG_Game_Character.GetActiveCamera
// 0x0008 (0x0008 - 0x0000)
struct PG_Game_Character_GetActiveCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_GetActiveCamera) == 0x000008, "Wrong alignment on PG_Game_Character_GetActiveCamera");
static_assert(sizeof(PG_Game_Character_GetActiveCamera) == 0x000008, "Wrong size on PG_Game_Character_GetActiveCamera");
static_assert(offsetof(PG_Game_Character_GetActiveCamera, ReturnValue) == 0x000000, "Member 'PG_Game_Character_GetActiveCamera::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_Game_Character.GetIsSprinting
// 0x0001 (0x0001 - 0x0000)
struct PG_Game_Character_GetIsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_GetIsSprinting) == 0x000001, "Wrong alignment on PG_Game_Character_GetIsSprinting");
static_assert(sizeof(PG_Game_Character_GetIsSprinting) == 0x000001, "Wrong size on PG_Game_Character_GetIsSprinting");
static_assert(offsetof(PG_Game_Character_GetIsSprinting, ReturnValue) == 0x000000, "Member 'PG_Game_Character_GetIsSprinting::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_Game_Character.GetNeutralizationVignetteImpact
// 0x0004 (0x0004 - 0x0000)
struct PG_Game_Character_GetNeutralizationVignetteImpact final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_GetNeutralizationVignetteImpact) == 0x000004, "Wrong alignment on PG_Game_Character_GetNeutralizationVignetteImpact");
static_assert(sizeof(PG_Game_Character_GetNeutralizationVignetteImpact) == 0x000004, "Wrong size on PG_Game_Character_GetNeutralizationVignetteImpact");
static_assert(offsetof(PG_Game_Character_GetNeutralizationVignetteImpact, ReturnValue) == 0x000000, "Member 'PG_Game_Character_GetNeutralizationVignetteImpact::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_Game_Character.GetPlayerAction
// 0x0001 (0x0001 - 0x0000)
struct PG_Game_Character_GetPlayerAction final
{
public:
	EPlayerAction                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_GetPlayerAction) == 0x000001, "Wrong alignment on PG_Game_Character_GetPlayerAction");
static_assert(sizeof(PG_Game_Character_GetPlayerAction) == 0x000001, "Wrong size on PG_Game_Character_GetPlayerAction");
static_assert(offsetof(PG_Game_Character_GetPlayerAction, ReturnValue) == 0x000000, "Member 'PG_Game_Character_GetPlayerAction::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_Game_Character.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct PG_Game_Character_GetTeam final
{
public:
	ETeam                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_Game_Character_GetTeam) == 0x000001, "Wrong alignment on PG_Game_Character_GetTeam");
static_assert(sizeof(PG_Game_Character_GetTeam) == 0x000001, "Wrong size on PG_Game_Character_GetTeam");
static_assert(offsetof(PG_Game_Character_GetTeam, ReturnValue) == 0x000000, "Member 'PG_Game_Character_GetTeam::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_BeaconClient.ConnectToServer
// 0x0028 (0x0028 - 0x0000)
struct PG_BeaconClient_ConnectToServer final
{
public:
	class FString                                 IP;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeaconPort;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bWasSuccessful)>          OnConnectedStateChange;                            // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C69[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_BeaconClient_ConnectToServer) == 0x000008, "Wrong alignment on PG_BeaconClient_ConnectToServer");
static_assert(sizeof(PG_BeaconClient_ConnectToServer) == 0x000028, "Wrong size on PG_BeaconClient_ConnectToServer");
static_assert(offsetof(PG_BeaconClient_ConnectToServer, IP) == 0x000000, "Member 'PG_BeaconClient_ConnectToServer::IP' has a wrong offset!");
static_assert(offsetof(PG_BeaconClient_ConnectToServer, BeaconPort) == 0x000010, "Member 'PG_BeaconClient_ConnectToServer::BeaconPort' has a wrong offset!");
static_assert(offsetof(PG_BeaconClient_ConnectToServer, OnConnectedStateChange) == 0x000014, "Member 'PG_BeaconClient_ConnectToServer::OnConnectedStateChange' has a wrong offset!");
static_assert(offsetof(PG_BeaconClient_ConnectToServer, ReturnValue) == 0x000024, "Member 'PG_BeaconClient_ConnectToServer::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_BeaconClient.RequestReserveSlot
// 0x0038 (0x0038 - 0x0000)
struct PG_BeaconClient_RequestReserveSlot final
{
public:
	TArray<struct FUniqueNetIdRepl>               UnequeIds;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsUsedMatchmaker;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C6A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(uint8 Payload)>                OnResponseReserveSlot;                             // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 Number)>                 OnPutInQueue;                                      // 0x0024(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C6B[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_BeaconClient_RequestReserveSlot) == 0x000008, "Wrong alignment on PG_BeaconClient_RequestReserveSlot");
static_assert(sizeof(PG_BeaconClient_RequestReserveSlot) == 0x000038, "Wrong size on PG_BeaconClient_RequestReserveSlot");
static_assert(offsetof(PG_BeaconClient_RequestReserveSlot, UnequeIds) == 0x000000, "Member 'PG_BeaconClient_RequestReserveSlot::UnequeIds' has a wrong offset!");
static_assert(offsetof(PG_BeaconClient_RequestReserveSlot, IsUsedMatchmaker) == 0x000010, "Member 'PG_BeaconClient_RequestReserveSlot::IsUsedMatchmaker' has a wrong offset!");
static_assert(offsetof(PG_BeaconClient_RequestReserveSlot, OnResponseReserveSlot) == 0x000014, "Member 'PG_BeaconClient_RequestReserveSlot::OnResponseReserveSlot' has a wrong offset!");
static_assert(offsetof(PG_BeaconClient_RequestReserveSlot, OnPutInQueue) == 0x000024, "Member 'PG_BeaconClient_RequestReserveSlot::OnPutInQueue' has a wrong offset!");

// Function POLYGON.PG_BeaconClient.RequestReserveSlot_server
// 0x0018 (0x0018 - 0x0000)
struct PG_BeaconClient_RequestReserveSlot_server final
{
public:
	TArray<struct FUniqueNetIdRepl>               UnequeIds;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsUsedMatchmaker;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C6C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PG_BeaconClient_RequestReserveSlot_server) == 0x000008, "Wrong alignment on PG_BeaconClient_RequestReserveSlot_server");
static_assert(sizeof(PG_BeaconClient_RequestReserveSlot_server) == 0x000018, "Wrong size on PG_BeaconClient_RequestReserveSlot_server");
static_assert(offsetof(PG_BeaconClient_RequestReserveSlot_server, UnequeIds) == 0x000000, "Member 'PG_BeaconClient_RequestReserveSlot_server::UnequeIds' has a wrong offset!");
static_assert(offsetof(PG_BeaconClient_RequestReserveSlot_server, IsUsedMatchmaker) == 0x000010, "Member 'PG_BeaconClient_RequestReserveSlot_server::IsUsedMatchmaker' has a wrong offset!");

// Function POLYGON.PG_BeaconClient.ResponseReserveSlot_client
// 0x0001 (0x0001 - 0x0000)
struct PG_BeaconClient_ResponseReserveSlot_client final
{
public:
	uint8                                         Payload;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_BeaconClient_ResponseReserveSlot_client) == 0x000001, "Wrong alignment on PG_BeaconClient_ResponseReserveSlot_client");
static_assert(sizeof(PG_BeaconClient_ResponseReserveSlot_client) == 0x000001, "Wrong size on PG_BeaconClient_ResponseReserveSlot_client");
static_assert(offsetof(PG_BeaconClient_ResponseReserveSlot_client, Payload) == 0x000000, "Member 'PG_BeaconClient_ResponseReserveSlot_client::Payload' has a wrong offset!");

// Function POLYGON.PG_BeaconClient.SendNumberInQueue_client
// 0x0001 (0x0001 - 0x0000)
struct PG_BeaconClient_SendNumberInQueue_client final
{
public:
	uint8                                         Number;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_BeaconClient_SendNumberInQueue_client) == 0x000001, "Wrong alignment on PG_BeaconClient_SendNumberInQueue_client");
static_assert(sizeof(PG_BeaconClient_SendNumberInQueue_client) == 0x000001, "Wrong size on PG_BeaconClient_SendNumberInQueue_client");
static_assert(offsetof(PG_BeaconClient_SendNumberInQueue_client, Number) == 0x000000, "Member 'PG_BeaconClient_SendNumberInQueue_client::Number' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Base.GetMouseSensitivityAimingValue
// 0x0004 (0x0004 - 0x0000)
struct PG_PlayerController_Base_GetMouseSensitivityAimingValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Base_GetMouseSensitivityAimingValue) == 0x000004, "Wrong alignment on PG_PlayerController_Base_GetMouseSensitivityAimingValue");
static_assert(sizeof(PG_PlayerController_Base_GetMouseSensitivityAimingValue) == 0x000004, "Wrong size on PG_PlayerController_Base_GetMouseSensitivityAimingValue");
static_assert(offsetof(PG_PlayerController_Base_GetMouseSensitivityAimingValue, ReturnValue) == 0x000000, "Member 'PG_PlayerController_Base_GetMouseSensitivityAimingValue::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Base.GetMouseSensitivityValue
// 0x0004 (0x0004 - 0x0000)
struct PG_PlayerController_Base_GetMouseSensitivityValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Base_GetMouseSensitivityValue) == 0x000004, "Wrong alignment on PG_PlayerController_Base_GetMouseSensitivityValue");
static_assert(sizeof(PG_PlayerController_Base_GetMouseSensitivityValue) == 0x000004, "Wrong size on PG_PlayerController_Base_GetMouseSensitivityValue");
static_assert(offsetof(PG_PlayerController_Base_GetMouseSensitivityValue, ReturnValue) == 0x000000, "Member 'PG_PlayerController_Base_GetMouseSensitivityValue::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Base.IsInvertMouse
// 0x0001 (0x0001 - 0x0000)
struct PG_PlayerController_Base_IsInvertMouse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Base_IsInvertMouse) == 0x000001, "Wrong alignment on PG_PlayerController_Base_IsInvertMouse");
static_assert(sizeof(PG_PlayerController_Base_IsInvertMouse) == 0x000001, "Wrong size on PG_PlayerController_Base_IsInvertMouse");
static_assert(offsetof(PG_PlayerController_Base_IsInvertMouse, ReturnValue) == 0x000000, "Member 'PG_PlayerController_Base_IsInvertMouse::ReturnValue' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Base.ShowError
// 0x0030 (0x0030 - 0x0000)
struct PG_PlayerController_Base_ShowError final
{
public:
	class FText                                   ErrorMessage;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ErrorDetails;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Base_ShowError) == 0x000008, "Wrong alignment on PG_PlayerController_Base_ShowError");
static_assert(sizeof(PG_PlayerController_Base_ShowError) == 0x000030, "Wrong size on PG_PlayerController_Base_ShowError");
static_assert(offsetof(PG_PlayerController_Base_ShowError, ErrorMessage) == 0x000000, "Member 'PG_PlayerController_Base_ShowError::ErrorMessage' has a wrong offset!");
static_assert(offsetof(PG_PlayerController_Base_ShowError, ErrorDetails) == 0x000018, "Member 'PG_PlayerController_Base_ShowError::ErrorDetails' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Game.DisplayMessageToChatEvent
// 0x0020 (0x0020 - 0x0000)
struct PG_PlayerController_Game_DisplayMessageToChatEvent final
{
public:
	struct FGameChatMessage                       Message;                                           // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Game_DisplayMessageToChatEvent) == 0x000008, "Wrong alignment on PG_PlayerController_Game_DisplayMessageToChatEvent");
static_assert(sizeof(PG_PlayerController_Game_DisplayMessageToChatEvent) == 0x000020, "Wrong size on PG_PlayerController_Game_DisplayMessageToChatEvent");
static_assert(offsetof(PG_PlayerController_Game_DisplayMessageToChatEvent, Message) == 0x000000, "Member 'PG_PlayerController_Game_DisplayMessageToChatEvent::Message' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Game.LoginPlayer_server
// 0x0010 (0x0010 - 0x0000)
struct PG_PlayerController_Game_LoginPlayer_server final
{
public:
	class FString                                 PlayerMasterId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Game_LoginPlayer_server) == 0x000008, "Wrong alignment on PG_PlayerController_Game_LoginPlayer_server");
static_assert(sizeof(PG_PlayerController_Game_LoginPlayer_server) == 0x000010, "Wrong size on PG_PlayerController_Game_LoginPlayer_server");
static_assert(offsetof(PG_PlayerController_Game_LoginPlayer_server, PlayerMasterId) == 0x000000, "Member 'PG_PlayerController_Game_LoginPlayer_server::PlayerMasterId' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Game.RequestSpawnOnControlPoint_server
// 0x0001 (0x0001 - 0x0000)
struct PG_PlayerController_Game_RequestSpawnOnControlPoint_server final
{
public:
	EControlPoint                                 SpawnToControlPoint;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Game_RequestSpawnOnControlPoint_server) == 0x000001, "Wrong alignment on PG_PlayerController_Game_RequestSpawnOnControlPoint_server");
static_assert(sizeof(PG_PlayerController_Game_RequestSpawnOnControlPoint_server) == 0x000001, "Wrong size on PG_PlayerController_Game_RequestSpawnOnControlPoint_server");
static_assert(offsetof(PG_PlayerController_Game_RequestSpawnOnControlPoint_server, SpawnToControlPoint) == 0x000000, "Member 'PG_PlayerController_Game_RequestSpawnOnControlPoint_server::SpawnToControlPoint' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Game.RequestSpawnOnSquadMember_server
// 0x0008 (0x0008 - 0x0000)
struct PG_PlayerController_Game_RequestSpawnOnSquadMember_server final
{
public:
	class APG_PlayerState_Game*                   SquadMember;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Game_RequestSpawnOnSquadMember_server) == 0x000008, "Wrong alignment on PG_PlayerController_Game_RequestSpawnOnSquadMember_server");
static_assert(sizeof(PG_PlayerController_Game_RequestSpawnOnSquadMember_server) == 0x000008, "Wrong size on PG_PlayerController_Game_RequestSpawnOnSquadMember_server");
static_assert(offsetof(PG_PlayerController_Game_RequestSpawnOnSquadMember_server, SquadMember) == 0x000000, "Member 'PG_PlayerController_Game_RequestSpawnOnSquadMember_server::SquadMember' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Game.SetVisibleLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct PG_PlayerController_Game_SetVisibleLoadingScreen final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Game_SetVisibleLoadingScreen) == 0x000001, "Wrong alignment on PG_PlayerController_Game_SetVisibleLoadingScreen");
static_assert(sizeof(PG_PlayerController_Game_SetVisibleLoadingScreen) == 0x000001, "Wrong size on PG_PlayerController_Game_SetVisibleLoadingScreen");
static_assert(offsetof(PG_PlayerController_Game_SetVisibleLoadingScreen, IsVisible) == 0x000000, "Member 'PG_PlayerController_Game_SetVisibleLoadingScreen::IsVisible' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Game.StartInteraction_Client
// 0x0004 (0x0004 - 0x0000)
struct PG_PlayerController_Game_StartInteraction_Client final
{
public:
	float                                         InteractionTime;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Game_StartInteraction_Client) == 0x000004, "Wrong alignment on PG_PlayerController_Game_StartInteraction_Client");
static_assert(sizeof(PG_PlayerController_Game_StartInteraction_Client) == 0x000004, "Wrong size on PG_PlayerController_Game_StartInteraction_Client");
static_assert(offsetof(PG_PlayerController_Game_StartInteraction_Client, InteractionTime) == 0x000000, "Member 'PG_PlayerController_Game_StartInteraction_Client::InteractionTime' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Game.StartInteractionEvent
// 0x0004 (0x0004 - 0x0000)
struct PG_PlayerController_Game_StartInteractionEvent final
{
public:
	float                                         InteractionTime;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Game_StartInteractionEvent) == 0x000004, "Wrong alignment on PG_PlayerController_Game_StartInteractionEvent");
static_assert(sizeof(PG_PlayerController_Game_StartInteractionEvent) == 0x000004, "Wrong size on PG_PlayerController_Game_StartInteractionEvent");
static_assert(offsetof(PG_PlayerController_Game_StartInteractionEvent, InteractionTime) == 0x000000, "Member 'PG_PlayerController_Game_StartInteractionEvent::InteractionTime' has a wrong offset!");

// Function POLYGON.PG_PlayerController_Game.VoteKick
// 0x0008 (0x0008 - 0x0000)
struct PG_PlayerController_Game_VoteKick final
{
public:
	class APG_PlayerState_Game*                   badGuy;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PG_PlayerController_Game_VoteKick) == 0x000008, "Wrong alignment on PG_PlayerController_Game_VoteKick");
static_assert(sizeof(PG_PlayerController_Game_VoteKick) == 0x000008, "Wrong size on PG_PlayerController_Game_VoteKick");
static_assert(offsetof(PG_PlayerController_Game_VoteKick, badGuy) == 0x000000, "Member 'PG_PlayerController_Game_VoteKick::badGuy' has a wrong offset!");

// Function POLYGON.SupportBox.OnCoverageBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct SupportBox_OnCoverageBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C70[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupportBox_OnCoverageBeginOverlap) == 0x000008, "Wrong alignment on SupportBox_OnCoverageBeginOverlap");
static_assert(sizeof(SupportBox_OnCoverageBeginOverlap) == 0x000108, "Wrong size on SupportBox_OnCoverageBeginOverlap");
static_assert(offsetof(SupportBox_OnCoverageBeginOverlap, OverlappedComp) == 0x000000, "Member 'SupportBox_OnCoverageBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(SupportBox_OnCoverageBeginOverlap, Other) == 0x000008, "Member 'SupportBox_OnCoverageBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(SupportBox_OnCoverageBeginOverlap, OtherComp) == 0x000010, "Member 'SupportBox_OnCoverageBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SupportBox_OnCoverageBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SupportBox_OnCoverageBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SupportBox_OnCoverageBeginOverlap, FromSweep) == 0x00001C, "Member 'SupportBox_OnCoverageBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(SupportBox_OnCoverageBeginOverlap, SweepResult) == 0x000020, "Member 'SupportBox_OnCoverageBeginOverlap::SweepResult' has a wrong offset!");

// Function POLYGON.SupportBox.OnCoverageEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SupportBox_OnCoverageEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C71[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SupportBox_OnCoverageEndOverlap) == 0x000008, "Wrong alignment on SupportBox_OnCoverageEndOverlap");
static_assert(sizeof(SupportBox_OnCoverageEndOverlap) == 0x000020, "Wrong size on SupportBox_OnCoverageEndOverlap");
static_assert(offsetof(SupportBox_OnCoverageEndOverlap, OverlappedComponent) == 0x000000, "Member 'SupportBox_OnCoverageEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SupportBox_OnCoverageEndOverlap, OtherActor) == 0x000008, "Member 'SupportBox_OnCoverageEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SupportBox_OnCoverageEndOverlap, OtherComp) == 0x000010, "Member 'SupportBox_OnCoverageEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SupportBox_OnCoverageEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SupportBox_OnCoverageEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function POLYGON.WeaponComponent.OnSetCurrentGun
// 0x0008 (0x0008 - 0x0000)
struct WeaponComponent_OnSetCurrentGun final
{
public:
	class AItem_Gun_General*                      OldCurrentGun;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_OnSetCurrentGun) == 0x000008, "Wrong alignment on WeaponComponent_OnSetCurrentGun");
static_assert(sizeof(WeaponComponent_OnSetCurrentGun) == 0x000008, "Wrong size on WeaponComponent_OnSetCurrentGun");
static_assert(offsetof(WeaponComponent_OnSetCurrentGun, OldCurrentGun) == 0x000000, "Member 'WeaponComponent_OnSetCurrentGun::OldCurrentGun' has a wrong offset!");

// Function POLYGON.WeaponComponent.OnSetPrimaryGun
// 0x0008 (0x0008 - 0x0000)
struct WeaponComponent_OnSetPrimaryGun final
{
public:
	class AItem_Gun_General*                      OldGun;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_OnSetPrimaryGun) == 0x000008, "Wrong alignment on WeaponComponent_OnSetPrimaryGun");
static_assert(sizeof(WeaponComponent_OnSetPrimaryGun) == 0x000008, "Wrong size on WeaponComponent_OnSetPrimaryGun");
static_assert(offsetof(WeaponComponent_OnSetPrimaryGun, OldGun) == 0x000000, "Member 'WeaponComponent_OnSetPrimaryGun::OldGun' has a wrong offset!");

// Function POLYGON.WeaponComponent.OnSetSecondaryGun
// 0x0008 (0x0008 - 0x0000)
struct WeaponComponent_OnSetSecondaryGun final
{
public:
	class AItem_Gun_General*                      OldGun;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_OnSetSecondaryGun) == 0x000008, "Wrong alignment on WeaponComponent_OnSetSecondaryGun");
static_assert(sizeof(WeaponComponent_OnSetSecondaryGun) == 0x000008, "Wrong size on WeaponComponent_OnSetSecondaryGun");
static_assert(offsetof(WeaponComponent_OnSetSecondaryGun, OldGun) == 0x000000, "Member 'WeaponComponent_OnSetSecondaryGun::OldGun' has a wrong offset!");

// Function POLYGON.WeaponComponent.SelectGunSlot_server
// 0x0001 (0x0001 - 0x0000)
struct WeaponComponent_SelectGunSlot_server final
{
public:
	uint8                                         Slot;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_SelectGunSlot_server) == 0x000001, "Wrong alignment on WeaponComponent_SelectGunSlot_server");
static_assert(sizeof(WeaponComponent_SelectGunSlot_server) == 0x000001, "Wrong size on WeaponComponent_SelectGunSlot_server");
static_assert(offsetof(WeaponComponent_SelectGunSlot_server, Slot) == 0x000000, "Member 'WeaponComponent_SelectGunSlot_server::Slot' has a wrong offset!");

// Function POLYGON.WeaponComponent.SetGunRecoilAlpha_Roll
// 0x0004 (0x0004 - 0x0000)
struct WeaponComponent_SetGunRecoilAlpha_Roll final
{
public:
	float                                         NewRollRecoil;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_SetGunRecoilAlpha_Roll) == 0x000004, "Wrong alignment on WeaponComponent_SetGunRecoilAlpha_Roll");
static_assert(sizeof(WeaponComponent_SetGunRecoilAlpha_Roll) == 0x000004, "Wrong size on WeaponComponent_SetGunRecoilAlpha_Roll");
static_assert(offsetof(WeaponComponent_SetGunRecoilAlpha_Roll, NewRollRecoil) == 0x000000, "Member 'WeaponComponent_SetGunRecoilAlpha_Roll::NewRollRecoil' has a wrong offset!");

// Function POLYGON.WeaponComponent.SetGunRecoilAlpha_Yaw
// 0x0004 (0x0004 - 0x0000)
struct WeaponComponent_SetGunRecoilAlpha_Yaw final
{
public:
	float                                         NewYawRecoil;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_SetGunRecoilAlpha_Yaw) == 0x000004, "Wrong alignment on WeaponComponent_SetGunRecoilAlpha_Yaw");
static_assert(sizeof(WeaponComponent_SetGunRecoilAlpha_Yaw) == 0x000004, "Wrong size on WeaponComponent_SetGunRecoilAlpha_Yaw");
static_assert(offsetof(WeaponComponent_SetGunRecoilAlpha_Yaw, NewYawRecoil) == 0x000000, "Member 'WeaponComponent_SetGunRecoilAlpha_Yaw::NewYawRecoil' has a wrong offset!");

// Function POLYGON.WeaponComponent.SetStrivingGunRecoilAlpha_Pitch
// 0x0004 (0x0004 - 0x0000)
struct WeaponComponent_SetStrivingGunRecoilAlpha_Pitch final
{
public:
	float                                         NewStrivingPitchRecoil;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_SetStrivingGunRecoilAlpha_Pitch) == 0x000004, "Wrong alignment on WeaponComponent_SetStrivingGunRecoilAlpha_Pitch");
static_assert(sizeof(WeaponComponent_SetStrivingGunRecoilAlpha_Pitch) == 0x000004, "Wrong size on WeaponComponent_SetStrivingGunRecoilAlpha_Pitch");
static_assert(offsetof(WeaponComponent_SetStrivingGunRecoilAlpha_Pitch, NewStrivingPitchRecoil) == 0x000000, "Member 'WeaponComponent_SetStrivingGunRecoilAlpha_Pitch::NewStrivingPitchRecoil' has a wrong offset!");

// Function POLYGON.WeaponComponent.SetWantsToAiming_server
// 0x0001 (0x0001 - 0x0000)
struct WeaponComponent_SetWantsToAiming_server final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_SetWantsToAiming_server) == 0x000001, "Wrong alignment on WeaponComponent_SetWantsToAiming_server");
static_assert(sizeof(WeaponComponent_SetWantsToAiming_server) == 0x000001, "Wrong size on WeaponComponent_SetWantsToAiming_server");
static_assert(offsetof(WeaponComponent_SetWantsToAiming_server, NewState) == 0x000000, "Member 'WeaponComponent_SetWantsToAiming_server::NewState' has a wrong offset!");

// Function POLYGON.WeaponComponent.GetCurrentGun
// 0x0008 (0x0008 - 0x0000)
struct WeaponComponent_GetCurrentGun final
{
public:
	class AItem_Gun_General*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_GetCurrentGun) == 0x000008, "Wrong alignment on WeaponComponent_GetCurrentGun");
static_assert(sizeof(WeaponComponent_GetCurrentGun) == 0x000008, "Wrong size on WeaponComponent_GetCurrentGun");
static_assert(offsetof(WeaponComponent_GetCurrentGun, ReturnValue) == 0x000000, "Member 'WeaponComponent_GetCurrentGun::ReturnValue' has a wrong offset!");

// Function POLYGON.WeaponComponent.GetGunRecoilAlpha_Backward
// 0x0004 (0x0004 - 0x0000)
struct WeaponComponent_GetGunRecoilAlpha_Backward final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_GetGunRecoilAlpha_Backward) == 0x000004, "Wrong alignment on WeaponComponent_GetGunRecoilAlpha_Backward");
static_assert(sizeof(WeaponComponent_GetGunRecoilAlpha_Backward) == 0x000004, "Wrong size on WeaponComponent_GetGunRecoilAlpha_Backward");
static_assert(offsetof(WeaponComponent_GetGunRecoilAlpha_Backward, ReturnValue) == 0x000000, "Member 'WeaponComponent_GetGunRecoilAlpha_Backward::ReturnValue' has a wrong offset!");

// Function POLYGON.WeaponComponent.GetGunRecoilAlpha_Pitch
// 0x0004 (0x0004 - 0x0000)
struct WeaponComponent_GetGunRecoilAlpha_Pitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_GetGunRecoilAlpha_Pitch) == 0x000004, "Wrong alignment on WeaponComponent_GetGunRecoilAlpha_Pitch");
static_assert(sizeof(WeaponComponent_GetGunRecoilAlpha_Pitch) == 0x000004, "Wrong size on WeaponComponent_GetGunRecoilAlpha_Pitch");
static_assert(offsetof(WeaponComponent_GetGunRecoilAlpha_Pitch, ReturnValue) == 0x000000, "Member 'WeaponComponent_GetGunRecoilAlpha_Pitch::ReturnValue' has a wrong offset!");

// Function POLYGON.WeaponComponent.GetGunRecoilAlpha_Roll
// 0x0004 (0x0004 - 0x0000)
struct WeaponComponent_GetGunRecoilAlpha_Roll final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_GetGunRecoilAlpha_Roll) == 0x000004, "Wrong alignment on WeaponComponent_GetGunRecoilAlpha_Roll");
static_assert(sizeof(WeaponComponent_GetGunRecoilAlpha_Roll) == 0x000004, "Wrong size on WeaponComponent_GetGunRecoilAlpha_Roll");
static_assert(offsetof(WeaponComponent_GetGunRecoilAlpha_Roll, ReturnValue) == 0x000000, "Member 'WeaponComponent_GetGunRecoilAlpha_Roll::ReturnValue' has a wrong offset!");

// Function POLYGON.WeaponComponent.GetGunRecoilAlpha_Yaw
// 0x0004 (0x0004 - 0x0000)
struct WeaponComponent_GetGunRecoilAlpha_Yaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_GetGunRecoilAlpha_Yaw) == 0x000004, "Wrong alignment on WeaponComponent_GetGunRecoilAlpha_Yaw");
static_assert(sizeof(WeaponComponent_GetGunRecoilAlpha_Yaw) == 0x000004, "Wrong size on WeaponComponent_GetGunRecoilAlpha_Yaw");
static_assert(offsetof(WeaponComponent_GetGunRecoilAlpha_Yaw, ReturnValue) == 0x000000, "Member 'WeaponComponent_GetGunRecoilAlpha_Yaw::ReturnValue' has a wrong offset!");

// Function POLYGON.WeaponComponent.GetIsShooting
// 0x0001 (0x0001 - 0x0000)
struct WeaponComponent_GetIsShooting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_GetIsShooting) == 0x000001, "Wrong alignment on WeaponComponent_GetIsShooting");
static_assert(sizeof(WeaponComponent_GetIsShooting) == 0x000001, "Wrong size on WeaponComponent_GetIsShooting");
static_assert(offsetof(WeaponComponent_GetIsShooting, ReturnValue) == 0x000000, "Member 'WeaponComponent_GetIsShooting::ReturnValue' has a wrong offset!");

// Function POLYGON.WeaponComponent.IsAiming
// 0x0001 (0x0001 - 0x0000)
struct WeaponComponent_IsAiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_IsAiming) == 0x000001, "Wrong alignment on WeaponComponent_IsAiming");
static_assert(sizeof(WeaponComponent_IsAiming) == 0x000001, "Wrong size on WeaponComponent_IsAiming");
static_assert(offsetof(WeaponComponent_IsAiming, ReturnValue) == 0x000000, "Member 'WeaponComponent_IsAiming::ReturnValue' has a wrong offset!");

// Function POLYGON.WeaponComponent.IsWantsToAiming
// 0x0001 (0x0001 - 0x0000)
struct WeaponComponent_IsWantsToAiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponComponent_IsWantsToAiming) == 0x000001, "Wrong alignment on WeaponComponent_IsWantsToAiming");
static_assert(sizeof(WeaponComponent_IsWantsToAiming) == 0x000001, "Wrong size on WeaponComponent_IsWantsToAiming");
static_assert(offsetof(WeaponComponent_IsWantsToAiming, ReturnValue) == 0x000000, "Member 'WeaponComponent_IsWantsToAiming::ReturnValue' has a wrong offset!");

}

