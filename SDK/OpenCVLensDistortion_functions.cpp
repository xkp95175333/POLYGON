#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenCVLensDistortion

#include "Basic.hpp"

#include "OpenCVLensDistortion_classes.hpp"
#include "OpenCVLensDistortion_parameters.hpp"


namespace SDK
{

// Function OpenCVLensDistortion.OpenCVLensDistortionBlueprintLibrary.CreateUndistortUVDisplacementMap
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FOpenCVLensDistortionParameters  LensParameters                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FIntPoint                        ImageSize                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CroppingFactor                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOpenCVCameraViewInfo            CameraViewInfo                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UOpenCVLensDistortionBlueprintLibrary::CreateUndistortUVDisplacementMap(const struct FOpenCVLensDistortionParameters& LensParameters, const struct FIntPoint& ImageSize, const float CroppingFactor, struct FOpenCVCameraViewInfo* CameraViewInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenCVLensDistortionBlueprintLibrary", "CreateUndistortUVDisplacementMap");

	Params::OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap Parms{};

	Parms.LensParameters = std::move(LensParameters);
	Parms.ImageSize = std::move(ImageSize);
	Parms.CroppingFactor = CroppingFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CameraViewInfo != nullptr)
		*CameraViewInfo = std::move(Parms.CameraViewInfo);

	return Parms.ReturnValue;
}


// Function OpenCVLensDistortion.OpenCVLensDistortionBlueprintLibrary.DrawDisplacementMapToRenderTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           OutputRenderTarget                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       PreComputedUndistortDisplacementMap                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOpenCVLensDistortionBlueprintLibrary::DrawDisplacementMapToRenderTarget(const class UObject* WorldContextObject, class UTextureRenderTarget2D* OutputRenderTarget, class UTexture2D* PreComputedUndistortDisplacementMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenCVLensDistortionBlueprintLibrary", "DrawDisplacementMapToRenderTarget");

	Params::OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.OutputRenderTarget = OutputRenderTarget;
	Parms.PreComputedUndistortDisplacementMap = PreComputedUndistortDisplacementMap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OpenCVLensDistortion.OpenCVLensDistortionBlueprintLibrary.EqualEqual_CompareLensDistortionModels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOpenCVLensDistortionParameters  A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FOpenCVLensDistortionParameters  B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenCVLensDistortionBlueprintLibrary::EqualEqual_CompareLensDistortionModels(const struct FOpenCVLensDistortionParameters& A, const struct FOpenCVLensDistortionParameters& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenCVLensDistortionBlueprintLibrary", "EqualEqual_CompareLensDistortionModels");

	Params::OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OpenCVLensDistortion.OpenCVLensDistortionBlueprintLibrary.NotEqual_CompareLensDistortionModels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOpenCVLensDistortionParameters  A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FOpenCVLensDistortionParameters  B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenCVLensDistortionBlueprintLibrary::NotEqual_CompareLensDistortionModels(const struct FOpenCVLensDistortionParameters& A, const struct FOpenCVLensDistortionParameters& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenCVLensDistortionBlueprintLibrary", "NotEqual_CompareLensDistortionModels");

	Params::OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

