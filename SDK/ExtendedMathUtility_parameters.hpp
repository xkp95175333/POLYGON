#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ExtendedMathUtility

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ExtendedMathUtility.ExtendedMathUtility.IsNegative_Float
// 0x0008 (0x0008 - 0x0000)
struct ExtendedMathUtility_IsNegative_Float final
{
public:
	float                                         FloatToCheck;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C5[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedMathUtility_IsNegative_Float) == 0x000004, "Wrong alignment on ExtendedMathUtility_IsNegative_Float");
static_assert(sizeof(ExtendedMathUtility_IsNegative_Float) == 0x000008, "Wrong size on ExtendedMathUtility_IsNegative_Float");
static_assert(offsetof(ExtendedMathUtility_IsNegative_Float, FloatToCheck) == 0x000000, "Member 'ExtendedMathUtility_IsNegative_Float::FloatToCheck' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_IsNegative_Float, ReturnValue) == 0x000004, "Member 'ExtendedMathUtility_IsNegative_Float::ReturnValue' has a wrong offset!");

// Function ExtendedMathUtility.ExtendedMathUtility.IsNegative_Int
// 0x0008 (0x0008 - 0x0000)
struct ExtendedMathUtility_IsNegative_Int final
{
public:
	int32                                         IntToCheck;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C6[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedMathUtility_IsNegative_Int) == 0x000004, "Wrong alignment on ExtendedMathUtility_IsNegative_Int");
static_assert(sizeof(ExtendedMathUtility_IsNegative_Int) == 0x000008, "Wrong size on ExtendedMathUtility_IsNegative_Int");
static_assert(offsetof(ExtendedMathUtility_IsNegative_Int, IntToCheck) == 0x000000, "Member 'ExtendedMathUtility_IsNegative_Int::IntToCheck' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_IsNegative_Int, ReturnValue) == 0x000004, "Member 'ExtendedMathUtility_IsNegative_Int::ReturnValue' has a wrong offset!");

// Function ExtendedMathUtility.ExtendedMathUtility.RInterpToExtended
// 0x0058 (0x0058 - 0x0000)
struct ExtendedMathUtility_RInterpToExtended final
{
public:
	struct FRotator                               Current;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Target;                                            // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed_Pitch;                                 // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed_Yaw;                                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed_Roll;                                  // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedMathUtility_RInterpToExtended) == 0x000008, "Wrong alignment on ExtendedMathUtility_RInterpToExtended");
static_assert(sizeof(ExtendedMathUtility_RInterpToExtended) == 0x000058, "Wrong size on ExtendedMathUtility_RInterpToExtended");
static_assert(offsetof(ExtendedMathUtility_RInterpToExtended, Current) == 0x000000, "Member 'ExtendedMathUtility_RInterpToExtended::Current' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_RInterpToExtended, Target) == 0x000018, "Member 'ExtendedMathUtility_RInterpToExtended::Target' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_RInterpToExtended, DeltaTime) == 0x000030, "Member 'ExtendedMathUtility_RInterpToExtended::DeltaTime' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_RInterpToExtended, InterpSpeed_Pitch) == 0x000034, "Member 'ExtendedMathUtility_RInterpToExtended::InterpSpeed_Pitch' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_RInterpToExtended, InterpSpeed_Yaw) == 0x000038, "Member 'ExtendedMathUtility_RInterpToExtended::InterpSpeed_Yaw' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_RInterpToExtended, InterpSpeed_Roll) == 0x00003C, "Member 'ExtendedMathUtility_RInterpToExtended::InterpSpeed_Roll' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_RInterpToExtended, ReturnValue) == 0x000040, "Member 'ExtendedMathUtility_RInterpToExtended::ReturnValue' has a wrong offset!");

// Function ExtendedMathUtility.ExtendedMathUtility.VInterpToExtended
// 0x0058 (0x0058 - 0x0000)
struct ExtendedMathUtility_VInterpToExtended final
{
public:
	struct FVector                                Current;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target;                                            // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed_X;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed_Y;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed_Z;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedMathUtility_VInterpToExtended) == 0x000008, "Wrong alignment on ExtendedMathUtility_VInterpToExtended");
static_assert(sizeof(ExtendedMathUtility_VInterpToExtended) == 0x000058, "Wrong size on ExtendedMathUtility_VInterpToExtended");
static_assert(offsetof(ExtendedMathUtility_VInterpToExtended, Current) == 0x000000, "Member 'ExtendedMathUtility_VInterpToExtended::Current' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_VInterpToExtended, Target) == 0x000018, "Member 'ExtendedMathUtility_VInterpToExtended::Target' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_VInterpToExtended, DeltaTime) == 0x000030, "Member 'ExtendedMathUtility_VInterpToExtended::DeltaTime' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_VInterpToExtended, InterpSpeed_X) == 0x000034, "Member 'ExtendedMathUtility_VInterpToExtended::InterpSpeed_X' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_VInterpToExtended, InterpSpeed_Y) == 0x000038, "Member 'ExtendedMathUtility_VInterpToExtended::InterpSpeed_Y' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_VInterpToExtended, InterpSpeed_Z) == 0x00003C, "Member 'ExtendedMathUtility_VInterpToExtended::InterpSpeed_Z' has a wrong offset!");
static_assert(offsetof(ExtendedMathUtility_VInterpToExtended, ReturnValue) == 0x000040, "Member 'ExtendedMathUtility_VInterpToExtended::ReturnValue' has a wrong offset!");

}

