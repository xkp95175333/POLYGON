#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Item_Gear_Watch_17

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Item_Gear_Watch_17.BP_Item_Gear_Watch_17_C.ExecuteUbergraph_BP_Item_Gear_Watch_17
// 0x0678 (0x0678 - 0x0000)
struct BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32B9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BA[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year_1;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_1;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_1;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_1;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_1;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_1;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BB[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00E8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x01D0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FDateTime                              CallFunc_Now_ReturnValue_1;                        // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year_2;                     // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_2;                    // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_2;                      // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_2;                     // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_2;                   // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_2;                   // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_2;              // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x02DC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BC[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_4;           // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x02F8(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_5;           // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year_3;                     // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_3;                    // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_3;                      // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_3;                     // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_3;                   // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_3;                   // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_3;              // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BD[0x4];                                     // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_6;           // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0350(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_7;           // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_2;  // 0x0378(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x0468(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_3;  // 0x0480(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0568(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0570(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_useFovMaterial;                       // 0x0579(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32BE[0x6];                                     // 0x057A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_4;  // 0x0580(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_1;         // 0x066C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_2;         // 0x0670(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_3;         // 0x0674(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17) == 0x000008, "Wrong alignment on BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17");
static_assert(sizeof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17) == 0x000678, "Wrong size on BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, EntryPoint) == 0x000000, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Now_ReturnValue) == 0x000008, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Year) == 0x000010, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Year' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Month) == 0x000014, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Month' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Day) == 0x000018, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Day' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Hour) == 0x00001C, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Hour' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Minute) == 0x000020, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Minute' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Second) == 0x000024, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Second' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Millisecond) == 0x000028, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Millisecond' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002C, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000030, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000040, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Year_1) == 0x000048, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Year_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Month_1) == 0x00004C, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Month_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Day_1) == 0x000050, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Day_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Hour_1) == 0x000054, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Hour_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Minute_1) == 0x000058, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Minute_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Second_1) == 0x00005C, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Second_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Millisecond_1) == 0x000060, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Millisecond_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000070, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_MakeRotator_ReturnValue) == 0x000088, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x0000A0, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000A8, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_RLerp_ReturnValue) == 0x0000B0, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_MakeRotator_ReturnValue_1) == 0x0000D0, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000E8, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0001D0, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Now_ReturnValue_1) == 0x0002B8, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Now_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Year_2) == 0x0002C0, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Year_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Month_2) == 0x0002C4, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Month_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Day_2) == 0x0002C8, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Day_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Hour_2) == 0x0002CC, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Hour_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Minute_2) == 0x0002D0, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Minute_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Second_2) == 0x0002D4, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Second_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Millisecond_2) == 0x0002D8, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Millisecond_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, K2Node_CreateDelegate_OutputDelegate) == 0x0002DC, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Conv_IntToDouble_ReturnValue_4) == 0x0002F0, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Conv_IntToDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0002F8, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000300, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Conv_IntToDouble_ReturnValue_5) == 0x000308, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Conv_IntToDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Year_3) == 0x000310, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Year_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Month_3) == 0x000314, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Month_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Day_3) == 0x000318, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Day_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Hour_3) == 0x00031C, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Hour_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Minute_3) == 0x000320, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Minute_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Second_3) == 0x000324, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Second_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_BreakDateTime_Millisecond_3) == 0x000328, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_BreakDateTime_Millisecond_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000330, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Conv_IntToDouble_ReturnValue_6) == 0x000338, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Conv_IntToDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000340, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x000348, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_MakeRotator_ReturnValue_2) == 0x000350, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Conv_IntToDouble_ReturnValue_7) == 0x000368, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Conv_IntToDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000370, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_K2_SetRelativeRotation_SweepHitResult_2) == 0x000378, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_K2_SetRelativeRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000460, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_MakeRotator_ReturnValue_3) == 0x000468, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_K2_SetRelativeRotation_SweepHitResult_3) == 0x000480, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_K2_SetRelativeRotation_SweepHitResult_3' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_GetPlayerController_ReturnValue) == 0x000568, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_GetOwner_ReturnValue) == 0x000570, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000578, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, K2Node_Event_useFovMaterial) == 0x000579, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::K2Node_Event_useFovMaterial' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_K2_SetRelativeRotation_SweepHitResult_4) == 0x000580, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_K2_SetRelativeRotation_SweepHitResult_4' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000668, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_MakeRotator_Pitch_ImplicitCast_1) == 0x00066C, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_MakeRotator_Pitch_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_MakeRotator_Pitch_ImplicitCast_2) == 0x000670, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_MakeRotator_Pitch_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17, CallFunc_MakeRotator_Pitch_ImplicitCast_3) == 0x000674, "Member 'BP_Item_Gear_Watch_17_C_ExecuteUbergraph_BP_Item_Gear_Watch_17::CallFunc_MakeRotator_Pitch_ImplicitCast_3' has a wrong offset!");

// Function BP_Item_Gear_Watch_17.BP_Item_Gear_Watch_17_C.SetCorrectiveFovMaterial
// 0x0001 (0x0001 - 0x0000)
struct BP_Item_Gear_Watch_17_C_SetCorrectiveFovMaterial final
{
public:
	bool                                          UseFovMaterial;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Item_Gear_Watch_17_C_SetCorrectiveFovMaterial) == 0x000001, "Wrong alignment on BP_Item_Gear_Watch_17_C_SetCorrectiveFovMaterial");
static_assert(sizeof(BP_Item_Gear_Watch_17_C_SetCorrectiveFovMaterial) == 0x000001, "Wrong size on BP_Item_Gear_Watch_17_C_SetCorrectiveFovMaterial");
static_assert(offsetof(BP_Item_Gear_Watch_17_C_SetCorrectiveFovMaterial, UseFovMaterial) == 0x000000, "Member 'BP_Item_Gear_Watch_17_C_SetCorrectiveFovMaterial::UseFovMaterial' has a wrong offset!");

}

