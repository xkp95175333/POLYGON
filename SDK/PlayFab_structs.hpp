#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayFab

#include "Basic.hpp"


namespace SDK
{

// Enum PlayFab.EStatisticResetIntervalOption
// NumValues: 0x0006
enum class EStatisticResetIntervalOption : uint8
{
	Pfenum_Never                             = 0,
	Pfenum_Hour                              = 1,
	Pfenum_Day                               = 2,
	Pfenum_Week                              = 3,
	Pfenum_Month                             = 4,
	Pfenum_MAX                               = 5,
};

// Enum PlayFab.EStatisticAggregationMethod
// NumValues: 0x0004
enum class EStatisticAggregationMethod : uint8
{
	Pfenum_Last                              = 0,
	Pfenum_Min                               = 1,
	Pfenum_Max                               = 2,
	Pfenum_Sum                               = 3,
};

// Enum PlayFab.ERegion
// NumValues: 0x0008
enum class ERegion : uint8
{
	Pfenum_USCentral                         = 0,
	Pfenum_USEast                            = 1,
	Pfenum_EUWest                            = 2,
	Pfenum_Singapore                         = 3,
	Pfenum_Japan                             = 4,
	Pfenum_Brazil                            = 5,
	Pfenum_Australia                         = 6,
	Pfenum_MAX                               = 7,
};

// Enum PlayFab.EPfSourceType
// NumValues: 0x0008
enum class EPfSourceType : uint8
{
	Pfenum_Admin                             = 0,
	Pfenum_BackEnd                           = 1,
	Pfenum_GameClient                        = 2,
	Pfenum_GameServer                        = 3,
	Pfenum_Partner                           = 4,
	Pfenum_Custom                            = 5,
	Pfenum_API                               = 6,
	Pfenum_MAX                               = 7,
};

// Enum PlayFab.EGameBuildStatus
// NumValues: 0x0006
enum class EGameBuildStatus : uint8
{
	Pfenum_Available                         = 0,
	Pfenum_Validating                        = 1,
	Pfenum_InvalidBuildPackage               = 2,
	Pfenum_Processing                        = 3,
	Pfenum_FailedToProcess                   = 4,
	Pfenum_MAX                               = 5,
};

// Enum PlayFab.EAuthTokenType
// NumValues: 0x0002
enum class EAuthTokenType : uint8
{
	Pfenum_Email                             = 0,
	Pfenum_MAX                               = 1,
};

// Enum PlayFab.ETaskInstanceStatus
// NumValues: 0x0007
enum class ETaskInstanceStatus : uint8
{
	Pfenum_Succeeded                         = 0,
	Pfenum_Starting                          = 1,
	Pfenum_InProgress                        = 2,
	Pfenum_Failed                            = 3,
	Pfenum_Aborted                           = 4,
	Pfenum_Stalled                           = 5,
	Pfenum_MAX                               = 6,
};

// Enum PlayFab.EResolutionOutcome
// NumValues: 0x0004
enum class EResolutionOutcome : uint8
{
	Pfenum_Revoke                            = 0,
	Pfenum_Reinstate                         = 1,
	Pfenum_Manual                            = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.EPushSetupPlatform
// NumValues: 0x0004
enum class EPushSetupPlatform : uint8
{
	Pfenum_GCM                               = 0,
	Pfenum_APNS                              = 1,
	Pfenum_APNS_SANDBOX                      = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.EScheduledTaskType
// NumValues: 0x0005
enum class EScheduledTaskType : uint8
{
	Pfenum_CloudScript                       = 0,
	Pfenum_ActionsOnPlayerSegment            = 1,
	Pfenum_CloudScriptAzureFunctions         = 2,
	Pfenum_InsightsScheduledScaling          = 3,
	Pfenum_MAX                               = 4,
};

// Enum PlayFab.EUserDataPermission
// NumValues: 0x0003
enum class EUserDataPermission : uint8
{
	Pfenum_Private                           = 0,
	Pfenum_Public                            = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.ELoginIdentityProvider
// NumValues: 0x0017
enum class ELoginIdentityProvider : uint8
{
	Pfenum_Unknown                           = 0,
	Pfenum_PlayFab                           = 1,
	Pfenum_Custom                            = 2,
	Pfenum_GameCenter                        = 3,
	Pfenum_GooglePlay                        = 4,
	Pfenum_Steam                             = 5,
	Pfenum_XBoxLive                          = 6,
	Pfenum_PSN                               = 7,
	Pfenum_Kongregate                        = 8,
	Pfenum_Facebook                          = 9,
	Pfenum_IOSDevice                         = 10,
	Pfenum_AndroidDevice                     = 11,
	Pfenum_Twitch                            = 12,
	Pfenum_WindowsHello                      = 13,
	Pfenum_GameServer                        = 14,
	Pfenum_CustomServer                      = 15,
	Pfenum_NintendoSwitch                    = 16,
	Pfenum_FacebookInstantGames              = 17,
	Pfenum_OpenIdConnect                     = 18,
	Pfenum_Apple                             = 19,
	Pfenum_NintendoSwitchAccount             = 20,
	Pfenum_GooglePlayGames                   = 21,
	Pfenum_MAX                               = 22,
};

// Enum PlayFab.EIdentifiedDeviceType
// NumValues: 0x0004
enum class EIdentifiedDeviceType : uint8
{
	Pfenum_Unknown                           = 0,
	Pfenum_XboxOne                           = 1,
	Pfenum_Scarlett                          = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.EMatchmakeStatus
// NumValues: 0x0006
enum class EMatchmakeStatus : uint8
{
	Pfenum_Complete                          = 0,
	Pfenum_Waiting                           = 1,
	Pfenum_GameNotFound                      = 2,
	Pfenum_NoAvailableSlots                  = 3,
	Pfenum_SessionClosed                     = 4,
	Pfenum_MAX                               = 5,
};

// Enum PlayFab.ETransactionStatus
// NumValues: 0x0015
enum class ETransactionStatus : uint8
{
	Pfenum_CreateCart                        = 0,
	Pfenum_Init                              = 1,
	Pfenum_Approved                          = 2,
	Pfenum_Succeeded                         = 3,
	Pfenum_FailedByProvider                  = 4,
	Pfenum_DisputePending                    = 5,
	Pfenum_RefundPending                     = 6,
	Pfenum_Refunded                          = 7,
	Pfenum_RefundFailed                      = 8,
	Pfenum_ChargedBack                       = 9,
	Pfenum_FailedByUber                      = 10,
	Pfenum_FailedByPlayFab                   = 11,
	Pfenum_Revoked                           = 12,
	Pfenum_TradePending                      = 13,
	Pfenum_Traded                            = 14,
	Pfenum_Upgraded                          = 15,
	Pfenum_StackPending                      = 16,
	Pfenum_Stacked                           = 17,
	Pfenum_Other                             = 18,
	Pfenum_Failed                            = 19,
	Pfenum_MAX                               = 20,
};

// Enum PlayFab.ECloudScriptRevisionOption
// NumValues: 0x0004
enum class ECloudScriptRevisionOption : uint8
{
	Pfenum_Live                              = 0,
	Pfenum_Latest                            = 1,
	Pfenum_Specific                          = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.EExternalFriendSources
// NumValues: 0x0007
enum class EExternalFriendSources : uint8
{
	Pfenum_None                              = 0,
	Pfenum_Steam                             = 1,
	Pfenum_Facebook                          = 2,
	Pfenum_Xbox                              = 3,
	Pfenum_Psn                               = 4,
	Pfenum_All                               = 5,
	Pfenum_MAX                               = 6,
};

// Enum PlayFab.ETradeStatus
// NumValues: 0x0008
enum class ETradeStatus : uint8
{
	Pfenum_Invalid                           = 0,
	Pfenum_Opening                           = 1,
	Pfenum_Open                              = 2,
	Pfenum_Accepting                         = 3,
	Pfenum_Accepted                          = 4,
	Pfenum_Filled                            = 5,
	Pfenum_Cancelled                         = 6,
	Pfenum_MAX                               = 7,
};

// Enum PlayFab.EAdActivity
// NumValues: 0x0005
enum class EAdActivity : uint8
{
	Pfenum_Opened                            = 0,
	Pfenum_Closed                            = 1,
	Pfenum_Start                             = 2,
	Pfenum_End                               = 3,
	Pfenum_MAX                               = 4,
};

// Enum PlayFab.EPublishResult
// NumValues: 0x0006
enum class EPublishResult : uint8
{
	Pfenum_Unknown                           = 0,
	Pfenum_Pending                           = 1,
	Pfenum_Succeeded                         = 2,
	Pfenum_Failed                            = 3,
	Pfenum_Canceled                          = 4,
	Pfenum_MAX                               = 5,
};

// Enum PlayFab.EConcernCategory
// NumValues: 0x000B
enum class EConcernCategory : uint8
{
	Pfenum_None                              = 0,
	Pfenum_OffensiveContent                  = 1,
	Pfenum_ChildExploitation                 = 2,
	Pfenum_MalwareOrVirus                    = 3,
	Pfenum_PrivacyConcerns                   = 4,
	Pfenum_MisleadingApp                     = 5,
	Pfenum_PoorPerformance                   = 6,
	Pfenum_ReviewResponse                    = 7,
	Pfenum_SpamAdvertising                   = 8,
	Pfenum_Profanity                         = 9,
	Pfenum_MAX                               = 10,
};

// Enum PlayFab.EModerationStatus
// NumValues: 0x0005
enum class EModerationStatus : uint8
{
	Pfenum_Unknown                           = 0,
	Pfenum_AwaitingModeration                = 1,
	Pfenum_Approved                          = 2,
	Pfenum_Rejected                          = 3,
	Pfenum_MAX                               = 4,
};

// Enum PlayFab.EHelpfulnessVote
// NumValues: 0x0004
enum class EHelpfulnessVote : uint8
{
	Pfenum_None                              = 0,
	Pfenum_UnHelpful                         = 1,
	Pfenum_Helpful                           = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.EExperimentType
// NumValues: 0x0003
enum class EExperimentType : uint8
{
	Pfenum_Active                            = 0,
	Pfenum_Snapshot                          = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EOperationTypes
// NumValues: 0x0005
enum class EOperationTypes : uint8
{
	Pfenum_Created                           = 0,
	Pfenum_Updated                           = 1,
	Pfenum_Deleted                           = 2,
	Pfenum_None                              = 3,
	Pfenum_MAX                               = 4,
};

// Enum PlayFab.EAzureVmSize
// NumValues: 0x0046
enum class EAzureVmSize : uint8
{
	Pfenum_Standard_A1                       = 0,
	Pfenum_Standard_A2                       = 1,
	Pfenum_Standard_A3                       = 2,
	Pfenum_Standard_A4                       = 3,
	Pfenum_Standard_A1_v2                    = 4,
	Pfenum_Standard_A2_v2                    = 5,
	Pfenum_Standard_A4_v2                    = 6,
	Pfenum_Standard_A8_v2                    = 7,
	Pfenum_Standard_D1_v2                    = 8,
	Pfenum_Standard_D2_v2                    = 9,
	Pfenum_Standard_D3_v2                    = 10,
	Pfenum_Standard_D4_v2                    = 11,
	Pfenum_Standard_D5_v2                    = 12,
	Pfenum_Standard_D2_v3                    = 13,
	Pfenum_Standard_D4_v3                    = 14,
	Pfenum_Standard_D8_v3                    = 15,
	Pfenum_Standard_D16_v3                   = 16,
	Pfenum_Standard_F1                       = 17,
	Pfenum_Standard_F2                       = 18,
	Pfenum_Standard_F4                       = 19,
	Pfenum_Standard_F8                       = 20,
	Pfenum_Standard_F16                      = 21,
	Pfenum_Standard_F2s_v2                   = 22,
	Pfenum_Standard_F4s_v2                   = 23,
	Pfenum_Standard_F8s_v2                   = 24,
	Pfenum_Standard_F16s_v2                  = 25,
	Pfenum_Standard_D2as_v4                  = 26,
	Pfenum_Standard_D4as_v4                  = 27,
	Pfenum_Standard_D8as_v4                  = 28,
	Pfenum_Standard_D16as_v4                 = 29,
	Pfenum_Standard_D2a_v4                   = 30,
	Pfenum_Standard_D4a_v4                   = 31,
	Pfenum_Standard_D8a_v4                   = 32,
	Pfenum_Standard_D16a_v4                  = 33,
	Pfenum_Standard_D2ads_v5                 = 34,
	Pfenum_Standard_D4ads_v5                 = 35,
	Pfenum_Standard_D8ads_v5                 = 36,
	Pfenum_Standard_D16ads_v5                = 37,
	Pfenum_Standard_E2a_v4                   = 38,
	Pfenum_Standard_E4a_v4                   = 39,
	Pfenum_Standard_E8a_v4                   = 40,
	Pfenum_Standard_E16a_v4                  = 41,
	Pfenum_Standard_E2as_v4                  = 42,
	Pfenum_Standard_E4as_v4                  = 43,
	Pfenum_Standard_E8as_v4                  = 44,
	Pfenum_Standard_E16as_v4                 = 45,
	Pfenum_Standard_D2s_v3                   = 46,
	Pfenum_Standard_D4s_v3                   = 47,
	Pfenum_Standard_D8s_v3                   = 48,
	Pfenum_Standard_D16s_v3                  = 49,
	Pfenum_Standard_DS1_v2                   = 50,
	Pfenum_Standard_DS2_v2                   = 51,
	Pfenum_Standard_DS3_v2                   = 52,
	Pfenum_Standard_DS4_v2                   = 53,
	Pfenum_Standard_DS5_v2                   = 54,
	Pfenum_Standard_NC4as_T4_v3              = 55,
	Pfenum_Standard_D2d_v4                   = 56,
	Pfenum_Standard_D4d_v4                   = 57,
	Pfenum_Standard_D8d_v4                   = 58,
	Pfenum_Standard_D16d_v4                  = 59,
	Pfenum_Standard_D2ds_v4                  = 60,
	Pfenum_Standard_D4ds_v4                  = 61,
	Pfenum_Standard_D8ds_v4                  = 62,
	Pfenum_Standard_D16ds_v4                 = 63,
	Pfenum_Standard_HB120_16rs_v3            = 64,
	Pfenum_Standard_HB120_32rs_v3            = 65,
	Pfenum_Standard_HB120_64rs_v3            = 66,
	Pfenum_Standard_HB120_96rs_v3            = 67,
	Pfenum_Standard_HB120rs_v3               = 68,
	Pfenum_Standard_MAX                      = 69,
};

// Enum PlayFab.EContainerFlavor
// NumValues: 0x0005
enum class EContainerFlavor : uint8
{
	Pfenum_ManagedWindowsServerCore          = 0,
	Pfenum_CustomLinux                       = 1,
	Pfenum_ManagedWindowsServerCorePreview   = 2,
	Pfenum_Invalid                           = 3,
	Pfenum_MAX                               = 4,
};

// Enum PlayFab.EOwnerMigrationPolicy
// NumValues: 0x0005
enum class EOwnerMigrationPolicy : uint8
{
	Pfenum_None                              = 0,
	Pfenum_Automatic                         = 1,
	Pfenum_Manual                            = 2,
	Pfenum_Server                            = 3,
	Pfenum_MAX                               = 4,
};

// Enum PlayFab.EAccessPolicy
// NumValues: 0x0004
enum class EAccessPolicy : uint8
{
	Pfenum_Public                            = 0,
	Pfenum_Friends                           = 1,
	Pfenum_Private                           = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.ETitleMultiplayerServerEnabledStatus
// NumValues: 0x0004
enum class ETitleMultiplayerServerEnabledStatus : uint8
{
	Pfenum_Initializing                      = 0,
	Pfenum_Enabled                           = 1,
	Pfenum_Disabled                          = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.ESubscriptionType
// NumValues: 0x0003
enum class ESubscriptionType : uint8
{
	Pfenum_LobbyChange                       = 0,
	Pfenum_LobbyInvite                       = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EMembershipLock
// NumValues: 0x0003
enum class EMembershipLock : uint8
{
	Pfenum_Unlocked                          = 0,
	Pfenum_Locked                            = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EPlayerConnectionState
// NumValues: 0x0005
enum class EPlayerConnectionState : uint8
{
	Pfenum_Unassigned                        = 0,
	Pfenum_Connecting                        = 1,
	Pfenum_Participating                     = 2,
	Pfenum_Participated                      = 3,
	Pfenum_MAX                               = 4,
};

// Enum PlayFab.EGameInstanceState
// NumValues: 0x0003
enum class EGameInstanceState : uint8
{
	Pfenum_Open                              = 0,
	Pfenum_Closed                            = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EChurnRiskLevel
// NumValues: 0x0005
enum class EChurnRiskLevel : uint8
{
	Pfenum_NoData                            = 0,
	Pfenum_LowRisk                           = 1,
	Pfenum_MediumRisk                        = 2,
	Pfenum_HighRisk                          = 3,
	Pfenum_MAX                               = 4,
};

// Enum PlayFab.EConditionals
// NumValues: 0x0004
enum class EConditionals : uint8
{
	Pfenum_Any                               = 0,
	Pfenum_True                              = 1,
	Pfenum_False                             = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.EContinentCode
// NumValues: 0x0008
enum class EContinentCode : uint8
{
	Pfenum_AF                                = 0,
	Pfenum_AN                                = 1,
	Pfenum_AS                                = 2,
	Pfenum_EU                                = 3,
	Pfenum_NA                                = 4,
	Pfenum_OC                                = 5,
	Pfenum_SA                                = 6,
	Pfenum_MAX                               = 7,
};

// Enum PlayFab.ECountryCode
// NumValues: 0x00FA
enum class ECountryCode : uint8
{
	Pfenum_AF                                = 0,
	Pfenum_AX                                = 1,
	Pfenum_AL                                = 2,
	Pfenum_DZ                                = 3,
	Pfenum_AS                                = 4,
	Pfenum_AD                                = 5,
	Pfenum_AO                                = 6,
	Pfenum_AI                                = 7,
	Pfenum_AQ                                = 8,
	Pfenum_AG                                = 9,
	Pfenum_AR                                = 10,
	Pfenum_AM                                = 11,
	Pfenum_AW                                = 12,
	Pfenum_AU                                = 13,
	Pfenum_AT                                = 14,
	Pfenum_AZ                                = 15,
	Pfenum_BS                                = 16,
	Pfenum_BH                                = 17,
	Pfenum_BD                                = 18,
	Pfenum_BB                                = 19,
	Pfenum_BY                                = 20,
	Pfenum_BE                                = 21,
	Pfenum_BZ                                = 22,
	Pfenum_BJ                                = 23,
	Pfenum_BM                                = 24,
	Pfenum_BT                                = 25,
	Pfenum_BO                                = 26,
	Pfenum_BQ                                = 27,
	Pfenum_BA                                = 28,
	Pfenum_BW                                = 29,
	Pfenum_BV                                = 30,
	Pfenum_BR                                = 31,
	Pfenum_IO                                = 32,
	Pfenum_BN                                = 33,
	Pfenum_BG                                = 34,
	Pfenum_BF                                = 35,
	Pfenum_BI                                = 36,
	Pfenum_KH                                = 37,
	Pfenum_CM                                = 38,
	Pfenum_CA                                = 39,
	Pfenum_CV                                = 40,
	Pfenum_KY                                = 41,
	Pfenum_CF                                = 42,
	Pfenum_TD                                = 43,
	Pfenum_CL                                = 44,
	Pfenum_CN                                = 45,
	Pfenum_CX                                = 46,
	Pfenum_CC                                = 47,
	Pfenum_CO                                = 48,
	Pfenum_KM                                = 49,
	Pfenum_CG                                = 50,
	Pfenum_CD                                = 51,
	Pfenum_CK                                = 52,
	Pfenum_CR                                = 53,
	Pfenum_CI                                = 54,
	Pfenum_HR                                = 55,
	Pfenum_CU                                = 56,
	Pfenum_CW                                = 57,
	Pfenum_CY                                = 58,
	Pfenum_CZ                                = 59,
	Pfenum_DK                                = 60,
	Pfenum_DJ                                = 61,
	Pfenum_DM                                = 62,
	Pfenum_DO                                = 63,
	Pfenum_EC                                = 64,
	Pfenum_EG                                = 65,
	Pfenum_SV                                = 66,
	Pfenum_GQ                                = 67,
	Pfenum_ER                                = 68,
	Pfenum_EE                                = 69,
	Pfenum_ET                                = 70,
	Pfenum_FK                                = 71,
	Pfenum_FO                                = 72,
	Pfenum_FJ                                = 73,
	Pfenum_FI                                = 74,
	Pfenum_FR                                = 75,
	Pfenum_GF                                = 76,
	Pfenum_PF                                = 77,
	Pfenum_TF                                = 78,
	Pfenum_GA                                = 79,
	Pfenum_GM                                = 80,
	Pfenum_GE                                = 81,
	Pfenum_DE                                = 82,
	Pfenum_GH                                = 83,
	Pfenum_GI                                = 84,
	Pfenum_GR                                = 85,
	Pfenum_GL                                = 86,
	Pfenum_GD                                = 87,
	Pfenum_GP                                = 88,
	Pfenum_GU                                = 89,
	Pfenum_GT                                = 90,
	Pfenum_GG                                = 91,
	Pfenum_GN                                = 92,
	Pfenum_GW                                = 93,
	Pfenum_GY                                = 94,
	Pfenum_HT                                = 95,
	Pfenum_HM                                = 96,
	Pfenum_VA                                = 97,
	Pfenum_HN                                = 98,
	Pfenum_HK                                = 99,
	Pfenum_HU                                = 100,
	Pfenum_IS                                = 101,
	Pfenum_IN                                = 102,
	Pfenum_ID                                = 103,
	Pfenum_IR                                = 104,
	Pfenum_IQ                                = 105,
	Pfenum_IE                                = 106,
	Pfenum_IM                                = 107,
	Pfenum_IL                                = 108,
	Pfenum_IT                                = 109,
	Pfenum_JM                                = 110,
	Pfenum_JP                                = 111,
	Pfenum_JE                                = 112,
	Pfenum_JO                                = 113,
	Pfenum_KZ                                = 114,
	Pfenum_KE                                = 115,
	Pfenum_KI                                = 116,
	Pfenum_KP                                = 117,
	Pfenum_KR                                = 118,
	Pfenum_KW                                = 119,
	Pfenum_KG                                = 120,
	Pfenum_LA                                = 121,
	Pfenum_LV                                = 122,
	Pfenum_LB                                = 123,
	Pfenum_LS                                = 124,
	Pfenum_LR                                = 125,
	Pfenum_LY                                = 126,
	Pfenum_LI                                = 127,
	Pfenum_LT                                = 128,
	Pfenum_LU                                = 129,
	Pfenum_MO                                = 130,
	Pfenum_MK                                = 131,
	Pfenum_MG                                = 132,
	Pfenum_MW                                = 133,
	Pfenum_MY                                = 134,
	Pfenum_MV                                = 135,
	Pfenum_ML                                = 136,
	Pfenum_MT                                = 137,
	Pfenum_MH                                = 138,
	Pfenum_MQ                                = 139,
	Pfenum_MR                                = 140,
	Pfenum_MU                                = 141,
	Pfenum_YT                                = 142,
	Pfenum_MX                                = 143,
	Pfenum_FM                                = 144,
	Pfenum_MD                                = 145,
	Pfenum_MC                                = 146,
	Pfenum_MN                                = 147,
	Pfenum_ME                                = 148,
	Pfenum_MS                                = 149,
	Pfenum_MA                                = 150,
	Pfenum_MZ                                = 151,
	Pfenum_MM                                = 152,
	Pfenum_NA                                = 153,
	Pfenum_NR                                = 154,
	Pfenum_NP                                = 155,
	Pfenum_NL                                = 156,
	Pfenum_NC                                = 157,
	Pfenum_NZ                                = 158,
	Pfenum_NI                                = 159,
	Pfenum_NE                                = 160,
	Pfenum_NG                                = 161,
	Pfenum_NU                                = 162,
	Pfenum_NF                                = 163,
	Pfenum_MP                                = 164,
	Pfenum_NO                                = 165,
	Pfenum_OM                                = 166,
	Pfenum_PK                                = 167,
	Pfenum_PW                                = 168,
	Pfenum_PS                                = 169,
	Pfenum_PA                                = 170,
	Pfenum_PG                                = 171,
	Pfenum_PY                                = 172,
	Pfenum_PE                                = 173,
	Pfenum_PH                                = 174,
	Pfenum_PN                                = 175,
	Pfenum_PL                                = 176,
	Pfenum_PT                                = 177,
	Pfenum_PR                                = 178,
	Pfenum_QA                                = 179,
	Pfenum_RE                                = 180,
	Pfenum_RO                                = 181,
	Pfenum_RU                                = 182,
	Pfenum_RW                                = 183,
	Pfenum_BL                                = 184,
	Pfenum_SH                                = 185,
	Pfenum_KN                                = 186,
	Pfenum_LC                                = 187,
	Pfenum_MF                                = 188,
	Pfenum_PM                                = 189,
	Pfenum_VC                                = 190,
	Pfenum_WS                                = 191,
	Pfenum_SM                                = 192,
	Pfenum_ST                                = 193,
	Pfenum_SA                                = 194,
	Pfenum_SN                                = 195,
	Pfenum_RS                                = 196,
	Pfenum_SC                                = 197,
	Pfenum_SL                                = 198,
	Pfenum_SG                                = 199,
	Pfenum_SX                                = 200,
	Pfenum_SK                                = 201,
	Pfenum_SI                                = 202,
	Pfenum_SB                                = 203,
	Pfenum_SO                                = 204,
	Pfenum_ZA                                = 205,
	Pfenum_GS                                = 206,
	Pfenum_SS                                = 207,
	Pfenum_ES                                = 208,
	Pfenum_LK                                = 209,
	Pfenum_SD                                = 210,
	Pfenum_SR                                = 211,
	Pfenum_SJ                                = 212,
	Pfenum_SZ                                = 213,
	Pfenum_SE                                = 214,
	Pfenum_CH                                = 215,
	Pfenum_SY                                = 216,
	Pfenum_TW                                = 217,
	Pfenum_TJ                                = 218,
	Pfenum_TZ                                = 219,
	Pfenum_TH                                = 220,
	Pfenum_TL                                = 221,
	Pfenum_TG                                = 222,
	Pfenum_TK                                = 223,
	Pfenum_TO                                = 224,
	Pfenum_TT                                = 225,
	Pfenum_TN                                = 226,
	Pfenum_TR                                = 227,
	Pfenum_TM                                = 228,
	Pfenum_TC                                = 229,
	Pfenum_TV                                = 230,
	Pfenum_UG                                = 231,
	Pfenum_UA                                = 232,
	Pfenum_AE                                = 233,
	Pfenum_GB                                = 234,
	Pfenum_US                                = 235,
	Pfenum_UM                                = 236,
	Pfenum_UY                                = 237,
	Pfenum_UZ                                = 238,
	Pfenum_VU                                = 239,
	Pfenum_VE                                = 240,
	Pfenum_VN                                = 241,
	Pfenum_VG                                = 242,
	Pfenum_VI                                = 243,
	Pfenum_WF                                = 244,
	Pfenum_EH                                = 245,
	Pfenum_YE                                = 246,
	Pfenum_ZM                                = 247,
	Pfenum_ZW                                = 248,
	Pfenum_MAX                               = 249,
};

// Enum PlayFab.ECurrency
// NumValues: 0x00A3
enum class ECurrency : uint8
{
	Pfenum_AED                               = 0,
	Pfenum_AFN                               = 1,
	Pfenum_ALL                               = 2,
	Pfenum_AMD                               = 3,
	Pfenum_ANG                               = 4,
	Pfenum_AOA                               = 5,
	Pfenum_ARS                               = 6,
	Pfenum_AUD                               = 7,
	Pfenum_AWG                               = 8,
	Pfenum_AZN                               = 9,
	Pfenum_BAM                               = 10,
	Pfenum_BBD                               = 11,
	Pfenum_BDT                               = 12,
	Pfenum_BGN                               = 13,
	Pfenum_BHD                               = 14,
	Pfenum_BIF                               = 15,
	Pfenum_BMD                               = 16,
	Pfenum_BND                               = 17,
	Pfenum_BOB                               = 18,
	Pfenum_BRL                               = 19,
	Pfenum_BSD                               = 20,
	Pfenum_BTN                               = 21,
	Pfenum_BWP                               = 22,
	Pfenum_BYR                               = 23,
	Pfenum_BZD                               = 24,
	Pfenum_CAD                               = 25,
	Pfenum_CDF                               = 26,
	Pfenum_CHF                               = 27,
	Pfenum_CLP                               = 28,
	Pfenum_CNY                               = 29,
	Pfenum_COP                               = 30,
	Pfenum_CRC                               = 31,
	Pfenum_CUC                               = 32,
	Pfenum_CUP                               = 33,
	Pfenum_CVE                               = 34,
	Pfenum_CZK                               = 35,
	Pfenum_DJF                               = 36,
	Pfenum_DKK                               = 37,
	Pfenum_DOP                               = 38,
	Pfenum_DZD                               = 39,
	Pfenum_EGP                               = 40,
	Pfenum_ERN                               = 41,
	Pfenum_ETB                               = 42,
	Pfenum_EUR                               = 43,
	Pfenum_FJD                               = 44,
	Pfenum_FKP                               = 45,
	Pfenum_GBP                               = 46,
	Pfenum_GEL                               = 47,
	Pfenum_GGP                               = 48,
	Pfenum_GHS                               = 49,
	Pfenum_GIP                               = 50,
	Pfenum_GMD                               = 51,
	Pfenum_GNF                               = 52,
	Pfenum_GTQ                               = 53,
	Pfenum_GYD                               = 54,
	Pfenum_HKD                               = 55,
	Pfenum_HNL                               = 56,
	Pfenum_HRK                               = 57,
	Pfenum_HTG                               = 58,
	Pfenum_HUF                               = 59,
	Pfenum_IDR                               = 60,
	Pfenum_ILS                               = 61,
	Pfenum_IMP                               = 62,
	Pfenum_INR                               = 63,
	Pfenum_IQD                               = 64,
	Pfenum_IRR                               = 65,
	Pfenum_ISK                               = 66,
	Pfenum_JEP                               = 67,
	Pfenum_JMD                               = 68,
	Pfenum_JOD                               = 69,
	Pfenum_JPY                               = 70,
	Pfenum_KES                               = 71,
	Pfenum_KGS                               = 72,
	Pfenum_KHR                               = 73,
	Pfenum_KMF                               = 74,
	Pfenum_KPW                               = 75,
	Pfenum_KRW                               = 76,
	Pfenum_KWD                               = 77,
	Pfenum_KYD                               = 78,
	Pfenum_KZT                               = 79,
	Pfenum_LAK                               = 80,
	Pfenum_LBP                               = 81,
	Pfenum_LKR                               = 82,
	Pfenum_LRD                               = 83,
	Pfenum_LSL                               = 84,
	Pfenum_LYD                               = 85,
	Pfenum_MAD                               = 86,
	Pfenum_MDL                               = 87,
	Pfenum_MGA                               = 88,
	Pfenum_MKD                               = 89,
	Pfenum_MMK                               = 90,
	Pfenum_MNT                               = 91,
	Pfenum_MOP                               = 92,
	Pfenum_MRO                               = 93,
	Pfenum_MUR                               = 94,
	Pfenum_MVR                               = 95,
	Pfenum_MWK                               = 96,
	Pfenum_MXN                               = 97,
	Pfenum_MYR                               = 98,
	Pfenum_MZN                               = 99,
	Pfenum_NAD                               = 100,
	Pfenum_NGN                               = 101,
	Pfenum_NIO                               = 102,
	Pfenum_NOK                               = 103,
	Pfenum_NPR                               = 104,
	Pfenum_NZD                               = 105,
	Pfenum_OMR                               = 106,
	Pfenum_PAB                               = 107,
	Pfenum_PEN                               = 108,
	Pfenum_PGK                               = 109,
	Pfenum_PHP                               = 110,
	Pfenum_PKR                               = 111,
	Pfenum_PLN                               = 112,
	Pfenum_PYG                               = 113,
	Pfenum_QAR                               = 114,
	Pfenum_RON                               = 115,
	Pfenum_RSD                               = 116,
	Pfenum_RUB                               = 117,
	Pfenum_RWF                               = 118,
	Pfenum_SAR                               = 119,
	Pfenum_SBD                               = 120,
	Pfenum_SCR                               = 121,
	Pfenum_SDG                               = 122,
	Pfenum_SEK                               = 123,
	Pfenum_SGD                               = 124,
	Pfenum_SHP                               = 125,
	Pfenum_SLL                               = 126,
	Pfenum_SOS                               = 127,
	Pfenum_SPL                               = 128,
	Pfenum_SRD                               = 129,
	Pfenum_STD                               = 130,
	Pfenum_SVC                               = 131,
	Pfenum_SYP                               = 132,
	Pfenum_SZL                               = 133,
	Pfenum_THB                               = 134,
	Pfenum_TJS                               = 135,
	Pfenum_TMT                               = 136,
	Pfenum_TND                               = 137,
	Pfenum_TOP                               = 138,
	Pfenum_TRY                               = 139,
	Pfenum_TTD                               = 140,
	Pfenum_TVD                               = 141,
	Pfenum_TWD                               = 142,
	Pfenum_TZS                               = 143,
	Pfenum_UAH                               = 144,
	Pfenum_UGX                               = 145,
	Pfenum_USD                               = 146,
	Pfenum_UYU                               = 147,
	Pfenum_UZS                               = 148,
	Pfenum_VEF                               = 149,
	Pfenum_VND                               = 150,
	Pfenum_VUV                               = 151,
	Pfenum_WST                               = 152,
	Pfenum_XAF                               = 153,
	Pfenum_XCD                               = 154,
	Pfenum_XDR                               = 155,
	Pfenum_XOF                               = 156,
	Pfenum_XPF                               = 157,
	Pfenum_YER                               = 158,
	Pfenum_ZAR                               = 159,
	Pfenum_ZMW                               = 160,
	Pfenum_ZWD                               = 161,
	Pfenum_MAX                               = 162,
};

// Enum PlayFab.EEffectType
// NumValues: 0x0003
enum class EEffectType : uint8
{
	Pfenum_Allow                             = 0,
	Pfenum_Deny                              = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EEmailVerificationStatus
// NumValues: 0x0004
enum class EEmailVerificationStatus : uint8
{
	Pfenum_Unverified                        = 0,
	Pfenum_Pending                           = 1,
	Pfenum_Confirmed                         = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.EPushNotificationPlatform
// NumValues: 0x0003
enum class EPushNotificationPlatform : uint8
{
	Pfenum_ApplePushNotificationService      = 0,
	Pfenum_GoogleCloudMessaging              = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EResultTableNodeType
// NumValues: 0x0003
enum class EResultTableNodeType : uint8
{
	Pfenum_ItemId                            = 0,
	Pfenum_TableId                           = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.ESegmentCountryCode
// NumValues: 0x00FA
enum class ESegmentCountryCode : uint8
{
	Pfenum_AF                                = 0,
	Pfenum_AX                                = 1,
	Pfenum_AL                                = 2,
	Pfenum_DZ                                = 3,
	Pfenum_AS                                = 4,
	Pfenum_AD                                = 5,
	Pfenum_AO                                = 6,
	Pfenum_AI                                = 7,
	Pfenum_AQ                                = 8,
	Pfenum_AG                                = 9,
	Pfenum_AR                                = 10,
	Pfenum_AM                                = 11,
	Pfenum_AW                                = 12,
	Pfenum_AU                                = 13,
	Pfenum_AT                                = 14,
	Pfenum_AZ                                = 15,
	Pfenum_BS                                = 16,
	Pfenum_BH                                = 17,
	Pfenum_BD                                = 18,
	Pfenum_BB                                = 19,
	Pfenum_BY                                = 20,
	Pfenum_BE                                = 21,
	Pfenum_BZ                                = 22,
	Pfenum_BJ                                = 23,
	Pfenum_BM                                = 24,
	Pfenum_BT                                = 25,
	Pfenum_BO                                = 26,
	Pfenum_BQ                                = 27,
	Pfenum_BA                                = 28,
	Pfenum_BW                                = 29,
	Pfenum_BV                                = 30,
	Pfenum_BR                                = 31,
	Pfenum_IO                                = 32,
	Pfenum_BN                                = 33,
	Pfenum_BG                                = 34,
	Pfenum_BF                                = 35,
	Pfenum_BI                                = 36,
	Pfenum_KH                                = 37,
	Pfenum_CM                                = 38,
	Pfenum_CA                                = 39,
	Pfenum_CV                                = 40,
	Pfenum_KY                                = 41,
	Pfenum_CF                                = 42,
	Pfenum_TD                                = 43,
	Pfenum_CL                                = 44,
	Pfenum_CN                                = 45,
	Pfenum_CX                                = 46,
	Pfenum_CC                                = 47,
	Pfenum_CO                                = 48,
	Pfenum_KM                                = 49,
	Pfenum_CG                                = 50,
	Pfenum_CD                                = 51,
	Pfenum_CK                                = 52,
	Pfenum_CR                                = 53,
	Pfenum_CI                                = 54,
	Pfenum_HR                                = 55,
	Pfenum_CU                                = 56,
	Pfenum_CW                                = 57,
	Pfenum_CY                                = 58,
	Pfenum_CZ                                = 59,
	Pfenum_DK                                = 60,
	Pfenum_DJ                                = 61,
	Pfenum_DM                                = 62,
	Pfenum_DO                                = 63,
	Pfenum_EC                                = 64,
	Pfenum_EG                                = 65,
	Pfenum_SV                                = 66,
	Pfenum_GQ                                = 67,
	Pfenum_ER                                = 68,
	Pfenum_EE                                = 69,
	Pfenum_ET                                = 70,
	Pfenum_FK                                = 71,
	Pfenum_FO                                = 72,
	Pfenum_FJ                                = 73,
	Pfenum_FI                                = 74,
	Pfenum_FR                                = 75,
	Pfenum_GF                                = 76,
	Pfenum_PF                                = 77,
	Pfenum_TF                                = 78,
	Pfenum_GA                                = 79,
	Pfenum_GM                                = 80,
	Pfenum_GE                                = 81,
	Pfenum_DE                                = 82,
	Pfenum_GH                                = 83,
	Pfenum_GI                                = 84,
	Pfenum_GR                                = 85,
	Pfenum_GL                                = 86,
	Pfenum_GD                                = 87,
	Pfenum_GP                                = 88,
	Pfenum_GU                                = 89,
	Pfenum_GT                                = 90,
	Pfenum_GG                                = 91,
	Pfenum_GN                                = 92,
	Pfenum_GW                                = 93,
	Pfenum_GY                                = 94,
	Pfenum_HT                                = 95,
	Pfenum_HM                                = 96,
	Pfenum_VA                                = 97,
	Pfenum_HN                                = 98,
	Pfenum_HK                                = 99,
	Pfenum_HU                                = 100,
	Pfenum_IS                                = 101,
	Pfenum_IN                                = 102,
	Pfenum_ID                                = 103,
	Pfenum_IR                                = 104,
	Pfenum_IQ                                = 105,
	Pfenum_IE                                = 106,
	Pfenum_IM                                = 107,
	Pfenum_IL                                = 108,
	Pfenum_IT                                = 109,
	Pfenum_JM                                = 110,
	Pfenum_JP                                = 111,
	Pfenum_JE                                = 112,
	Pfenum_JO                                = 113,
	Pfenum_KZ                                = 114,
	Pfenum_KE                                = 115,
	Pfenum_KI                                = 116,
	Pfenum_KP                                = 117,
	Pfenum_KR                                = 118,
	Pfenum_KW                                = 119,
	Pfenum_KG                                = 120,
	Pfenum_LA                                = 121,
	Pfenum_LV                                = 122,
	Pfenum_LB                                = 123,
	Pfenum_LS                                = 124,
	Pfenum_LR                                = 125,
	Pfenum_LY                                = 126,
	Pfenum_LI                                = 127,
	Pfenum_LT                                = 128,
	Pfenum_LU                                = 129,
	Pfenum_MO                                = 130,
	Pfenum_MK                                = 131,
	Pfenum_MG                                = 132,
	Pfenum_MW                                = 133,
	Pfenum_MY                                = 134,
	Pfenum_MV                                = 135,
	Pfenum_ML                                = 136,
	Pfenum_MT                                = 137,
	Pfenum_MH                                = 138,
	Pfenum_MQ                                = 139,
	Pfenum_MR                                = 140,
	Pfenum_MU                                = 141,
	Pfenum_YT                                = 142,
	Pfenum_MX                                = 143,
	Pfenum_FM                                = 144,
	Pfenum_MD                                = 145,
	Pfenum_MC                                = 146,
	Pfenum_MN                                = 147,
	Pfenum_ME                                = 148,
	Pfenum_MS                                = 149,
	Pfenum_MA                                = 150,
	Pfenum_MZ                                = 151,
	Pfenum_MM                                = 152,
	Pfenum_NA                                = 153,
	Pfenum_NR                                = 154,
	Pfenum_NP                                = 155,
	Pfenum_NL                                = 156,
	Pfenum_NC                                = 157,
	Pfenum_NZ                                = 158,
	Pfenum_NI                                = 159,
	Pfenum_NE                                = 160,
	Pfenum_NG                                = 161,
	Pfenum_NU                                = 162,
	Pfenum_NF                                = 163,
	Pfenum_MP                                = 164,
	Pfenum_NO                                = 165,
	Pfenum_OM                                = 166,
	Pfenum_PK                                = 167,
	Pfenum_PW                                = 168,
	Pfenum_PS                                = 169,
	Pfenum_PA                                = 170,
	Pfenum_PG                                = 171,
	Pfenum_PY                                = 172,
	Pfenum_PE                                = 173,
	Pfenum_PH                                = 174,
	Pfenum_PN                                = 175,
	Pfenum_PL                                = 176,
	Pfenum_PT                                = 177,
	Pfenum_PR                                = 178,
	Pfenum_QA                                = 179,
	Pfenum_RE                                = 180,
	Pfenum_RO                                = 181,
	Pfenum_RU                                = 182,
	Pfenum_RW                                = 183,
	Pfenum_BL                                = 184,
	Pfenum_SH                                = 185,
	Pfenum_KN                                = 186,
	Pfenum_LC                                = 187,
	Pfenum_MF                                = 188,
	Pfenum_PM                                = 189,
	Pfenum_VC                                = 190,
	Pfenum_WS                                = 191,
	Pfenum_SM                                = 192,
	Pfenum_ST                                = 193,
	Pfenum_SA                                = 194,
	Pfenum_SN                                = 195,
	Pfenum_RS                                = 196,
	Pfenum_SC                                = 197,
	Pfenum_SL                                = 198,
	Pfenum_SG                                = 199,
	Pfenum_SX                                = 200,
	Pfenum_SK                                = 201,
	Pfenum_SI                                = 202,
	Pfenum_SB                                = 203,
	Pfenum_SO                                = 204,
	Pfenum_ZA                                = 205,
	Pfenum_GS                                = 206,
	Pfenum_SS                                = 207,
	Pfenum_ES                                = 208,
	Pfenum_LK                                = 209,
	Pfenum_SD                                = 210,
	Pfenum_SR                                = 211,
	Pfenum_SJ                                = 212,
	Pfenum_SZ                                = 213,
	Pfenum_SE                                = 214,
	Pfenum_CH                                = 215,
	Pfenum_SY                                = 216,
	Pfenum_TW                                = 217,
	Pfenum_TJ                                = 218,
	Pfenum_TZ                                = 219,
	Pfenum_TH                                = 220,
	Pfenum_TL                                = 221,
	Pfenum_TG                                = 222,
	Pfenum_TK                                = 223,
	Pfenum_TO                                = 224,
	Pfenum_TT                                = 225,
	Pfenum_TN                                = 226,
	Pfenum_TR                                = 227,
	Pfenum_TM                                = 228,
	Pfenum_TC                                = 229,
	Pfenum_TV                                = 230,
	Pfenum_UG                                = 231,
	Pfenum_UA                                = 232,
	Pfenum_AE                                = 233,
	Pfenum_GB                                = 234,
	Pfenum_US                                = 235,
	Pfenum_UM                                = 236,
	Pfenum_UY                                = 237,
	Pfenum_UZ                                = 238,
	Pfenum_VU                                = 239,
	Pfenum_VE                                = 240,
	Pfenum_VN                                = 241,
	Pfenum_VG                                = 242,
	Pfenum_VI                                = 243,
	Pfenum_WF                                = 244,
	Pfenum_EH                                = 245,
	Pfenum_YE                                = 246,
	Pfenum_ZM                                = 247,
	Pfenum_ZW                                = 248,
	Pfenum_MAX                               = 249,
};

// Enum PlayFab.ESegmentCurrency
// NumValues: 0x00A3
enum class ESegmentCurrency : uint8
{
	Pfenum_AED                               = 0,
	Pfenum_AFN                               = 1,
	Pfenum_ALL                               = 2,
	Pfenum_AMD                               = 3,
	Pfenum_ANG                               = 4,
	Pfenum_AOA                               = 5,
	Pfenum_ARS                               = 6,
	Pfenum_AUD                               = 7,
	Pfenum_AWG                               = 8,
	Pfenum_AZN                               = 9,
	Pfenum_BAM                               = 10,
	Pfenum_BBD                               = 11,
	Pfenum_BDT                               = 12,
	Pfenum_BGN                               = 13,
	Pfenum_BHD                               = 14,
	Pfenum_BIF                               = 15,
	Pfenum_BMD                               = 16,
	Pfenum_BND                               = 17,
	Pfenum_BOB                               = 18,
	Pfenum_BRL                               = 19,
	Pfenum_BSD                               = 20,
	Pfenum_BTN                               = 21,
	Pfenum_BWP                               = 22,
	Pfenum_BYR                               = 23,
	Pfenum_BZD                               = 24,
	Pfenum_CAD                               = 25,
	Pfenum_CDF                               = 26,
	Pfenum_CHF                               = 27,
	Pfenum_CLP                               = 28,
	Pfenum_CNY                               = 29,
	Pfenum_COP                               = 30,
	Pfenum_CRC                               = 31,
	Pfenum_CUC                               = 32,
	Pfenum_CUP                               = 33,
	Pfenum_CVE                               = 34,
	Pfenum_CZK                               = 35,
	Pfenum_DJF                               = 36,
	Pfenum_DKK                               = 37,
	Pfenum_DOP                               = 38,
	Pfenum_DZD                               = 39,
	Pfenum_EGP                               = 40,
	Pfenum_ERN                               = 41,
	Pfenum_ETB                               = 42,
	Pfenum_EUR                               = 43,
	Pfenum_FJD                               = 44,
	Pfenum_FKP                               = 45,
	Pfenum_GBP                               = 46,
	Pfenum_GEL                               = 47,
	Pfenum_GGP                               = 48,
	Pfenum_GHS                               = 49,
	Pfenum_GIP                               = 50,
	Pfenum_GMD                               = 51,
	Pfenum_GNF                               = 52,
	Pfenum_GTQ                               = 53,
	Pfenum_GYD                               = 54,
	Pfenum_HKD                               = 55,
	Pfenum_HNL                               = 56,
	Pfenum_HRK                               = 57,
	Pfenum_HTG                               = 58,
	Pfenum_HUF                               = 59,
	Pfenum_IDR                               = 60,
	Pfenum_ILS                               = 61,
	Pfenum_IMP                               = 62,
	Pfenum_INR                               = 63,
	Pfenum_IQD                               = 64,
	Pfenum_IRR                               = 65,
	Pfenum_ISK                               = 66,
	Pfenum_JEP                               = 67,
	Pfenum_JMD                               = 68,
	Pfenum_JOD                               = 69,
	Pfenum_JPY                               = 70,
	Pfenum_KES                               = 71,
	Pfenum_KGS                               = 72,
	Pfenum_KHR                               = 73,
	Pfenum_KMF                               = 74,
	Pfenum_KPW                               = 75,
	Pfenum_KRW                               = 76,
	Pfenum_KWD                               = 77,
	Pfenum_KYD                               = 78,
	Pfenum_KZT                               = 79,
	Pfenum_LAK                               = 80,
	Pfenum_LBP                               = 81,
	Pfenum_LKR                               = 82,
	Pfenum_LRD                               = 83,
	Pfenum_LSL                               = 84,
	Pfenum_LYD                               = 85,
	Pfenum_MAD                               = 86,
	Pfenum_MDL                               = 87,
	Pfenum_MGA                               = 88,
	Pfenum_MKD                               = 89,
	Pfenum_MMK                               = 90,
	Pfenum_MNT                               = 91,
	Pfenum_MOP                               = 92,
	Pfenum_MRO                               = 93,
	Pfenum_MUR                               = 94,
	Pfenum_MVR                               = 95,
	Pfenum_MWK                               = 96,
	Pfenum_MXN                               = 97,
	Pfenum_MYR                               = 98,
	Pfenum_MZN                               = 99,
	Pfenum_NAD                               = 100,
	Pfenum_NGN                               = 101,
	Pfenum_NIO                               = 102,
	Pfenum_NOK                               = 103,
	Pfenum_NPR                               = 104,
	Pfenum_NZD                               = 105,
	Pfenum_OMR                               = 106,
	Pfenum_PAB                               = 107,
	Pfenum_PEN                               = 108,
	Pfenum_PGK                               = 109,
	Pfenum_PHP                               = 110,
	Pfenum_PKR                               = 111,
	Pfenum_PLN                               = 112,
	Pfenum_PYG                               = 113,
	Pfenum_QAR                               = 114,
	Pfenum_RON                               = 115,
	Pfenum_RSD                               = 116,
	Pfenum_RUB                               = 117,
	Pfenum_RWF                               = 118,
	Pfenum_SAR                               = 119,
	Pfenum_SBD                               = 120,
	Pfenum_SCR                               = 121,
	Pfenum_SDG                               = 122,
	Pfenum_SEK                               = 123,
	Pfenum_SGD                               = 124,
	Pfenum_SHP                               = 125,
	Pfenum_SLL                               = 126,
	Pfenum_SOS                               = 127,
	Pfenum_SPL                               = 128,
	Pfenum_SRD                               = 129,
	Pfenum_STD                               = 130,
	Pfenum_SVC                               = 131,
	Pfenum_SYP                               = 132,
	Pfenum_SZL                               = 133,
	Pfenum_THB                               = 134,
	Pfenum_TJS                               = 135,
	Pfenum_TMT                               = 136,
	Pfenum_TND                               = 137,
	Pfenum_TOP                               = 138,
	Pfenum_TRY                               = 139,
	Pfenum_TTD                               = 140,
	Pfenum_TVD                               = 141,
	Pfenum_TWD                               = 142,
	Pfenum_TZS                               = 143,
	Pfenum_UAH                               = 144,
	Pfenum_UGX                               = 145,
	Pfenum_USD                               = 146,
	Pfenum_UYU                               = 147,
	Pfenum_UZS                               = 148,
	Pfenum_VEF                               = 149,
	Pfenum_VND                               = 150,
	Pfenum_VUV                               = 151,
	Pfenum_WST                               = 152,
	Pfenum_XAF                               = 153,
	Pfenum_XCD                               = 154,
	Pfenum_XDR                               = 155,
	Pfenum_XOF                               = 156,
	Pfenum_XPF                               = 157,
	Pfenum_YER                               = 158,
	Pfenum_ZAR                               = 159,
	Pfenum_ZMW                               = 160,
	Pfenum_ZWD                               = 161,
	Pfenum_MAX                               = 162,
};

// Enum PlayFab.ESegmentFilterComparison
// NumValues: 0x000A
enum class ESegmentFilterComparison : uint8
{
	Pfenum_GreaterThan                       = 0,
	Pfenum_LessThan                          = 1,
	Pfenum_EqualTo                           = 2,
	Pfenum_NotEqualTo                        = 3,
	Pfenum_GreaterThanOrEqual                = 4,
	Pfenum_LessThanOrEqual                   = 5,
	Pfenum_Exists                            = 6,
	Pfenum_Contains                          = 7,
	Pfenum_NotContains                       = 8,
	Pfenum_MAX                               = 9,
};

// Enum PlayFab.ESegmentLoginIdentityProvider
// NumValues: 0x0016
enum class ESegmentLoginIdentityProvider : uint8
{
	Pfenum_Unknown                           = 0,
	Pfenum_PlayFab                           = 1,
	Pfenum_Custom                            = 2,
	Pfenum_GameCenter                        = 3,
	Pfenum_GooglePlay                        = 4,
	Pfenum_Steam                             = 5,
	Pfenum_XBoxLive                          = 6,
	Pfenum_PSN                               = 7,
	Pfenum_Kongregate                        = 8,
	Pfenum_Facebook                          = 9,
	Pfenum_IOSDevice                         = 10,
	Pfenum_AndroidDevice                     = 11,
	Pfenum_Twitch                            = 12,
	Pfenum_WindowsHello                      = 13,
	Pfenum_GameServer                        = 14,
	Pfenum_CustomServer                      = 15,
	Pfenum_NintendoSwitch                    = 16,
	Pfenum_FacebookInstantGames              = 17,
	Pfenum_OpenIdConnect                     = 18,
	Pfenum_Apple                             = 19,
	Pfenum_NintendoSwitchAccount             = 20,
	Pfenum_MAX                               = 21,
};

// Enum PlayFab.ESegmentPushNotificationDevicePlatform
// NumValues: 0x0003
enum class ESegmentPushNotificationDevicePlatform : uint8
{
	Pfenum_ApplePushNotificationService      = 0,
	Pfenum_GoogleCloudMessaging              = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EStatisticVersionArchivalStatus
// NumValues: 0x0006
enum class EStatisticVersionArchivalStatus : uint8
{
	Pfenum_NotScheduled                      = 0,
	Pfenum_Scheduled                         = 1,
	Pfenum_Queued                            = 2,
	Pfenum_InProgress                        = 3,
	Pfenum_Complete                          = 4,
	Pfenum_MAX                               = 5,
};

// Enum PlayFab.EStatisticVersionStatus
// NumValues: 0x0006
enum class EStatisticVersionStatus : uint8
{
	Pfenum_Active                            = 0,
	Pfenum_SnapshotPending                   = 1,
	Pfenum_Snapshot                          = 2,
	Pfenum_ArchivalPending                   = 3,
	Pfenum_Archived                          = 4,
	Pfenum_MAX                               = 5,
};

// Enum PlayFab.ESubscriptionProviderStatus
// NumValues: 0x0009
enum class ESubscriptionProviderStatus : uint8
{
	Pfenum_NoError                           = 0,
	Pfenum_Cancelled                         = 1,
	Pfenum_UnknownError                      = 2,
	Pfenum_BillingError                      = 3,
	Pfenum_ProductUnavailable                = 4,
	Pfenum_CustomerDidNotAcceptPriceChange   = 5,
	Pfenum_FreeTrial                         = 6,
	Pfenum_PaymentPending                    = 7,
	Pfenum_MAX                               = 8,
};

// Enum PlayFab.ETitleActivationStatus
// NumValues: 0x0006
enum class ETitleActivationStatus : uint8
{
	Pfenum_None                              = 0,
	Pfenum_ActivatedTitleKey                 = 1,
	Pfenum_PendingSteam                      = 2,
	Pfenum_ActivatedSteam                    = 3,
	Pfenum_RevokedSteam                      = 4,
	Pfenum_MAX                               = 5,
};

// Enum PlayFab.EUserOrigination
// NumValues: 0x0019
enum class EUserOrigination : uint8
{
	Pfenum_Organic                           = 0,
	Pfenum_Steam                             = 1,
	Pfenum_Google                            = 2,
	Pfenum_Amazon                            = 3,
	Pfenum_Facebook                          = 4,
	Pfenum_Kongregate                        = 5,
	Pfenum_GamersFirst                       = 6,
	Pfenum_Unknown                           = 7,
	Pfenum_IOS                               = 8,
	Pfenum_LoadTest                          = 9,
	Pfenum_Android                           = 10,
	Pfenum_PSN                               = 11,
	Pfenum_GameCenter                        = 12,
	Pfenum_CustomId                          = 13,
	Pfenum_XboxLive                          = 14,
	Pfenum_Parse                             = 15,
	Pfenum_Twitch                            = 16,
	Pfenum_ServerCustomId                    = 17,
	Pfenum_NintendoSwitchDeviceId            = 18,
	Pfenum_FacebookInstantGamesId            = 19,
	Pfenum_OpenIdConnect                     = 20,
	Pfenum_Apple                             = 21,
	Pfenum_NintendoSwitchAccount             = 22,
	Pfenum_GooglePlayGames                   = 23,
	Pfenum_MAX                               = 24,
};

// Enum PlayFab.EPfTriggerType
// NumValues: 0x0003
enum class EPfTriggerType : uint8
{
	Pfenum_HTTP                              = 0,
	Pfenum_Queue                             = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EDisplayPropertyType
// NumValues: 0x0006
enum class EDisplayPropertyType : uint8
{
	Pfenum_None                              = 0,
	Pfenum_QueryDateTime                     = 1,
	Pfenum_QueryDouble                       = 2,
	Pfenum_QueryString                       = 3,
	Pfenum_SearchString                      = 4,
	Pfenum_MAX                               = 5,
};

// Enum PlayFab.EAnalysisTaskState
// NumValues: 0x0008
enum class EAnalysisTaskState : uint8
{
	Pfenum_Waiting                           = 0,
	Pfenum_ReadyForSubmission                = 1,
	Pfenum_SubmittingToPipeline              = 2,
	Pfenum_Running                           = 3,
	Pfenum_Completed                         = 4,
	Pfenum_Failed                            = 5,
	Pfenum_Canceled                          = 6,
	Pfenum_MAX                               = 7,
};

// Enum PlayFab.EExperimentState
// NumValues: 0x0005
enum class EExperimentState : uint8
{
	Pfenum_New                               = 0,
	Pfenum_Started                           = 1,
	Pfenum_Stopped                           = 2,
	Pfenum_Deleted                           = 3,
	Pfenum_MAX                               = 4,
};

// Enum PlayFab.EAzureRegion
// NumValues: 0x0018
enum class EAzureRegion : uint8
{
	Pfenum_AustraliaEast                     = 0,
	Pfenum_AustraliaSoutheast                = 1,
	Pfenum_BrazilSouth                       = 2,
	Pfenum_CentralUs                         = 3,
	Pfenum_EastAsia                          = 4,
	Pfenum_EastUs                            = 5,
	Pfenum_EastUs2                           = 6,
	Pfenum_JapanEast                         = 7,
	Pfenum_JapanWest                         = 8,
	Pfenum_NorthCentralUs                    = 9,
	Pfenum_NorthEurope                       = 10,
	Pfenum_SouthCentralUs                    = 11,
	Pfenum_SoutheastAsia                     = 12,
	Pfenum_WestEurope                        = 13,
	Pfenum_WestUs                            = 14,
	Pfenum_SouthAfricaNorth                  = 15,
	Pfenum_WestCentralUs                     = 16,
	Pfenum_KoreaCentral                      = 17,
	Pfenum_FranceCentral                     = 18,
	Pfenum_WestUs2                           = 19,
	Pfenum_CentralIndia                      = 20,
	Pfenum_UaeNorth                          = 21,
	Pfenum_UkSouth                           = 22,
	Pfenum_MAX                               = 23,
};

// Enum PlayFab.EAzureVmFamily
// NumValues: 0x0014
enum class EAzureVmFamily : uint8
{
	Pfenum_A                                 = 0,
	Pfenum_Av2                               = 1,
	Pfenum_Dv2                               = 2,
	Pfenum_Dv3                               = 3,
	Pfenum_F                                 = 4,
	Pfenum_Fsv2                              = 5,
	Pfenum_Dasv4                             = 6,
	Pfenum_Dav4                              = 7,
	Pfenum_Dadsv5                            = 8,
	Pfenum_Eav4                              = 9,
	Pfenum_Easv4                             = 10,
	Pfenum_Ev4                               = 11,
	Pfenum_Esv4                              = 12,
	Pfenum_Dsv3                              = 13,
	Pfenum_Dsv2                              = 14,
	Pfenum_NCasT4_v3                         = 15,
	Pfenum_Ddv4                              = 16,
	Pfenum_Ddsv4                             = 17,
	Pfenum_HBv3                              = 18,
	Pfenum_MAX                               = 19,
};

// Enum PlayFab.ECancellationReason
// NumValues: 0x0004
enum class ECancellationReason : uint8
{
	Pfenum_Requested                         = 0,
	Pfenum_Internal                          = 1,
	Pfenum_Timeout                           = 2,
	Pfenum_MAX                               = 3,
};

// Enum PlayFab.EOsPlatform
// NumValues: 0x0003
enum class EOsPlatform : uint8
{
	Pfenum_Windows                           = 0,
	Pfenum_Linux                             = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EProtocolType
// NumValues: 0x0003
enum class EProtocolType : uint8
{
	Pfenum_TCP                               = 0,
	Pfenum_UDP                               = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.ERoutingType
// NumValues: 0x0003
enum class ERoutingType : uint8
{
	Pfenum_Microsoft                         = 0,
	Pfenum_Internet                          = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EServerType
// NumValues: 0x0003
enum class EServerType : uint8
{
	Pfenum_Container                         = 0,
	Pfenum_Process                           = 1,
	Pfenum_MAX                               = 2,
};

// Enum PlayFab.EPFJson
// NumValues: 0x0008
enum class EPFJson : uint8
{
	None                                     = 0,
	Null                                     = 1,
	String                                   = 2,
	Number                                   = 3,
	Boolean                                  = 4,
	Array                                    = 5,
	Object                                   = 6,
	EPFJson_MAX                              = 7,
};

// ScriptStruct PlayFab.PlayFabError
// 0x0038 (0x0038 - 0x0000)
struct FPlayFabError final
{
public:
	bool                                          HasError;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ErrorCode;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorMessage;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorDetails;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabError) == 0x000008, "Wrong alignment on FPlayFabError");
static_assert(sizeof(FPlayFabError) == 0x000038, "Wrong size on FPlayFabError");
static_assert(offsetof(FPlayFabError, HasError) == 0x000000, "Member 'FPlayFabError::HasError' has a wrong offset!");
static_assert(offsetof(FPlayFabError, ErrorCode) == 0x000004, "Member 'FPlayFabError::ErrorCode' has a wrong offset!");
static_assert(offsetof(FPlayFabError, ErrorName) == 0x000008, "Member 'FPlayFabError::ErrorName' has a wrong offset!");
static_assert(offsetof(FPlayFabError, ErrorMessage) == 0x000018, "Member 'FPlayFabError::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FPlayFabError, ErrorDetails) == 0x000028, "Member 'FPlayFabError::ErrorDetails' has a wrong offset!");

// ScriptStruct PlayFab.PlayFabBaseModel
// 0x0040 (0x0040 - 0x0000)
struct FPlayFabBaseModel final
{
public:
	struct FPlayFabError                          ResponseError;                                     // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ResponseData;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabBaseModel) == 0x000008, "Wrong alignment on FPlayFabBaseModel");
static_assert(sizeof(FPlayFabBaseModel) == 0x000040, "Wrong size on FPlayFabBaseModel");
static_assert(offsetof(FPlayFabBaseModel, ResponseError) == 0x000000, "Member 'FPlayFabBaseModel::ResponseError' has a wrong offset!");
static_assert(offsetof(FPlayFabBaseModel, ResponseData) == 0x000038, "Member 'FPlayFabBaseModel::ResponseData' has a wrong offset!");

// ScriptStruct PlayFab.PlayFabResultCommon
// 0x0008 (0x0008 - 0x0000)
struct FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Request;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabResultCommon) == 0x000008, "Wrong alignment on FPlayFabResultCommon");
static_assert(sizeof(FPlayFabResultCommon) == 0x000008, "Wrong size on FPlayFabResultCommon");
static_assert(offsetof(FPlayFabResultCommon, Request) == 0x000000, "Member 'FPlayFabResultCommon::Request' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteSegmentsResponse
// 0x0010 (0x0018 - 0x0008)
struct FAdminDeleteSegmentsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteSegmentsResponse) == 0x000008, "Wrong alignment on FAdminDeleteSegmentsResponse");
static_assert(sizeof(FAdminDeleteSegmentsResponse) == 0x000018, "Wrong size on FAdminDeleteSegmentsResponse");
static_assert(offsetof(FAdminDeleteSegmentsResponse, ErrorMessage) == 0x000008, "Member 'FAdminDeleteSegmentsResponse::ErrorMessage' has a wrong offset!");

// ScriptStruct PlayFab.ServerListUsersCharactersResult
// 0x0010 (0x0018 - 0x0008)
struct FServerListUsersCharactersResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Characters;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerListUsersCharactersResult) == 0x000008, "Wrong alignment on FServerListUsersCharactersResult");
static_assert(sizeof(FServerListUsersCharactersResult) == 0x000018, "Wrong size on FServerListUsersCharactersResult");
static_assert(offsetof(FServerListUsersCharactersResult, Characters) == 0x000008, "Member 'FServerListUsersCharactersResult::Characters' has a wrong offset!");

// ScriptStruct PlayFab.MatchmakerPlayerJoinedResponse
// 0x0000 (0x0008 - 0x0008)
struct FMatchmakerPlayerJoinedResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FMatchmakerPlayerJoinedResponse) == 0x000008, "Wrong alignment on FMatchmakerPlayerJoinedResponse");
static_assert(sizeof(FMatchmakerPlayerJoinedResponse) == 0x000008, "Wrong size on FMatchmakerPlayerJoinedResponse");

// ScriptStruct PlayFab.ClientGetPublisherDataResult
// 0x0008 (0x0010 - 0x0008)
struct FClientGetPublisherDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPublisherDataResult) == 0x000008, "Wrong alignment on FClientGetPublisherDataResult");
static_assert(sizeof(FClientGetPublisherDataResult) == 0x000010, "Wrong size on FClientGetPublisherDataResult");
static_assert(offsetof(FClientGetPublisherDataResult, Data) == 0x000008, "Member 'FClientGetPublisherDataResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.AdminAddLocalizedNewsResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminAddLocalizedNewsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminAddLocalizedNewsResult) == 0x000008, "Wrong alignment on FAdminAddLocalizedNewsResult");
static_assert(sizeof(FAdminAddLocalizedNewsResult) == 0x000008, "Wrong size on FAdminAddLocalizedNewsResult");

// ScriptStruct PlayFab.PlayFabRequestCommon
// 0x0008 (0x0008 - 0x0000)
struct FPlayFabRequestCommon
{
public:
	class UPlayFabAuthenticationContext*          AuthenticationContext;                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabRequestCommon) == 0x000008, "Wrong alignment on FPlayFabRequestCommon");
static_assert(sizeof(FPlayFabRequestCommon) == 0x000008, "Wrong size on FPlayFabRequestCommon");
static_assert(offsetof(FPlayFabRequestCommon, AuthenticationContext) == 0x000000, "Member 'FPlayFabRequestCommon::AuthenticationContext' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetTransactionHistoryRequest
// 0x0048 (0x0050 - 0x0008)
struct FEconomyGetTransactionHistoryRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContinuationToken;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D7[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetTransactionHistoryRequest) == 0x000008, "Wrong alignment on FEconomyGetTransactionHistoryRequest");
static_assert(sizeof(FEconomyGetTransactionHistoryRequest) == 0x000050, "Wrong size on FEconomyGetTransactionHistoryRequest");
static_assert(offsetof(FEconomyGetTransactionHistoryRequest, CollectionId) == 0x000008, "Member 'FEconomyGetTransactionHistoryRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyGetTransactionHistoryRequest, ContinuationToken) == 0x000018, "Member 'FEconomyGetTransactionHistoryRequest::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetTransactionHistoryRequest, Count) == 0x000028, "Member 'FEconomyGetTransactionHistoryRequest::Count' has a wrong offset!");
static_assert(offsetof(FEconomyGetTransactionHistoryRequest, CustomTags) == 0x000030, "Member 'FEconomyGetTransactionHistoryRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetTransactionHistoryRequest, Entity) == 0x000038, "Member 'FEconomyGetTransactionHistoryRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetTransactionHistoryRequest, Filter) == 0x000040, "Member 'FEconomyGetTransactionHistoryRequest::Filter' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesSetProfileLanguageRequest
// 0x0028 (0x0030 - 0x0008)
struct FProfilesSetProfileLanguageRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedVersion;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesSetProfileLanguageRequest) == 0x000008, "Wrong alignment on FProfilesSetProfileLanguageRequest");
static_assert(sizeof(FProfilesSetProfileLanguageRequest) == 0x000030, "Wrong size on FProfilesSetProfileLanguageRequest");
static_assert(offsetof(FProfilesSetProfileLanguageRequest, CustomTags) == 0x000008, "Member 'FProfilesSetProfileLanguageRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FProfilesSetProfileLanguageRequest, Entity) == 0x000010, "Member 'FProfilesSetProfileLanguageRequest::Entity' has a wrong offset!");
static_assert(offsetof(FProfilesSetProfileLanguageRequest, ExpectedVersion) == 0x000018, "Member 'FProfilesSetProfileLanguageRequest::ExpectedVersion' has a wrong offset!");
static_assert(offsetof(FProfilesSetProfileLanguageRequest, Language) == 0x000020, "Member 'FProfilesSetProfileLanguageRequest::Language' has a wrong offset!");

// ScriptStruct PlayFab.ClientGrantCharacterToUserRequest
// 0x0038 (0x0040 - 0x0008)
struct FClientGrantCharacterToUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGrantCharacterToUserRequest) == 0x000008, "Wrong alignment on FClientGrantCharacterToUserRequest");
static_assert(sizeof(FClientGrantCharacterToUserRequest) == 0x000040, "Wrong size on FClientGrantCharacterToUserRequest");
static_assert(offsetof(FClientGrantCharacterToUserRequest, CatalogVersion) == 0x000008, "Member 'FClientGrantCharacterToUserRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientGrantCharacterToUserRequest, CharacterName) == 0x000018, "Member 'FClientGrantCharacterToUserRequest::CharacterName' has a wrong offset!");
static_assert(offsetof(FClientGrantCharacterToUserRequest, CustomTags) == 0x000028, "Member 'FClientGrantCharacterToUserRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGrantCharacterToUserRequest, ItemId) == 0x000030, "Member 'FClientGrantCharacterToUserRequest::ItemId' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumeXboxEntitlementsRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientConsumeXboxEntitlementsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConsumeXboxEntitlementsRequest) == 0x000008, "Wrong alignment on FClientConsumeXboxEntitlementsRequest");
static_assert(sizeof(FClientConsumeXboxEntitlementsRequest) == 0x000030, "Wrong size on FClientConsumeXboxEntitlementsRequest");
static_assert(offsetof(FClientConsumeXboxEntitlementsRequest, CatalogVersion) == 0x000008, "Member 'FClientConsumeXboxEntitlementsRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientConsumeXboxEntitlementsRequest, CustomTags) == 0x000018, "Member 'FClientConsumeXboxEntitlementsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientConsumeXboxEntitlementsRequest, XboxToken) == 0x000020, "Member 'FClientConsumeXboxEntitlementsRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.EconomyDeleteEntityItemReviewsRequest
// 0x0010 (0x0018 - 0x0008)
struct FEconomyDeleteEntityItemReviewsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyDeleteEntityItemReviewsRequest) == 0x000008, "Wrong alignment on FEconomyDeleteEntityItemReviewsRequest");
static_assert(sizeof(FEconomyDeleteEntityItemReviewsRequest) == 0x000018, "Wrong size on FEconomyDeleteEntityItemReviewsRequest");
static_assert(offsetof(FEconomyDeleteEntityItemReviewsRequest, CustomTags) == 0x000008, "Member 'FEconomyDeleteEntityItemReviewsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteEntityItemReviewsRequest, Entity) == 0x000010, "Member 'FEconomyDeleteEntityItemReviewsRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPurchaseResult
// 0x0050 (0x0058 - 0x0008)
struct FClientGetPurchaseResult final : public FPlayFabResultCommon
{
public:
	class FString                                 OrderID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PaymentProvider;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseDate;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionId;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionStatus;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPurchaseResult) == 0x000008, "Wrong alignment on FClientGetPurchaseResult");
static_assert(sizeof(FClientGetPurchaseResult) == 0x000058, "Wrong size on FClientGetPurchaseResult");
static_assert(offsetof(FClientGetPurchaseResult, OrderID) == 0x000008, "Member 'FClientGetPurchaseResult::OrderID' has a wrong offset!");
static_assert(offsetof(FClientGetPurchaseResult, PaymentProvider) == 0x000018, "Member 'FClientGetPurchaseResult::PaymentProvider' has a wrong offset!");
static_assert(offsetof(FClientGetPurchaseResult, PurchaseDate) == 0x000028, "Member 'FClientGetPurchaseResult::PurchaseDate' has a wrong offset!");
static_assert(offsetof(FClientGetPurchaseResult, TransactionId) == 0x000038, "Member 'FClientGetPurchaseResult::TransactionId' has a wrong offset!");
static_assert(offsetof(FClientGetPurchaseResult, TransactionStatus) == 0x000048, "Member 'FClientGetPurchaseResult::TransactionStatus' has a wrong offset!");

// ScriptStruct PlayFab.AdminEmptyResponse
// 0x0000 (0x0008 - 0x0008)
struct FAdminEmptyResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminEmptyResponse) == 0x000008, "Wrong alignment on FAdminEmptyResponse");
static_assert(sizeof(FAdminEmptyResponse) == 0x000008, "Wrong size on FAdminEmptyResponse");

// ScriptStruct PlayFab.AdminDeletePlayerResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminDeletePlayerResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminDeletePlayerResult) == 0x000008, "Wrong alignment on FAdminDeletePlayerResult");
static_assert(sizeof(FAdminDeletePlayerResult) == 0x000008, "Wrong size on FAdminDeletePlayerResult");

// ScriptStruct PlayFab.ServerGetTimeRequest
// 0x0000 (0x0008 - 0x0008)
struct FServerGetTimeRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FServerGetTimeRequest) == 0x000008, "Wrong alignment on FServerGetTimeRequest");
static_assert(sizeof(FServerGetTimeRequest) == 0x000008, "Wrong size on FServerGetTimeRequest");

// ScriptStruct PlayFab.ClientGetPaymentTokenResult
// 0x0020 (0x0028 - 0x0008)
struct FClientGetPaymentTokenResult final : public FPlayFabResultCommon
{
public:
	class FString                                 OrderID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProviderToken;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPaymentTokenResult) == 0x000008, "Wrong alignment on FClientGetPaymentTokenResult");
static_assert(sizeof(FClientGetPaymentTokenResult) == 0x000028, "Wrong size on FClientGetPaymentTokenResult");
static_assert(offsetof(FClientGetPaymentTokenResult, OrderID) == 0x000008, "Member 'FClientGetPaymentTokenResult::OrderID' has a wrong offset!");
static_assert(offsetof(FClientGetPaymentTokenResult, ProviderToken) == 0x000018, "Member 'FClientGetPaymentTokenResult::ProviderToken' has a wrong offset!");

// ScriptStruct PlayFab.ClientConfirmPurchaseRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientConfirmPurchaseRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderID;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConfirmPurchaseRequest) == 0x000008, "Wrong alignment on FClientConfirmPurchaseRequest");
static_assert(sizeof(FClientConfirmPurchaseRequest) == 0x000020, "Wrong size on FClientConfirmPurchaseRequest");
static_assert(offsetof(FClientConfirmPurchaseRequest, CustomTags) == 0x000008, "Member 'FClientConfirmPurchaseRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientConfirmPurchaseRequest, OrderID) == 0x000010, "Member 'FClientConfirmPurchaseRequest::OrderID' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetStoreItemsRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientGetStoreItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetStoreItemsRequest) == 0x000008, "Wrong alignment on FClientGetStoreItemsRequest");
static_assert(sizeof(FClientGetStoreItemsRequest) == 0x000028, "Wrong size on FClientGetStoreItemsRequest");
static_assert(offsetof(FClientGetStoreItemsRequest, CatalogVersion) == 0x000008, "Member 'FClientGetStoreItemsRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientGetStoreItemsRequest, StoreId) == 0x000018, "Member 'FClientGetStoreItemsRequest::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerStatisticVersionsResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPlayerStatisticVersionsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             StatisticVersions;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerStatisticVersionsResult) == 0x000008, "Wrong alignment on FAdminGetPlayerStatisticVersionsResult");
static_assert(sizeof(FAdminGetPlayerStatisticVersionsResult) == 0x000018, "Wrong size on FAdminGetPlayerStatisticVersionsResult");
static_assert(offsetof(FAdminGetPlayerStatisticVersionsResult, StatisticVersions) == 0x000008, "Member 'FAdminGetPlayerStatisticVersionsResult::StatisticVersions' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListVirtualMachineSummariesResponse
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerListVirtualMachineSummariesResponse final : public FPlayFabResultCommon
{
public:
	int32                                         PageSize;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             VirtualMachines;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListVirtualMachineSummariesResponse) == 0x000008, "Wrong alignment on FMultiplayerListVirtualMachineSummariesResponse");
static_assert(sizeof(FMultiplayerListVirtualMachineSummariesResponse) == 0x000030, "Wrong size on FMultiplayerListVirtualMachineSummariesResponse");
static_assert(offsetof(FMultiplayerListVirtualMachineSummariesResponse, PageSize) == 0x000008, "Member 'FMultiplayerListVirtualMachineSummariesResponse::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListVirtualMachineSummariesResponse, SkipToken) == 0x000010, "Member 'FMultiplayerListVirtualMachineSummariesResponse::SkipToken' has a wrong offset!");
static_assert(offsetof(FMultiplayerListVirtualMachineSummariesResponse, VirtualMachines) == 0x000020, "Member 'FMultiplayerListVirtualMachineSummariesResponse::VirtualMachines' has a wrong offset!");

// ScriptStruct PlayFab.AdminAbortTaskInstanceRequest
// 0x0018 (0x0020 - 0x0008)
struct FAdminAbortTaskInstanceRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TaskInstanceId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminAbortTaskInstanceRequest) == 0x000008, "Wrong alignment on FAdminAbortTaskInstanceRequest");
static_assert(sizeof(FAdminAbortTaskInstanceRequest) == 0x000020, "Wrong size on FAdminAbortTaskInstanceRequest");
static_assert(offsetof(FAdminAbortTaskInstanceRequest, CustomTags) == 0x000008, "Member 'FAdminAbortTaskInstanceRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminAbortTaskInstanceRequest, TaskInstanceId) == 0x000010, "Member 'FAdminAbortTaskInstanceRequest::TaskInstanceId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlinkPSNAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FServerUnlinkPSNAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerUnlinkPSNAccountResult) == 0x000008, "Wrong alignment on FServerUnlinkPSNAccountResult");
static_assert(sizeof(FServerUnlinkPSNAccountResult) == 0x000008, "Wrong size on FServerUnlinkPSNAccountResult");

// ScriptStruct PlayFab.AdminAddLocalizedNewsRequest
// 0x0048 (0x0050 - 0x0008)
struct FAdminAddLocalizedNewsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Body;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewsId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminAddLocalizedNewsRequest) == 0x000008, "Wrong alignment on FAdminAddLocalizedNewsRequest");
static_assert(sizeof(FAdminAddLocalizedNewsRequest) == 0x000050, "Wrong size on FAdminAddLocalizedNewsRequest");
static_assert(offsetof(FAdminAddLocalizedNewsRequest, Body) == 0x000008, "Member 'FAdminAddLocalizedNewsRequest::Body' has a wrong offset!");
static_assert(offsetof(FAdminAddLocalizedNewsRequest, CustomTags) == 0x000018, "Member 'FAdminAddLocalizedNewsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminAddLocalizedNewsRequest, Language) == 0x000020, "Member 'FAdminAddLocalizedNewsRequest::Language' has a wrong offset!");
static_assert(offsetof(FAdminAddLocalizedNewsRequest, NewsId) == 0x000030, "Member 'FAdminAddLocalizedNewsRequest::NewsId' has a wrong offset!");
static_assert(offsetof(FAdminAddLocalizedNewsRequest, Title) == 0x000040, "Member 'FAdminAddLocalizedNewsRequest::Title' has a wrong offset!");

// ScriptStruct PlayFab.EconomyPublishDraftItemRequest
// 0x0038 (0x0040 - 0x0008)
struct FEconomyPublishDraftItemRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ETag;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyPublishDraftItemRequest) == 0x000008, "Wrong alignment on FEconomyPublishDraftItemRequest");
static_assert(sizeof(FEconomyPublishDraftItemRequest) == 0x000040, "Wrong size on FEconomyPublishDraftItemRequest");
static_assert(offsetof(FEconomyPublishDraftItemRequest, AlternateId) == 0x000008, "Member 'FEconomyPublishDraftItemRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyPublishDraftItemRequest, CustomTags) == 0x000010, "Member 'FEconomyPublishDraftItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyPublishDraftItemRequest, Entity) == 0x000018, "Member 'FEconomyPublishDraftItemRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyPublishDraftItemRequest, ETag) == 0x000020, "Member 'FEconomyPublishDraftItemRequest::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyPublishDraftItemRequest, ID) == 0x000030, "Member 'FEconomyPublishDraftItemRequest::ID' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayersInSegmentResult
// 0x0028 (0x0030 - 0x0008)
struct FAdminGetPlayersInSegmentResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             PlayerProfiles;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ProfilesInSegment;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DA[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminGetPlayersInSegmentResult) == 0x000008, "Wrong alignment on FAdminGetPlayersInSegmentResult");
static_assert(sizeof(FAdminGetPlayersInSegmentResult) == 0x000030, "Wrong size on FAdminGetPlayersInSegmentResult");
static_assert(offsetof(FAdminGetPlayersInSegmentResult, ContinuationToken) == 0x000008, "Member 'FAdminGetPlayersInSegmentResult::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayersInSegmentResult, PlayerProfiles) == 0x000018, "Member 'FAdminGetPlayersInSegmentResult::PlayerProfiles' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayersInSegmentResult, ProfilesInSegment) == 0x000028, "Member 'FAdminGetPlayersInSegmentResult::ProfilesInSegment' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerStatisticsRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientGetPlayerStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticNames;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             StatisticNameVersions;                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerStatisticsRequest) == 0x000008, "Wrong alignment on FClientGetPlayerStatisticsRequest");
static_assert(sizeof(FClientGetPlayerStatisticsRequest) == 0x000030, "Wrong size on FClientGetPlayerStatisticsRequest");
static_assert(offsetof(FClientGetPlayerStatisticsRequest, CustomTags) == 0x000008, "Member 'FClientGetPlayerStatisticsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerStatisticsRequest, StatisticNames) == 0x000010, "Member 'FClientGetPlayerStatisticsRequest::StatisticNames' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerStatisticsRequest, StatisticNameVersions) == 0x000020, "Member 'FClientGetPlayerStatisticsRequest::StatisticNameVersions' has a wrong offset!");

// ScriptStruct PlayFab.AdminAddNewsResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminAddNewsResult final : public FPlayFabResultCommon
{
public:
	class FString                                 NewsId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminAddNewsResult) == 0x000008, "Wrong alignment on FAdminAddNewsResult");
static_assert(sizeof(FAdminAddNewsResult) == 0x000018, "Wrong size on FAdminAddNewsResult");
static_assert(offsetof(FAdminAddNewsResult, NewsId) == 0x000008, "Member 'FAdminAddNewsResult::NewsId' has a wrong offset!");

// ScriptStruct PlayFab.ServerMoveItemToCharacterFromCharacterResult
// 0x0000 (0x0008 - 0x0008)
struct FServerMoveItemToCharacterFromCharacterResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerMoveItemToCharacterFromCharacterResult) == 0x000008, "Wrong alignment on FServerMoveItemToCharacterFromCharacterResult");
static_assert(sizeof(FServerMoveItemToCharacterFromCharacterResult) == 0x000008, "Wrong size on FServerMoveItemToCharacterFromCharacterResult");

// ScriptStruct PlayFab.ClientGetTitlePublicKeyRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetTitlePublicKeyRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 TitleSharedSecret;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetTitlePublicKeyRequest) == 0x000008, "Wrong alignment on FClientGetTitlePublicKeyRequest");
static_assert(sizeof(FClientGetTitlePublicKeyRequest) == 0x000018, "Wrong size on FClientGetTitlePublicKeyRequest");
static_assert(offsetof(FClientGetTitlePublicKeyRequest, TitleSharedSecret) == 0x000008, "Member 'FClientGetTitlePublicKeyRequest::TitleSharedSecret' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetRandomResultTablesResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminGetRandomResultTablesResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Tables;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetRandomResultTablesResult) == 0x000008, "Wrong alignment on FAdminGetRandomResultTablesResult");
static_assert(sizeof(FAdminGetRandomResultTablesResult) == 0x000010, "Wrong size on FAdminGetRandomResultTablesResult");
static_assert(offsetof(FAdminGetRandomResultTablesResult, Tables) == 0x000008, "Member 'FAdminGetRandomResultTablesResult::Tables' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteTitleResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminDeleteTitleResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminDeleteTitleResult) == 0x000008, "Wrong alignment on FAdminDeleteTitleResult");
static_assert(sizeof(FAdminDeleteTitleResult) == 0x000008, "Wrong size on FAdminDeleteTitleResult");

// ScriptStruct PlayFab.PlayFabLoginResultCommon
// 0x0008 (0x0010 - 0x0008)
struct FPlayFabLoginResultCommon : public FPlayFabResultCommon
{
public:
	class UPlayFabAuthenticationContext*          AuthenticationContext;                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayFabLoginResultCommon) == 0x000008, "Wrong alignment on FPlayFabLoginResultCommon");
static_assert(sizeof(FPlayFabLoginResultCommon) == 0x000010, "Wrong size on FPlayFabLoginResultCommon");
static_assert(offsetof(FPlayFabLoginResultCommon, AuthenticationContext) == 0x000008, "Member 'FPlayFabLoginResultCommon::AuthenticationContext' has a wrong offset!");

// ScriptStruct PlayFab.ServerServerLoginResult
// 0x0058 (0x0068 - 0x0010)
struct FServerServerLoginResult final : public FPlayFabLoginResultCommon
{
public:
	class UPlayFabJsonObject*                     EntityToken;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoResultPayload;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastLoginTime;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewlyCreated;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DB[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionTicket;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     SettingsForUser;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     TreatmentAssignment;                               // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerServerLoginResult) == 0x000008, "Wrong alignment on FServerServerLoginResult");
static_assert(sizeof(FServerServerLoginResult) == 0x000068, "Wrong size on FServerServerLoginResult");
static_assert(offsetof(FServerServerLoginResult, EntityToken) == 0x000010, "Member 'FServerServerLoginResult::EntityToken' has a wrong offset!");
static_assert(offsetof(FServerServerLoginResult, InfoResultPayload) == 0x000018, "Member 'FServerServerLoginResult::InfoResultPayload' has a wrong offset!");
static_assert(offsetof(FServerServerLoginResult, LastLoginTime) == 0x000020, "Member 'FServerServerLoginResult::LastLoginTime' has a wrong offset!");
static_assert(offsetof(FServerServerLoginResult, NewlyCreated) == 0x000030, "Member 'FServerServerLoginResult::NewlyCreated' has a wrong offset!");
static_assert(offsetof(FServerServerLoginResult, PlayFabId) == 0x000038, "Member 'FServerServerLoginResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerServerLoginResult, SessionTicket) == 0x000048, "Member 'FServerServerLoginResult::SessionTicket' has a wrong offset!");
static_assert(offsetof(FServerServerLoginResult, SettingsForUser) == 0x000058, "Member 'FServerServerLoginResult::SettingsForUser' has a wrong offset!");
static_assert(offsetof(FServerServerLoginResult, TreatmentAssignment) == 0x000060, "Member 'FServerServerLoginResult::TreatmentAssignment' has a wrong offset!");

// ScriptStruct PlayFab.AdminAddNewsRequest
// 0x0038 (0x0040 - 0x0008)
struct FAdminAddNewsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Body;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminAddNewsRequest) == 0x000008, "Wrong alignment on FAdminAddNewsRequest");
static_assert(sizeof(FAdminAddNewsRequest) == 0x000040, "Wrong size on FAdminAddNewsRequest");
static_assert(offsetof(FAdminAddNewsRequest, Body) == 0x000008, "Member 'FAdminAddNewsRequest::Body' has a wrong offset!");
static_assert(offsetof(FAdminAddNewsRequest, CustomTags) == 0x000018, "Member 'FAdminAddNewsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminAddNewsRequest, Timestamp) == 0x000020, "Member 'FAdminAddNewsRequest::Timestamp' has a wrong offset!");
static_assert(offsetof(FAdminAddNewsRequest, Title) == 0x000030, "Member 'FAdminAddNewsRequest::Title' has a wrong offset!");

// ScriptStruct PlayFab.AdminAddPlayerTagResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminAddPlayerTagResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminAddPlayerTagResult) == 0x000008, "Wrong alignment on FAdminAddPlayerTagResult");
static_assert(sizeof(FAdminAddPlayerTagResult) == 0x000008, "Wrong size on FAdminAddPlayerTagResult");

// ScriptStruct PlayFab.ClientGetTitleDataRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientGetTitleDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Keys;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverrideLabel;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetTitleDataRequest) == 0x000008, "Wrong alignment on FClientGetTitleDataRequest");
static_assert(sizeof(FClientGetTitleDataRequest) == 0x000028, "Wrong size on FClientGetTitleDataRequest");
static_assert(offsetof(FClientGetTitleDataRequest, Keys) == 0x000008, "Member 'FClientGetTitleDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FClientGetTitleDataRequest, OverrideLabel) == 0x000018, "Member 'FClientGetTitleDataRequest::OverrideLabel' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPolicyResponse
// 0x0028 (0x0030 - 0x0008)
struct FAdminGetPolicyResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 PolicyName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolicyVersion;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DC[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Statements;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPolicyResponse) == 0x000008, "Wrong alignment on FAdminGetPolicyResponse");
static_assert(sizeof(FAdminGetPolicyResponse) == 0x000030, "Wrong size on FAdminGetPolicyResponse");
static_assert(offsetof(FAdminGetPolicyResponse, PolicyName) == 0x000008, "Member 'FAdminGetPolicyResponse::PolicyName' has a wrong offset!");
static_assert(offsetof(FAdminGetPolicyResponse, PolicyVersion) == 0x000018, "Member 'FAdminGetPolicyResponse::PolicyVersion' has a wrong offset!");
static_assert(offsetof(FAdminGetPolicyResponse, Statements) == 0x000020, "Member 'FAdminGetPolicyResponse::Statements' has a wrong offset!");

// ScriptStruct PlayFab.AdminAddPlayerTagRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminAddPlayerTagRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminAddPlayerTagRequest) == 0x000008, "Wrong alignment on FAdminAddPlayerTagRequest");
static_assert(sizeof(FAdminAddPlayerTagRequest) == 0x000030, "Wrong size on FAdminAddPlayerTagRequest");
static_assert(offsetof(FAdminAddPlayerTagRequest, CustomTags) == 0x000008, "Member 'FAdminAddPlayerTagRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminAddPlayerTagRequest, PlayFabId) == 0x000010, "Member 'FAdminAddPlayerTagRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminAddPlayerTagRequest, TagName) == 0x000020, "Member 'FAdminAddPlayerTagRequest::TagName' has a wrong offset!");

// ScriptStruct PlayFab.AdminExportMasterPlayerDataResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminExportMasterPlayerDataResult final : public FPlayFabResultCommon
{
public:
	class FString                                 JobReceiptId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminExportMasterPlayerDataResult) == 0x000008, "Wrong alignment on FAdminExportMasterPlayerDataResult");
static_assert(sizeof(FAdminExportMasterPlayerDataResult) == 0x000018, "Wrong size on FAdminExportMasterPlayerDataResult");
static_assert(offsetof(FAdminExportMasterPlayerDataResult, JobReceiptId) == 0x000008, "Member 'FAdminExportMasterPlayerDataResult::JobReceiptId' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkXboxAccountRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerLinkXboxAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DD[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLinkXboxAccountRequest) == 0x000008, "Wrong alignment on FServerLinkXboxAccountRequest");
static_assert(sizeof(FServerLinkXboxAccountRequest) == 0x000038, "Wrong size on FServerLinkXboxAccountRequest");
static_assert(offsetof(FServerLinkXboxAccountRequest, CustomTags) == 0x000008, "Member 'FServerLinkXboxAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLinkXboxAccountRequest, ForceLink) == 0x000010, "Member 'FServerLinkXboxAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FServerLinkXboxAccountRequest, PlayFabId) == 0x000018, "Member 'FServerLinkXboxAccountRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerLinkXboxAccountRequest, XboxToken) == 0x000028, "Member 'FServerLinkXboxAccountRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerFindFriendLobbiesResult
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerFindFriendLobbiesResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Lobbies;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Pagination;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerFindFriendLobbiesResult) == 0x000008, "Wrong alignment on FMultiplayerFindFriendLobbiesResult");
static_assert(sizeof(FMultiplayerFindFriendLobbiesResult) == 0x000020, "Wrong size on FMultiplayerFindFriendLobbiesResult");
static_assert(offsetof(FMultiplayerFindFriendLobbiesResult, Lobbies) == 0x000008, "Member 'FMultiplayerFindFriendLobbiesResult::Lobbies' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindFriendLobbiesResult, Pagination) == 0x000018, "Member 'FMultiplayerFindFriendLobbiesResult::Pagination' has a wrong offset!");

// ScriptStruct PlayFab.AdminModifyUserVirtualCurrencyResult
// 0x0028 (0x0030 - 0x0008)
struct FAdminModifyUserVirtualCurrencyResult final : public FPlayFabResultCommon
{
public:
	int32                                         Balance;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BalanceChange;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminModifyUserVirtualCurrencyResult) == 0x000008, "Wrong alignment on FAdminModifyUserVirtualCurrencyResult");
static_assert(sizeof(FAdminModifyUserVirtualCurrencyResult) == 0x000030, "Wrong size on FAdminModifyUserVirtualCurrencyResult");
static_assert(offsetof(FAdminModifyUserVirtualCurrencyResult, Balance) == 0x000008, "Member 'FAdminModifyUserVirtualCurrencyResult::Balance' has a wrong offset!");
static_assert(offsetof(FAdminModifyUserVirtualCurrencyResult, BalanceChange) == 0x00000C, "Member 'FAdminModifyUserVirtualCurrencyResult::BalanceChange' has a wrong offset!");
static_assert(offsetof(FAdminModifyUserVirtualCurrencyResult, PlayFabId) == 0x000010, "Member 'FAdminModifyUserVirtualCurrencyResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminModifyUserVirtualCurrencyResult, VirtualCurrency) == 0x000020, "Member 'FAdminModifyUserVirtualCurrencyResult::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetActionsOnPlayersInSegmentTaskInstanceResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetActionsOnPlayersInSegmentTaskInstanceResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Parameter;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Summary;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetActionsOnPlayersInSegmentTaskInstanceResult) == 0x000008, "Wrong alignment on FAdminGetActionsOnPlayersInSegmentTaskInstanceResult");
static_assert(sizeof(FAdminGetActionsOnPlayersInSegmentTaskInstanceResult) == 0x000018, "Wrong size on FAdminGetActionsOnPlayersInSegmentTaskInstanceResult");
static_assert(offsetof(FAdminGetActionsOnPlayersInSegmentTaskInstanceResult, Parameter) == 0x000008, "Member 'FAdminGetActionsOnPlayersInSegmentTaskInstanceResult::Parameter' has a wrong offset!");
static_assert(offsetof(FAdminGetActionsOnPlayersInSegmentTaskInstanceResult, Summary) == 0x000010, "Member 'FAdminGetActionsOnPlayersInSegmentTaskInstanceResult::Summary' has a wrong offset!");

// ScriptStruct PlayFab.ClientSendAccountRecoveryEmailResult
// 0x0000 (0x0008 - 0x0008)
struct FClientSendAccountRecoveryEmailResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientSendAccountRecoveryEmailResult) == 0x000008, "Wrong alignment on FClientSendAccountRecoveryEmailResult");
static_assert(sizeof(FClientSendAccountRecoveryEmailResult) == 0x000008, "Wrong size on FClientSendAccountRecoveryEmailResult");

// ScriptStruct PlayFab.AdminAddUserVirtualCurrencyRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminAddUserVirtualCurrencyRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DE[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminAddUserVirtualCurrencyRequest) == 0x000008, "Wrong alignment on FAdminAddUserVirtualCurrencyRequest");
static_assert(sizeof(FAdminAddUserVirtualCurrencyRequest) == 0x000038, "Wrong size on FAdminAddUserVirtualCurrencyRequest");
static_assert(offsetof(FAdminAddUserVirtualCurrencyRequest, Amount) == 0x000008, "Member 'FAdminAddUserVirtualCurrencyRequest::Amount' has a wrong offset!");
static_assert(offsetof(FAdminAddUserVirtualCurrencyRequest, CustomTags) == 0x000010, "Member 'FAdminAddUserVirtualCurrencyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminAddUserVirtualCurrencyRequest, PlayFabId) == 0x000018, "Member 'FAdminAddUserVirtualCurrencyRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminAddUserVirtualCurrencyRequest, VirtualCurrency) == 0x000028, "Member 'FAdminAddUserVirtualCurrencyRequest::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetLeaderboardAroundPlayerResult
// 0x0028 (0x0030 - 0x0008)
struct FClientGetLeaderboardAroundPlayerResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NextReset;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DF[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGetLeaderboardAroundPlayerResult) == 0x000008, "Wrong alignment on FClientGetLeaderboardAroundPlayerResult");
static_assert(sizeof(FClientGetLeaderboardAroundPlayerResult) == 0x000030, "Wrong size on FClientGetLeaderboardAroundPlayerResult");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerResult, Leaderboard) == 0x000008, "Member 'FClientGetLeaderboardAroundPlayerResult::Leaderboard' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerResult, NextReset) == 0x000018, "Member 'FClientGetLeaderboardAroundPlayerResult::NextReset' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerResult, Version) == 0x000028, "Member 'FClientGetLeaderboardAroundPlayerResult::Version' has a wrong offset!");

// ScriptStruct PlayFab.AdminBlankResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminBlankResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminBlankResult) == 0x000008, "Wrong alignment on FAdminBlankResult");
static_assert(sizeof(FAdminBlankResult) == 0x000008, "Wrong size on FAdminBlankResult");

// ScriptStruct PlayFab.AdminGetCatalogItemsResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetCatalogItemsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Catalog;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetCatalogItemsResult) == 0x000008, "Wrong alignment on FAdminGetCatalogItemsResult");
static_assert(sizeof(FAdminGetCatalogItemsResult) == 0x000018, "Wrong size on FAdminGetCatalogItemsResult");
static_assert(offsetof(FAdminGetCatalogItemsResult, Catalog) == 0x000008, "Member 'FAdminGetCatalogItemsResult::Catalog' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetUserDataRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientGetUserDataRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         IfChangedFromDataVersion;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keys;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetUserDataRequest) == 0x000008, "Wrong alignment on FClientGetUserDataRequest");
static_assert(sizeof(FClientGetUserDataRequest) == 0x000030, "Wrong size on FClientGetUserDataRequest");
static_assert(offsetof(FClientGetUserDataRequest, IfChangedFromDataVersion) == 0x000008, "Member 'FClientGetUserDataRequest::IfChangedFromDataVersion' has a wrong offset!");
static_assert(offsetof(FClientGetUserDataRequest, Keys) == 0x000010, "Member 'FClientGetUserDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FClientGetUserDataRequest, PlayFabId) == 0x000020, "Member 'FClientGetUserDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetSegmentsResponse
// 0x0020 (0x0028 - 0x0008)
struct FAdminGetSegmentsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Segments;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetSegmentsResponse) == 0x000008, "Wrong alignment on FAdminGetSegmentsResponse");
static_assert(sizeof(FAdminGetSegmentsResponse) == 0x000028, "Wrong size on FAdminGetSegmentsResponse");
static_assert(offsetof(FAdminGetSegmentsResponse, ErrorMessage) == 0x000008, "Member 'FAdminGetSegmentsResponse::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FAdminGetSegmentsResponse, Segments) == 0x000018, "Member 'FAdminGetSegmentsResponse::Segments' has a wrong offset!");

// ScriptStruct PlayFab.DataDeleteFilesResponse
// 0x0010 (0x0018 - 0x0008)
struct FDataDeleteFilesResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Entity;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E1[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataDeleteFilesResponse) == 0x000008, "Wrong alignment on FDataDeleteFilesResponse");
static_assert(sizeof(FDataDeleteFilesResponse) == 0x000018, "Wrong size on FDataDeleteFilesResponse");
static_assert(offsetof(FDataDeleteFilesResponse, Entity) == 0x000008, "Member 'FDataDeleteFilesResponse::Entity' has a wrong offset!");
static_assert(offsetof(FDataDeleteFilesResponse, ProfileVersion) == 0x000010, "Member 'FDataDeleteFilesResponse::ProfileVersion' has a wrong offset!");

// ScriptStruct PlayFab.AdminAddVirtualCurrencyTypesRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminAddVirtualCurrencyTypesRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             VirtualCurrencies;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminAddVirtualCurrencyTypesRequest) == 0x000008, "Wrong alignment on FAdminAddVirtualCurrencyTypesRequest");
static_assert(sizeof(FAdminAddVirtualCurrencyTypesRequest) == 0x000018, "Wrong size on FAdminAddVirtualCurrencyTypesRequest");
static_assert(offsetof(FAdminAddVirtualCurrencyTypesRequest, VirtualCurrencies) == 0x000008, "Member 'FAdminAddVirtualCurrencyTypesRequest::VirtualCurrencies' has a wrong offset!");

// ScriptStruct PlayFab.AdminBanUsersResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminBanUsersResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminBanUsersResult) == 0x000008, "Wrong alignment on FAdminBanUsersResult");
static_assert(sizeof(FAdminBanUsersResult) == 0x000018, "Wrong size on FAdminBanUsersResult");
static_assert(offsetof(FAdminBanUsersResult, BanData) == 0x000008, "Member 'FAdminBanUsersResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromGenericIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromGenericIDsRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             GenericIDs;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromGenericIDsRequest) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromGenericIDsRequest");
static_assert(sizeof(FServerGetPlayFabIDsFromGenericIDsRequest) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromGenericIDsRequest");
static_assert(offsetof(FServerGetPlayFabIDsFromGenericIDsRequest, GenericIDs) == 0x000008, "Member 'FServerGetPlayFabIDsFromGenericIDsRequest::GenericIDs' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListMultiplayerServersResponse
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerListMultiplayerServersResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             MultiplayerServerSummaries;                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E2[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListMultiplayerServersResponse) == 0x000008, "Wrong alignment on FMultiplayerListMultiplayerServersResponse");
static_assert(sizeof(FMultiplayerListMultiplayerServersResponse) == 0x000030, "Wrong size on FMultiplayerListMultiplayerServersResponse");
static_assert(offsetof(FMultiplayerListMultiplayerServersResponse, MultiplayerServerSummaries) == 0x000008, "Member 'FMultiplayerListMultiplayerServersResponse::MultiplayerServerSummaries' has a wrong offset!");
static_assert(offsetof(FMultiplayerListMultiplayerServersResponse, PageSize) == 0x000018, "Member 'FMultiplayerListMultiplayerServersResponse::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListMultiplayerServersResponse, SkipToken) == 0x000020, "Member 'FMultiplayerListMultiplayerServersResponse::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetAssetDownloadUrlRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetAssetDownloadUrlRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetAssetDownloadUrlRequest) == 0x000008, "Wrong alignment on FMultiplayerGetAssetDownloadUrlRequest");
static_assert(sizeof(FMultiplayerGetAssetDownloadUrlRequest) == 0x000020, "Wrong size on FMultiplayerGetAssetDownloadUrlRequest");
static_assert(offsetof(FMultiplayerGetAssetDownloadUrlRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetAssetDownloadUrlRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetAssetDownloadUrlRequest, Filename) == 0x000010, "Member 'FMultiplayerGetAssetDownloadUrlRequest::Filename' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetCloudScriptTaskInstanceResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetCloudScriptTaskInstanceResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Parameter;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Summary;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetCloudScriptTaskInstanceResult) == 0x000008, "Wrong alignment on FAdminGetCloudScriptTaskInstanceResult");
static_assert(sizeof(FAdminGetCloudScriptTaskInstanceResult) == 0x000018, "Wrong size on FAdminGetCloudScriptTaskInstanceResult");
static_assert(offsetof(FAdminGetCloudScriptTaskInstanceResult, Parameter) == 0x000008, "Member 'FAdminGetCloudScriptTaskInstanceResult::Parameter' has a wrong offset!");
static_assert(offsetof(FAdminGetCloudScriptTaskInstanceResult, Summary) == 0x000010, "Member 'FAdminGetCloudScriptTaskInstanceResult::Summary' has a wrong offset!");

// ScriptStruct PlayFab.AdminBanUsersRequest
// 0x0018 (0x0020 - 0x0008)
struct FAdminBanUsersRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Bans;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminBanUsersRequest) == 0x000008, "Wrong alignment on FAdminBanUsersRequest");
static_assert(sizeof(FAdminBanUsersRequest) == 0x000020, "Wrong size on FAdminBanUsersRequest");
static_assert(offsetof(FAdminBanUsersRequest, Bans) == 0x000008, "Member 'FAdminBanUsersRequest::Bans' has a wrong offset!");
static_assert(offsetof(FAdminBanUsersRequest, CustomTags) == 0x000018, "Member 'FAdminBanUsersRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithGooglePlayGamesServicesRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientLoginWithGooglePlayGamesServicesRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerAuthCode;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithGooglePlayGamesServicesRequest) == 0x000008, "Wrong alignment on FClientLoginWithGooglePlayGamesServicesRequest");
static_assert(sizeof(FClientLoginWithGooglePlayGamesServicesRequest) == 0x000050, "Wrong size on FClientLoginWithGooglePlayGamesServicesRequest");
static_assert(offsetof(FClientLoginWithGooglePlayGamesServicesRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithGooglePlayGamesServicesRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGooglePlayGamesServicesRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithGooglePlayGamesServicesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGooglePlayGamesServicesRequest, EncryptedRequest) == 0x000018, "Member 'FClientLoginWithGooglePlayGamesServicesRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGooglePlayGamesServicesRequest, InfoRequestParameters) == 0x000028, "Member 'FClientLoginWithGooglePlayGamesServicesRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGooglePlayGamesServicesRequest, PlayerSecret) == 0x000030, "Member 'FClientLoginWithGooglePlayGamesServicesRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGooglePlayGamesServicesRequest, ServerAuthCode) == 0x000040, "Member 'FClientLoginWithGooglePlayGamesServicesRequest::ServerAuthCode' has a wrong offset!");

// ScriptStruct PlayFab.AdminLookupUserAccountInfoResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminLookupUserAccountInfoResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     UserInfo;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminLookupUserAccountInfoResult) == 0x000008, "Wrong alignment on FAdminLookupUserAccountInfoResult");
static_assert(sizeof(FAdminLookupUserAccountInfoResult) == 0x000010, "Wrong size on FAdminLookupUserAccountInfoResult");
static_assert(offsetof(FAdminLookupUserAccountInfoResult, UserInfo) == 0x000008, "Member 'FAdminLookupUserAccountInfoResult::UserInfo' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkGameCenterAccountRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkGameCenterAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkGameCenterAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkGameCenterAccountRequest");
static_assert(sizeof(FClientUnlinkGameCenterAccountRequest) == 0x000010, "Wrong size on FClientUnlinkGameCenterAccountRequest");
static_assert(offsetof(FClientUnlinkGameCenterAccountRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkGameCenterAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumeItemRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientConsumeItemRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumeCount;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E4[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemInstanceId;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConsumeItemRequest) == 0x000008, "Wrong alignment on FClientConsumeItemRequest");
static_assert(sizeof(FClientConsumeItemRequest) == 0x000038, "Wrong size on FClientConsumeItemRequest");
static_assert(offsetof(FClientConsumeItemRequest, CharacterId) == 0x000008, "Member 'FClientConsumeItemRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientConsumeItemRequest, ConsumeCount) == 0x000018, "Member 'FClientConsumeItemRequest::ConsumeCount' has a wrong offset!");
static_assert(offsetof(FClientConsumeItemRequest, CustomTags) == 0x000020, "Member 'FClientConsumeItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientConsumeItemRequest, ItemInstanceId) == 0x000028, "Member 'FClientConsumeItemRequest::ItemInstanceId' has a wrong offset!");

// ScriptStruct PlayFab.AdminCheckLimitedEditionItemAvailabilityResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminCheckLimitedEditionItemAvailabilityResult final : public FPlayFabResultCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E5[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminCheckLimitedEditionItemAvailabilityResult) == 0x000008, "Wrong alignment on FAdminCheckLimitedEditionItemAvailabilityResult");
static_assert(sizeof(FAdminCheckLimitedEditionItemAvailabilityResult) == 0x000010, "Wrong size on FAdminCheckLimitedEditionItemAvailabilityResult");
static_assert(offsetof(FAdminCheckLimitedEditionItemAvailabilityResult, Amount) == 0x000008, "Member 'FAdminCheckLimitedEditionItemAvailabilityResult::Amount' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesSetProfileLanguageResponse
// 0x0008 (0x0010 - 0x0008)
struct FProfilesSetProfileLanguageResponse final : public FPlayFabResultCommon
{
public:
	EOperationTypes                               OperationResult;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E6[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VersionNumber;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesSetProfileLanguageResponse) == 0x000008, "Wrong alignment on FProfilesSetProfileLanguageResponse");
static_assert(sizeof(FProfilesSetProfileLanguageResponse) == 0x000010, "Wrong size on FProfilesSetProfileLanguageResponse");
static_assert(offsetof(FProfilesSetProfileLanguageResponse, OperationResult) == 0x000008, "Member 'FProfilesSetProfileLanguageResponse::OperationResult' has a wrong offset!");
static_assert(offsetof(FProfilesSetProfileLanguageResponse, VersionNumber) == 0x00000C, "Member 'FProfilesSetProfileLanguageResponse::VersionNumber' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetTaskInstanceRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetTaskInstanceRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 TaskInstanceId;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetTaskInstanceRequest) == 0x000008, "Wrong alignment on FAdminGetTaskInstanceRequest");
static_assert(sizeof(FAdminGetTaskInstanceRequest) == 0x000018, "Wrong size on FAdminGetTaskInstanceRequest");
static_assert(offsetof(FAdminGetTaskInstanceRequest, TaskInstanceId) == 0x000008, "Member 'FAdminGetTaskInstanceRequest::TaskInstanceId' has a wrong offset!");

// ScriptStruct PlayFab.ServerDeletePushNotificationTemplateRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerDeletePushNotificationTemplateRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PushNotificationTemplateId;                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerDeletePushNotificationTemplateRequest) == 0x000008, "Wrong alignment on FServerDeletePushNotificationTemplateRequest");
static_assert(sizeof(FServerDeletePushNotificationTemplateRequest) == 0x000018, "Wrong size on FServerDeletePushNotificationTemplateRequest");
static_assert(offsetof(FServerDeletePushNotificationTemplateRequest, PushNotificationTemplateId) == 0x000008, "Member 'FServerDeletePushNotificationTemplateRequest::PushNotificationTemplateId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetContentListResult
// 0x0018 (0x0020 - 0x0008)
struct FAdminGetContentListResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Contents;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSize;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetContentListResult) == 0x000008, "Wrong alignment on FAdminGetContentListResult");
static_assert(sizeof(FAdminGetContentListResult) == 0x000020, "Wrong size on FAdminGetContentListResult");
static_assert(offsetof(FAdminGetContentListResult, Contents) == 0x000008, "Member 'FAdminGetContentListResult::Contents' has a wrong offset!");
static_assert(offsetof(FAdminGetContentListResult, ItemCount) == 0x000018, "Member 'FAdminGetContentListResult::ItemCount' has a wrong offset!");
static_assert(offsetof(FAdminGetContentListResult, TotalSize) == 0x00001C, "Member 'FAdminGetContentListResult::TotalSize' has a wrong offset!");

// ScriptStruct PlayFab.AdminCheckLimitedEditionItemAvailabilityRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminCheckLimitedEditionItemAvailabilityRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCheckLimitedEditionItemAvailabilityRequest) == 0x000008, "Wrong alignment on FAdminCheckLimitedEditionItemAvailabilityRequest");
static_assert(sizeof(FAdminCheckLimitedEditionItemAvailabilityRequest) == 0x000028, "Wrong size on FAdminCheckLimitedEditionItemAvailabilityRequest");
static_assert(offsetof(FAdminCheckLimitedEditionItemAvailabilityRequest, CatalogVersion) == 0x000008, "Member 'FAdminCheckLimitedEditionItemAvailabilityRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FAdminCheckLimitedEditionItemAvailabilityRequest, ItemId) == 0x000018, "Member 'FAdminCheckLimitedEditionItemAvailabilityRequest::ItemId' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreateTaskResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminCreateTaskResult final : public FPlayFabResultCommon
{
public:
	class FString                                 TaskId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreateTaskResult) == 0x000008, "Wrong alignment on FAdminCreateTaskResult");
static_assert(sizeof(FAdminCreateTaskResult) == 0x000018, "Wrong size on FAdminCreateTaskResult");
static_assert(offsetof(FAdminCreateTaskResult, TaskId) == 0x000008, "Member 'FAdminCreateTaskResult::TaskId' has a wrong offset!");

// ScriptStruct PlayFab.ClientListUsersCharactersResult
// 0x0010 (0x0018 - 0x0008)
struct FClientListUsersCharactersResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Characters;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientListUsersCharactersResult) == 0x000008, "Wrong alignment on FClientListUsersCharactersResult");
static_assert(sizeof(FClientListUsersCharactersResult) == 0x000018, "Wrong size on FClientListUsersCharactersResult");
static_assert(offsetof(FClientListUsersCharactersResult, Characters) == 0x000008, "Member 'FClientListUsersCharactersResult::Characters' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetDataReportResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetDataReportResult final : public FPlayFabResultCommon
{
public:
	class FString                                 DownloadUrl;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetDataReportResult) == 0x000008, "Wrong alignment on FAdminGetDataReportResult");
static_assert(sizeof(FAdminGetDataReportResult) == 0x000018, "Wrong size on FAdminGetDataReportResult");
static_assert(offsetof(FAdminGetDataReportResult, DownloadUrl) == 0x000008, "Member 'FAdminGetDataReportResult::DownloadUrl' has a wrong offset!");

// ScriptStruct PlayFab.ServerDeleteCharacterFromUserRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerDeleteCharacterFromUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SaveCharacterInventory;                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E7[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerDeleteCharacterFromUserRequest) == 0x000008, "Wrong alignment on FServerDeleteCharacterFromUserRequest");
static_assert(sizeof(FServerDeleteCharacterFromUserRequest) == 0x000038, "Wrong size on FServerDeleteCharacterFromUserRequest");
static_assert(offsetof(FServerDeleteCharacterFromUserRequest, CharacterId) == 0x000008, "Member 'FServerDeleteCharacterFromUserRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerDeleteCharacterFromUserRequest, CustomTags) == 0x000018, "Member 'FServerDeleteCharacterFromUserRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerDeleteCharacterFromUserRequest, PlayFabId) == 0x000020, "Member 'FServerDeleteCharacterFromUserRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerDeleteCharacterFromUserRequest, SaveCharacterInventory) == 0x000030, "Member 'FServerDeleteCharacterFromUserRequest::SaveCharacterInventory' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreateActionsOnPlayerSegmentTaskRequest
// 0x0048 (0x0050 - 0x0008)
struct FAdminCreateActionsOnPlayerSegmentTaskRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E8[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Parameter;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Schedule;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreateActionsOnPlayerSegmentTaskRequest) == 0x000008, "Wrong alignment on FAdminCreateActionsOnPlayerSegmentTaskRequest");
static_assert(sizeof(FAdminCreateActionsOnPlayerSegmentTaskRequest) == 0x000050, "Wrong size on FAdminCreateActionsOnPlayerSegmentTaskRequest");
static_assert(offsetof(FAdminCreateActionsOnPlayerSegmentTaskRequest, CustomTags) == 0x000008, "Member 'FAdminCreateActionsOnPlayerSegmentTaskRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminCreateActionsOnPlayerSegmentTaskRequest, Description) == 0x000010, "Member 'FAdminCreateActionsOnPlayerSegmentTaskRequest::Description' has a wrong offset!");
static_assert(offsetof(FAdminCreateActionsOnPlayerSegmentTaskRequest, IsActive) == 0x000020, "Member 'FAdminCreateActionsOnPlayerSegmentTaskRequest::IsActive' has a wrong offset!");
static_assert(offsetof(FAdminCreateActionsOnPlayerSegmentTaskRequest, Name) == 0x000028, "Member 'FAdminCreateActionsOnPlayerSegmentTaskRequest::Name' has a wrong offset!");
static_assert(offsetof(FAdminCreateActionsOnPlayerSegmentTaskRequest, Parameter) == 0x000038, "Member 'FAdminCreateActionsOnPlayerSegmentTaskRequest::Parameter' has a wrong offset!");
static_assert(offsetof(FAdminCreateActionsOnPlayerSegmentTaskRequest, Schedule) == 0x000040, "Member 'FAdminCreateActionsOnPlayerSegmentTaskRequest::Schedule' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemPlayStationStoreInventoryItemsRequest
// 0x0050 (0x0058 - 0x0008)
struct FEconomyRedeemPlayStationStoreInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AuthorizationCode;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollectionId;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUri;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServiceLabel;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemPlayStationStoreInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyRedeemPlayStationStoreInventoryItemsRequest");
static_assert(sizeof(FEconomyRedeemPlayStationStoreInventoryItemsRequest) == 0x000058, "Wrong size on FEconomyRedeemPlayStationStoreInventoryItemsRequest");
static_assert(offsetof(FEconomyRedeemPlayStationStoreInventoryItemsRequest, AuthorizationCode) == 0x000008, "Member 'FEconomyRedeemPlayStationStoreInventoryItemsRequest::AuthorizationCode' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemPlayStationStoreInventoryItemsRequest, CollectionId) == 0x000018, "Member 'FEconomyRedeemPlayStationStoreInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemPlayStationStoreInventoryItemsRequest, CustomTags) == 0x000028, "Member 'FEconomyRedeemPlayStationStoreInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemPlayStationStoreInventoryItemsRequest, Entity) == 0x000030, "Member 'FEconomyRedeemPlayStationStoreInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemPlayStationStoreInventoryItemsRequest, RedirectUri) == 0x000038, "Member 'FEconomyRedeemPlayStationStoreInventoryItemsRequest::RedirectUri' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemPlayStationStoreInventoryItemsRequest, ServiceLabel) == 0x000048, "Member 'FEconomyRedeemPlayStationStoreInventoryItemsRequest::ServiceLabel' has a wrong offset!");

// ScriptStruct PlayFab.ServerSavePushNotificationTemplateResult
// 0x0010 (0x0018 - 0x0008)
struct FServerSavePushNotificationTemplateResult final : public FPlayFabResultCommon
{
public:
	class FString                                 PushNotificationTemplateId;                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSavePushNotificationTemplateResult) == 0x000008, "Wrong alignment on FServerSavePushNotificationTemplateResult");
static_assert(sizeof(FServerSavePushNotificationTemplateResult) == 0x000018, "Wrong size on FServerSavePushNotificationTemplateResult");
static_assert(offsetof(FServerSavePushNotificationTemplateResult, PushNotificationTemplateId) == 0x000008, "Member 'FServerSavePushNotificationTemplateResult::PushNotificationTemplateId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerTagsResult
// 0x0020 (0x0028 - 0x0008)
struct FServerGetPlayerTagsResult final : public FPlayFabResultCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tags;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerTagsResult) == 0x000008, "Wrong alignment on FServerGetPlayerTagsResult");
static_assert(sizeof(FServerGetPlayerTagsResult) == 0x000028, "Wrong size on FServerGetPlayerTagsResult");
static_assert(offsetof(FServerGetPlayerTagsResult, PlayFabId) == 0x000008, "Member 'FServerGetPlayerTagsResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerTagsResult, Tags) == 0x000018, "Member 'FServerGetPlayerTagsResult::Tags' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumePS5EntitlementsRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientConsumePS5EntitlementsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MarketplaceSpecificData;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConsumePS5EntitlementsRequest) == 0x000008, "Wrong alignment on FClientConsumePS5EntitlementsRequest");
static_assert(sizeof(FClientConsumePS5EntitlementsRequest) == 0x000028, "Wrong size on FClientConsumePS5EntitlementsRequest");
static_assert(offsetof(FClientConsumePS5EntitlementsRequest, CatalogVersion) == 0x000008, "Member 'FClientConsumePS5EntitlementsRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientConsumePS5EntitlementsRequest, CustomTags) == 0x000018, "Member 'FClientConsumePS5EntitlementsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientConsumePS5EntitlementsRequest, MarketplaceSpecificData) == 0x000020, "Member 'FClientConsumePS5EntitlementsRequest::MarketplaceSpecificData' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreateCloudScriptTaskRequest
// 0x0048 (0x0050 - 0x0008)
struct FAdminCreateCloudScriptTaskRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E9[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Parameter;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Schedule;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreateCloudScriptTaskRequest) == 0x000008, "Wrong alignment on FAdminCreateCloudScriptTaskRequest");
static_assert(sizeof(FAdminCreateCloudScriptTaskRequest) == 0x000050, "Wrong size on FAdminCreateCloudScriptTaskRequest");
static_assert(offsetof(FAdminCreateCloudScriptTaskRequest, CustomTags) == 0x000008, "Member 'FAdminCreateCloudScriptTaskRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminCreateCloudScriptTaskRequest, Description) == 0x000010, "Member 'FAdminCreateCloudScriptTaskRequest::Description' has a wrong offset!");
static_assert(offsetof(FAdminCreateCloudScriptTaskRequest, IsActive) == 0x000020, "Member 'FAdminCreateCloudScriptTaskRequest::IsActive' has a wrong offset!");
static_assert(offsetof(FAdminCreateCloudScriptTaskRequest, Name) == 0x000028, "Member 'FAdminCreateCloudScriptTaskRequest::Name' has a wrong offset!");
static_assert(offsetof(FAdminCreateCloudScriptTaskRequest, Parameter) == 0x000038, "Member 'FAdminCreateCloudScriptTaskRequest::Parameter' has a wrong offset!");
static_assert(offsetof(FAdminCreateCloudScriptTaskRequest, Schedule) == 0x000040, "Member 'FAdminCreateCloudScriptTaskRequest::Schedule' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerTagsResult
// 0x0020 (0x0028 - 0x0008)
struct FAdminGetPlayerTagsResult final : public FPlayFabResultCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tags;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerTagsResult) == 0x000008, "Wrong alignment on FAdminGetPlayerTagsResult");
static_assert(sizeof(FAdminGetPlayerTagsResult) == 0x000028, "Wrong size on FAdminGetPlayerTagsResult");
static_assert(offsetof(FAdminGetPlayerTagsResult, PlayFabId) == 0x000008, "Member 'FAdminGetPlayerTagsResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayerTagsResult, Tags) == 0x000018, "Member 'FAdminGetPlayerTagsResult::Tags' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreateInsightsScheduledScalingTaskRequest
// 0x0048 (0x0050 - 0x0008)
struct FAdminCreateInsightsScheduledScalingTaskRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EA[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Parameter;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Schedule;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreateInsightsScheduledScalingTaskRequest) == 0x000008, "Wrong alignment on FAdminCreateInsightsScheduledScalingTaskRequest");
static_assert(sizeof(FAdminCreateInsightsScheduledScalingTaskRequest) == 0x000050, "Wrong size on FAdminCreateInsightsScheduledScalingTaskRequest");
static_assert(offsetof(FAdminCreateInsightsScheduledScalingTaskRequest, CustomTags) == 0x000008, "Member 'FAdminCreateInsightsScheduledScalingTaskRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminCreateInsightsScheduledScalingTaskRequest, Description) == 0x000010, "Member 'FAdminCreateInsightsScheduledScalingTaskRequest::Description' has a wrong offset!");
static_assert(offsetof(FAdminCreateInsightsScheduledScalingTaskRequest, IsActive) == 0x000020, "Member 'FAdminCreateInsightsScheduledScalingTaskRequest::IsActive' has a wrong offset!");
static_assert(offsetof(FAdminCreateInsightsScheduledScalingTaskRequest, Name) == 0x000028, "Member 'FAdminCreateInsightsScheduledScalingTaskRequest::Name' has a wrong offset!");
static_assert(offsetof(FAdminCreateInsightsScheduledScalingTaskRequest, Parameter) == 0x000038, "Member 'FAdminCreateInsightsScheduledScalingTaskRequest::Parameter' has a wrong offset!");
static_assert(offsetof(FAdminCreateInsightsScheduledScalingTaskRequest, Schedule) == 0x000040, "Member 'FAdminCreateInsightsScheduledScalingTaskRequest::Schedule' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromFacebookIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromFacebookIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FacebookIDs;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromFacebookIDsRequest) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromFacebookIDsRequest");
static_assert(sizeof(FServerGetPlayFabIDsFromFacebookIDsRequest) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromFacebookIDsRequest");
static_assert(offsetof(FServerGetPlayFabIDsFromFacebookIDsRequest, FacebookIDs) == 0x000008, "Member 'FServerGetPlayFabIDsFromFacebookIDsRequest::FacebookIDs' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreateOpenIdConnectionRequest
// 0x0050 (0x0058 - 0x0008)
struct FAdminCreateOpenIdConnectionRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ClientId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientSecret;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectionId;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreNonce;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EB[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IssuerDiscoveryUrl;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     IssuerInformation;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreateOpenIdConnectionRequest) == 0x000008, "Wrong alignment on FAdminCreateOpenIdConnectionRequest");
static_assert(sizeof(FAdminCreateOpenIdConnectionRequest) == 0x000058, "Wrong size on FAdminCreateOpenIdConnectionRequest");
static_assert(offsetof(FAdminCreateOpenIdConnectionRequest, ClientId) == 0x000008, "Member 'FAdminCreateOpenIdConnectionRequest::ClientId' has a wrong offset!");
static_assert(offsetof(FAdminCreateOpenIdConnectionRequest, ClientSecret) == 0x000018, "Member 'FAdminCreateOpenIdConnectionRequest::ClientSecret' has a wrong offset!");
static_assert(offsetof(FAdminCreateOpenIdConnectionRequest, ConnectionId) == 0x000028, "Member 'FAdminCreateOpenIdConnectionRequest::ConnectionId' has a wrong offset!");
static_assert(offsetof(FAdminCreateOpenIdConnectionRequest, IgnoreNonce) == 0x000038, "Member 'FAdminCreateOpenIdConnectionRequest::IgnoreNonce' has a wrong offset!");
static_assert(offsetof(FAdminCreateOpenIdConnectionRequest, IssuerDiscoveryUrl) == 0x000040, "Member 'FAdminCreateOpenIdConnectionRequest::IssuerDiscoveryUrl' has a wrong offset!");
static_assert(offsetof(FAdminCreateOpenIdConnectionRequest, IssuerInformation) == 0x000050, "Member 'FAdminCreateOpenIdConnectionRequest::IssuerInformation' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerStatisticsRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerGetPlayerStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticNames;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             StatisticNameVersions;                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerStatisticsRequest) == 0x000008, "Wrong alignment on FServerGetPlayerStatisticsRequest");
static_assert(sizeof(FServerGetPlayerStatisticsRequest) == 0x000040, "Wrong size on FServerGetPlayerStatisticsRequest");
static_assert(offsetof(FServerGetPlayerStatisticsRequest, CustomTags) == 0x000008, "Member 'FServerGetPlayerStatisticsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerStatisticsRequest, PlayFabId) == 0x000010, "Member 'FServerGetPlayerStatisticsRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerStatisticsRequest, StatisticNames) == 0x000020, "Member 'FServerGetPlayerStatisticsRequest::StatisticNames' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerStatisticsRequest, StatisticNameVersions) == 0x000030, "Member 'FServerGetPlayerStatisticsRequest::StatisticNameVersions' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreatePlayerSharedSecretResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminCreatePlayerSharedSecretResult final : public FPlayFabResultCommon
{
public:
	class FString                                 SecretKey;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreatePlayerSharedSecretResult) == 0x000008, "Wrong alignment on FAdminCreatePlayerSharedSecretResult");
static_assert(sizeof(FAdminCreatePlayerSharedSecretResult) == 0x000018, "Wrong size on FAdminCreatePlayerSharedSecretResult");
static_assert(offsetof(FAdminCreatePlayerSharedSecretResult, SecretKey) == 0x000008, "Member 'FAdminCreatePlayerSharedSecretResult::SecretKey' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromKongregateIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromKongregateIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromKongregateIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromKongregateIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromKongregateIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromKongregateIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromKongregateIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromKongregateIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreatePlayerSharedSecretRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminCreatePlayerSharedSecretRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FriendlyName;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreatePlayerSharedSecretRequest) == 0x000008, "Wrong alignment on FAdminCreatePlayerSharedSecretRequest");
static_assert(sizeof(FAdminCreatePlayerSharedSecretRequest) == 0x000018, "Wrong size on FAdminCreatePlayerSharedSecretRequest");
static_assert(offsetof(FAdminCreatePlayerSharedSecretRequest, FriendlyName) == 0x000008, "Member 'FAdminCreatePlayerSharedSecretRequest::FriendlyName' has a wrong offset!");

// ScriptStruct PlayFab.ClientRemoveFriendRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientRemoveFriendRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FriendPlayFabId;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRemoveFriendRequest) == 0x000008, "Wrong alignment on FClientRemoveFriendRequest");
static_assert(sizeof(FClientRemoveFriendRequest) == 0x000018, "Wrong size on FClientRemoveFriendRequest");
static_assert(offsetof(FClientRemoveFriendRequest, FriendPlayFabId) == 0x000008, "Member 'FClientRemoveFriendRequest::FriendPlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerAddFriendRequest
// 0x0050 (0x0058 - 0x0008)
struct FServerAddFriendRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FriendEmail;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendPlayFabId;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendTitleDisplayName;                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendUsername;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAddFriendRequest) == 0x000008, "Wrong alignment on FServerAddFriendRequest");
static_assert(sizeof(FServerAddFriendRequest) == 0x000058, "Wrong size on FServerAddFriendRequest");
static_assert(offsetof(FServerAddFriendRequest, FriendEmail) == 0x000008, "Member 'FServerAddFriendRequest::FriendEmail' has a wrong offset!");
static_assert(offsetof(FServerAddFriendRequest, FriendPlayFabId) == 0x000018, "Member 'FServerAddFriendRequest::FriendPlayFabId' has a wrong offset!");
static_assert(offsetof(FServerAddFriendRequest, FriendTitleDisplayName) == 0x000028, "Member 'FServerAddFriendRequest::FriendTitleDisplayName' has a wrong offset!");
static_assert(offsetof(FServerAddFriendRequest, FriendUsername) == 0x000038, "Member 'FServerAddFriendRequest::FriendUsername' has a wrong offset!");
static_assert(offsetof(FServerAddFriendRequest, PlayFabId) == 0x000048, "Member 'FServerAddFriendRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetMatchmakerGameModesResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetMatchmakerGameModesResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             GameModes;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetMatchmakerGameModesResult) == 0x000008, "Wrong alignment on FAdminGetMatchmakerGameModesResult");
static_assert(sizeof(FAdminGetMatchmakerGameModesResult) == 0x000018, "Wrong size on FAdminGetMatchmakerGameModesResult");
static_assert(offsetof(FAdminGetMatchmakerGameModesResult, GameModes) == 0x000008, "Member 'FAdminGetMatchmakerGameModesResult::GameModes' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreatePlayerStatisticDefinitionResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminCreatePlayerStatisticDefinitionResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Statistic;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreatePlayerStatisticDefinitionResult) == 0x000008, "Wrong alignment on FAdminCreatePlayerStatisticDefinitionResult");
static_assert(sizeof(FAdminCreatePlayerStatisticDefinitionResult) == 0x000010, "Wrong size on FAdminCreatePlayerStatisticDefinitionResult");
static_assert(offsetof(FAdminCreatePlayerStatisticDefinitionResult, Statistic) == 0x000008, "Member 'FAdminCreatePlayerStatisticDefinitionResult::Statistic' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromXboxLiveIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromXboxLiveIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromXboxLiveIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromXboxLiveIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromXboxLiveIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromXboxLiveIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromXboxLiveIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromXboxLiveIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerUnsubscribeFromLobbyResourceRequest
// 0x0038 (0x0040 - 0x0008)
struct FMultiplayerUnsubscribeFromLobbyResourceRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     EntityKey;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PubSubConnectionHandle;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceId;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubscriptionVersion;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubscriptionType                             Type;                                              // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EC[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerUnsubscribeFromLobbyResourceRequest) == 0x000008, "Wrong alignment on FMultiplayerUnsubscribeFromLobbyResourceRequest");
static_assert(sizeof(FMultiplayerUnsubscribeFromLobbyResourceRequest) == 0x000040, "Wrong size on FMultiplayerUnsubscribeFromLobbyResourceRequest");
static_assert(offsetof(FMultiplayerUnsubscribeFromLobbyResourceRequest, CustomTags) == 0x000008, "Member 'FMultiplayerUnsubscribeFromLobbyResourceRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerUnsubscribeFromLobbyResourceRequest, EntityKey) == 0x000010, "Member 'FMultiplayerUnsubscribeFromLobbyResourceRequest::EntityKey' has a wrong offset!");
static_assert(offsetof(FMultiplayerUnsubscribeFromLobbyResourceRequest, PubSubConnectionHandle) == 0x000018, "Member 'FMultiplayerUnsubscribeFromLobbyResourceRequest::PubSubConnectionHandle' has a wrong offset!");
static_assert(offsetof(FMultiplayerUnsubscribeFromLobbyResourceRequest, ResourceId) == 0x000028, "Member 'FMultiplayerUnsubscribeFromLobbyResourceRequest::ResourceId' has a wrong offset!");
static_assert(offsetof(FMultiplayerUnsubscribeFromLobbyResourceRequest, SubscriptionVersion) == 0x000038, "Member 'FMultiplayerUnsubscribeFromLobbyResourceRequest::SubscriptionVersion' has a wrong offset!");
static_assert(offsetof(FMultiplayerUnsubscribeFromLobbyResourceRequest, Type) == 0x00003C, "Member 'FMultiplayerUnsubscribeFromLobbyResourceRequest::Type' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreatePlayerStatisticDefinitionRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminCreatePlayerStatisticDefinitionRequest final : public FPlayFabRequestCommon
{
public:
	EStatisticAggregationMethod                   AggregationMethod;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20ED[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatisticResetIntervalOption                 VersionChangeInterval;                             // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EE[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminCreatePlayerStatisticDefinitionRequest) == 0x000008, "Wrong alignment on FAdminCreatePlayerStatisticDefinitionRequest");
static_assert(sizeof(FAdminCreatePlayerStatisticDefinitionRequest) == 0x000030, "Wrong size on FAdminCreatePlayerStatisticDefinitionRequest");
static_assert(offsetof(FAdminCreatePlayerStatisticDefinitionRequest, AggregationMethod) == 0x000008, "Member 'FAdminCreatePlayerStatisticDefinitionRequest::AggregationMethod' has a wrong offset!");
static_assert(offsetof(FAdminCreatePlayerStatisticDefinitionRequest, CustomTags) == 0x000010, "Member 'FAdminCreatePlayerStatisticDefinitionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminCreatePlayerStatisticDefinitionRequest, StatisticName) == 0x000018, "Member 'FAdminCreatePlayerStatisticDefinitionRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FAdminCreatePlayerStatisticDefinitionRequest, VersionChangeInterval) == 0x000028, "Member 'FAdminCreatePlayerStatisticDefinitionRequest::VersionChangeInterval' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemReviewSummaryRequest
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetItemReviewSummaryRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemReviewSummaryRequest) == 0x000008, "Wrong alignment on FEconomyGetItemReviewSummaryRequest");
static_assert(sizeof(FEconomyGetItemReviewSummaryRequest) == 0x000028, "Wrong size on FEconomyGetItemReviewSummaryRequest");
static_assert(offsetof(FEconomyGetItemReviewSummaryRequest, AlternateId) == 0x000008, "Member 'FEconomyGetItemReviewSummaryRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewSummaryRequest, CustomTags) == 0x000010, "Member 'FEconomyGetItemReviewSummaryRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewSummaryRequest, ID) == 0x000018, "Member 'FEconomyGetItemReviewSummaryRequest::ID' has a wrong offset!");

// ScriptStruct PlayFab.AdminExportPlayersInSegmentRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminExportPlayersInSegmentRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SegmentId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminExportPlayersInSegmentRequest) == 0x000008, "Wrong alignment on FAdminExportPlayersInSegmentRequest");
static_assert(sizeof(FAdminExportPlayersInSegmentRequest) == 0x000018, "Wrong size on FAdminExportPlayersInSegmentRequest");
static_assert(offsetof(FAdminExportPlayersInSegmentRequest, SegmentId) == 0x000008, "Member 'FAdminExportPlayersInSegmentRequest::SegmentId' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreateSegmentResponse
// 0x0020 (0x0028 - 0x0008)
struct FAdminCreateSegmentResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SegmentId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreateSegmentResponse) == 0x000008, "Wrong alignment on FAdminCreateSegmentResponse");
static_assert(sizeof(FAdminCreateSegmentResponse) == 0x000028, "Wrong size on FAdminCreateSegmentResponse");
static_assert(offsetof(FAdminCreateSegmentResponse, ErrorMessage) == 0x000008, "Member 'FAdminCreateSegmentResponse::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FAdminCreateSegmentResponse, SegmentId) == 0x000018, "Member 'FAdminCreateSegmentResponse::SegmentId' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetLatestScorecardRequest
// 0x0018 (0x0020 - 0x0008)
struct FExperimentationGetLatestScorecardRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExperimentId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetLatestScorecardRequest) == 0x000008, "Wrong alignment on FExperimentationGetLatestScorecardRequest");
static_assert(sizeof(FExperimentationGetLatestScorecardRequest) == 0x000020, "Wrong size on FExperimentationGetLatestScorecardRequest");
static_assert(offsetof(FExperimentationGetLatestScorecardRequest, CustomTags) == 0x000008, "Member 'FExperimentationGetLatestScorecardRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationGetLatestScorecardRequest, ExperimentId) == 0x000010, "Member 'FExperimentationGetLatestScorecardRequest::ExperimentId' has a wrong offset!");

// ScriptStruct PlayFab.AdminCreateSegmentRequest
// 0x0008 (0x0010 - 0x0008)
struct FAdminCreateSegmentRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     SegmentModel;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminCreateSegmentRequest) == 0x000008, "Wrong alignment on FAdminCreateSegmentRequest");
static_assert(sizeof(FAdminCreateSegmentRequest) == 0x000010, "Wrong size on FAdminCreateSegmentRequest");
static_assert(offsetof(FAdminCreateSegmentRequest, SegmentModel) == 0x000008, "Member 'FAdminCreateSegmentRequest::SegmentModel' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemModerationStateRequest
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetItemModerationStateRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemModerationStateRequest) == 0x000008, "Wrong alignment on FEconomyGetItemModerationStateRequest");
static_assert(sizeof(FEconomyGetItemModerationStateRequest) == 0x000028, "Wrong size on FEconomyGetItemModerationStateRequest");
static_assert(offsetof(FEconomyGetItemModerationStateRequest, AlternateId) == 0x000008, "Member 'FEconomyGetItemModerationStateRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemModerationStateRequest, CustomTags) == 0x000010, "Member 'FEconomyGetItemModerationStateRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemModerationStateRequest, ID) == 0x000018, "Member 'FEconomyGetItemModerationStateRequest::ID' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetTitleNewsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetTitleNewsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             News;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetTitleNewsResult) == 0x000008, "Wrong alignment on FClientGetTitleNewsResult");
static_assert(sizeof(FClientGetTitleNewsResult) == 0x000018, "Wrong size on FClientGetTitleNewsResult");
static_assert(offsetof(FClientGetTitleNewsResult, News) == 0x000008, "Member 'FClientGetTitleNewsResult::News' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteMasterPlayerAccountResult
// 0x0020 (0x0028 - 0x0008)
struct FAdminDeleteMasterPlayerAccountResult final : public FPlayFabResultCommon
{
public:
	class FString                                 JobReceiptId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleIds;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteMasterPlayerAccountResult) == 0x000008, "Wrong alignment on FAdminDeleteMasterPlayerAccountResult");
static_assert(sizeof(FAdminDeleteMasterPlayerAccountResult) == 0x000028, "Wrong size on FAdminDeleteMasterPlayerAccountResult");
static_assert(offsetof(FAdminDeleteMasterPlayerAccountResult, JobReceiptId) == 0x000008, "Member 'FAdminDeleteMasterPlayerAccountResult::JobReceiptId' has a wrong offset!");
static_assert(offsetof(FAdminDeleteMasterPlayerAccountResult, TitleIds) == 0x000018, "Member 'FAdminDeleteMasterPlayerAccountResult::TitleIds' has a wrong offset!");

// ScriptStruct PlayFab.DataGetObjectsRequest
// 0x0018 (0x0020 - 0x0008)
struct FDataGetObjectsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EscapeObject;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EF[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataGetObjectsRequest) == 0x000008, "Wrong alignment on FDataGetObjectsRequest");
static_assert(sizeof(FDataGetObjectsRequest) == 0x000020, "Wrong size on FDataGetObjectsRequest");
static_assert(offsetof(FDataGetObjectsRequest, CustomTags) == 0x000008, "Member 'FDataGetObjectsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FDataGetObjectsRequest, Entity) == 0x000010, "Member 'FDataGetObjectsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FDataGetObjectsRequest, EscapeObject) == 0x000018, "Member 'FDataGetObjectsRequest::EscapeObject' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCharacterLeaderboardResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetCharacterLeaderboardResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCharacterLeaderboardResult) == 0x000008, "Wrong alignment on FServerGetCharacterLeaderboardResult");
static_assert(sizeof(FServerGetCharacterLeaderboardResult) == 0x000018, "Wrong size on FServerGetCharacterLeaderboardResult");
static_assert(offsetof(FServerGetCharacterLeaderboardResult, Leaderboard) == 0x000008, "Member 'FServerGetCharacterLeaderboardResult::Leaderboard' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerRemoveMemberFromLobbyRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerRemoveMemberFromLobbyRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MemberEntity;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreventRejoin;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F0[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerRemoveMemberFromLobbyRequest) == 0x000008, "Wrong alignment on FMultiplayerRemoveMemberFromLobbyRequest");
static_assert(sizeof(FMultiplayerRemoveMemberFromLobbyRequest) == 0x000030, "Wrong size on FMultiplayerRemoveMemberFromLobbyRequest");
static_assert(offsetof(FMultiplayerRemoveMemberFromLobbyRequest, CustomTags) == 0x000008, "Member 'FMultiplayerRemoveMemberFromLobbyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerRemoveMemberFromLobbyRequest, LobbyId) == 0x000010, "Member 'FMultiplayerRemoveMemberFromLobbyRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FMultiplayerRemoveMemberFromLobbyRequest, MemberEntity) == 0x000020, "Member 'FMultiplayerRemoveMemberFromLobbyRequest::MemberEntity' has a wrong offset!");
static_assert(offsetof(FMultiplayerRemoveMemberFromLobbyRequest, PreventRejoin) == 0x000028, "Member 'FMultiplayerRemoveMemberFromLobbyRequest::PreventRejoin' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerIdFromAuthTokenResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPlayerIdFromAuthTokenResult final : public FPlayFabResultCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerIdFromAuthTokenResult) == 0x000008, "Wrong alignment on FAdminGetPlayerIdFromAuthTokenResult");
static_assert(sizeof(FAdminGetPlayerIdFromAuthTokenResult) == 0x000018, "Wrong size on FAdminGetPlayerIdFromAuthTokenResult");
static_assert(offsetof(FAdminGetPlayerIdFromAuthTokenResult, PlayFabId) == 0x000008, "Member 'FAdminGetPlayerIdFromAuthTokenResult::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptExecuteFunctionRequest
// 0x0030 (0x0038 - 0x0008)
struct FCloudScriptExecuteFunctionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionParameter;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GeneratePlayStreamEvent;                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F1[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudScriptExecuteFunctionRequest) == 0x000008, "Wrong alignment on FCloudScriptExecuteFunctionRequest");
static_assert(sizeof(FCloudScriptExecuteFunctionRequest) == 0x000038, "Wrong size on FCloudScriptExecuteFunctionRequest");
static_assert(offsetof(FCloudScriptExecuteFunctionRequest, CustomTags) == 0x000008, "Member 'FCloudScriptExecuteFunctionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteFunctionRequest, Entity) == 0x000010, "Member 'FCloudScriptExecuteFunctionRequest::Entity' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteFunctionRequest, FunctionName) == 0x000018, "Member 'FCloudScriptExecuteFunctionRequest::FunctionName' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteFunctionRequest, FunctionParameter) == 0x000028, "Member 'FCloudScriptExecuteFunctionRequest::FunctionParameter' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteFunctionRequest, GeneratePlayStreamEvent) == 0x000030, "Member 'FCloudScriptExecuteFunctionRequest::GeneratePlayStreamEvent' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteMembershipSubscriptionResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminDeleteMembershipSubscriptionResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminDeleteMembershipSubscriptionResult) == 0x000008, "Wrong alignment on FAdminDeleteMembershipSubscriptionResult");
static_assert(sizeof(FAdminDeleteMembershipSubscriptionResult) == 0x000008, "Wrong size on FAdminDeleteMembershipSubscriptionResult");

// ScriptStruct PlayFab.ClientRegisterPlayFabUserRequest
// 0x0078 (0x0080 - 0x0008)
struct FClientRegisterPlayFabUserRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequireBothUsernameAndEmail;                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F2[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Username;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRegisterPlayFabUserRequest) == 0x000008, "Wrong alignment on FClientRegisterPlayFabUserRequest");
static_assert(sizeof(FClientRegisterPlayFabUserRequest) == 0x000080, "Wrong size on FClientRegisterPlayFabUserRequest");
static_assert(offsetof(FClientRegisterPlayFabUserRequest, CustomTags) == 0x000008, "Member 'FClientRegisterPlayFabUserRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserRequest, DisplayName) == 0x000010, "Member 'FClientRegisterPlayFabUserRequest::DisplayName' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserRequest, Email) == 0x000020, "Member 'FClientRegisterPlayFabUserRequest::Email' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserRequest, EncryptedRequest) == 0x000030, "Member 'FClientRegisterPlayFabUserRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserRequest, InfoRequestParameters) == 0x000040, "Member 'FClientRegisterPlayFabUserRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserRequest, Password) == 0x000048, "Member 'FClientRegisterPlayFabUserRequest::Password' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserRequest, PlayerSecret) == 0x000058, "Member 'FClientRegisterPlayFabUserRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserRequest, RequireBothUsernameAndEmail) == 0x000068, "Member 'FClientRegisterPlayFabUserRequest::RequireBothUsernameAndEmail' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserRequest, Username) == 0x000070, "Member 'FClientRegisterPlayFabUserRequest::Username' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeletePlayerSharedSecretResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminDeletePlayerSharedSecretResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminDeletePlayerSharedSecretResult) == 0x000008, "Wrong alignment on FAdminDeletePlayerSharedSecretResult");
static_assert(sizeof(FAdminDeletePlayerSharedSecretResult) == 0x000008, "Wrong size on FAdminDeletePlayerSharedSecretResult");

// ScriptStruct PlayFab.ClientGetTitlePublicKeyResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetTitlePublicKeyResult final : public FPlayFabResultCommon
{
public:
	class FString                                 RSAPublicKey;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetTitlePublicKeyResult) == 0x000008, "Wrong alignment on FClientGetTitlePublicKeyResult");
static_assert(sizeof(FClientGetTitlePublicKeyResult) == 0x000018, "Wrong size on FClientGetTitlePublicKeyResult");
static_assert(offsetof(FClientGetTitlePublicKeyResult, RSAPublicKey) == 0x000008, "Member 'FClientGetTitlePublicKeyResult::RSAPublicKey' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetTitleDataResult
// 0x0008 (0x0010 - 0x0008)
struct FClientGetTitleDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetTitleDataResult) == 0x000008, "Wrong alignment on FClientGetTitleDataResult");
static_assert(sizeof(FClientGetTitleDataResult) == 0x000010, "Wrong size on FClientGetTitleDataResult");
static_assert(offsetof(FClientGetTitleDataResult, Data) == 0x000008, "Member 'FClientGetTitleDataResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteStoreResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminDeleteStoreResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminDeleteStoreResult) == 0x000008, "Wrong alignment on FAdminDeleteStoreResult");
static_assert(sizeof(FAdminDeleteStoreResult) == 0x000008, "Wrong size on FAdminDeleteStoreResult");

// ScriptStruct PlayFab.ClientGetTradeStatusRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientGetTradeStatusRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 OfferingPlayerId;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TradeId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetTradeStatusRequest) == 0x000008, "Wrong alignment on FClientGetTradeStatusRequest");
static_assert(sizeof(FClientGetTradeStatusRequest) == 0x000028, "Wrong size on FClientGetTradeStatusRequest");
static_assert(offsetof(FClientGetTradeStatusRequest, OfferingPlayerId) == 0x000008, "Member 'FClientGetTradeStatusRequest::OfferingPlayerId' has a wrong offset!");
static_assert(offsetof(FClientGetTradeStatusRequest, TradeId) == 0x000018, "Member 'FClientGetTradeStatusRequest::TradeId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerStatisticDefinitionsResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPlayerStatisticDefinitionsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Statistics;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerStatisticDefinitionsResult) == 0x000008, "Wrong alignment on FAdminGetPlayerStatisticDefinitionsResult");
static_assert(sizeof(FAdminGetPlayerStatisticDefinitionsResult) == 0x000018, "Wrong size on FAdminGetPlayerStatisticDefinitionsResult");
static_assert(offsetof(FAdminGetPlayerStatisticDefinitionsResult, Statistics) == 0x000008, "Member 'FAdminGetPlayerStatisticDefinitionsResult::Statistics' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteTitleDataOverrideResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminDeleteTitleDataOverrideResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminDeleteTitleDataOverrideResult) == 0x000008, "Wrong alignment on FAdminDeleteTitleDataOverrideResult");
static_assert(sizeof(FAdminDeleteTitleDataOverrideResult) == 0x000008, "Wrong size on FAdminDeleteTitleDataOverrideResult");

// ScriptStruct PlayFab.AdminExportPlayersInSegmentResult
// 0x0020 (0x0028 - 0x0008)
struct FAdminExportPlayersInSegmentResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ExportId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SegmentId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminExportPlayersInSegmentResult) == 0x000008, "Wrong alignment on FAdminExportPlayersInSegmentResult");
static_assert(sizeof(FAdminExportPlayersInSegmentResult) == 0x000028, "Wrong size on FAdminExportPlayersInSegmentResult");
static_assert(offsetof(FAdminExportPlayersInSegmentResult, ExportId) == 0x000008, "Member 'FAdminExportPlayersInSegmentResult::ExportId' has a wrong offset!");
static_assert(offsetof(FAdminExportPlayersInSegmentResult, SegmentId) == 0x000018, "Member 'FAdminExportPlayersInSegmentResult::SegmentId' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetExclusionGroupsResult
// 0x0010 (0x0018 - 0x0008)
struct FExperimentationGetExclusionGroupsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             ExclusionGroups;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetExclusionGroupsResult) == 0x000008, "Wrong alignment on FExperimentationGetExclusionGroupsResult");
static_assert(sizeof(FExperimentationGetExclusionGroupsResult) == 0x000018, "Wrong size on FExperimentationGetExclusionGroupsResult");
static_assert(offsetof(FExperimentationGetExclusionGroupsResult, ExclusionGroups) == 0x000008, "Member 'FExperimentationGetExclusionGroupsResult::ExclusionGroups' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetAllSegmentsResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetAllSegmentsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Segments;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetAllSegmentsResult) == 0x000008, "Wrong alignment on FAdminGetAllSegmentsResult");
static_assert(sizeof(FAdminGetAllSegmentsResult) == 0x000018, "Wrong size on FAdminGetAllSegmentsResult");
static_assert(offsetof(FAdminGetAllSegmentsResult, Segments) == 0x000008, "Member 'FAdminGetAllSegmentsResult::Segments' has a wrong offset!");

// ScriptStruct PlayFab.ServerDeleteCharacterFromUserResult
// 0x0000 (0x0008 - 0x0008)
struct FServerDeleteCharacterFromUserResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerDeleteCharacterFromUserResult) == 0x000008, "Wrong alignment on FServerDeleteCharacterFromUserResult");
static_assert(sizeof(FServerDeleteCharacterFromUserResult) == 0x000008, "Wrong size on FServerDeleteCharacterFromUserResult");

// ScriptStruct PlayFab.AdminGetPublisherDataResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminGetPublisherDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPublisherDataResult) == 0x000008, "Wrong alignment on FAdminGetPublisherDataResult");
static_assert(sizeof(FAdminGetPublisherDataResult) == 0x000010, "Wrong size on FAdminGetPublisherDataResult");
static_assert(offsetof(FAdminGetPublisherDataResult, Data) == 0x000008, "Member 'FAdminGetPublisherDataResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetUserInventoryRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientGetUserInventoryRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetUserInventoryRequest) == 0x000008, "Wrong alignment on FClientGetUserInventoryRequest");
static_assert(sizeof(FClientGetUserInventoryRequest) == 0x000010, "Wrong size on FClientGetUserInventoryRequest");
static_assert(offsetof(FClientGetUserInventoryRequest, CustomTags) == 0x000008, "Member 'FClientGetUserInventoryRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateBuildAliasRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerCreateBuildAliasRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AliasName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             BuildSelectionCriteria;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateBuildAliasRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateBuildAliasRequest");
static_assert(sizeof(FMultiplayerCreateBuildAliasRequest) == 0x000030, "Wrong size on FMultiplayerCreateBuildAliasRequest");
static_assert(offsetof(FMultiplayerCreateBuildAliasRequest, AliasName) == 0x000008, "Member 'FMultiplayerCreateBuildAliasRequest::AliasName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildAliasRequest, BuildSelectionCriteria) == 0x000018, "Member 'FMultiplayerCreateBuildAliasRequest::BuildSelectionCriteria' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildAliasRequest, CustomTags) == 0x000028, "Member 'FMultiplayerCreateBuildAliasRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayedTitleListResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPlayedTitleListResult final : public FPlayFabResultCommon
{
public:
	class FString                                 TitleIds;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayedTitleListResult) == 0x000008, "Wrong alignment on FAdminGetPlayedTitleListResult");
static_assert(sizeof(FAdminGetPlayedTitleListResult) == 0x000018, "Wrong size on FAdminGetPlayedTitleListResult");
static_assert(offsetof(FAdminGetPlayedTitleListResult, TitleIds) == 0x000008, "Member 'FAdminGetPlayedTitleListResult::TitleIds' has a wrong offset!");

// ScriptStruct PlayFab.ServerNotifyMatchmakerPlayerLeftRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerNotifyMatchmakerPlayerLeftRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerNotifyMatchmakerPlayerLeftRequest) == 0x000008, "Wrong alignment on FServerNotifyMatchmakerPlayerLeftRequest");
static_assert(sizeof(FServerNotifyMatchmakerPlayerLeftRequest) == 0x000030, "Wrong size on FServerNotifyMatchmakerPlayerLeftRequest");
static_assert(offsetof(FServerNotifyMatchmakerPlayerLeftRequest, CustomTags) == 0x000008, "Member 'FServerNotifyMatchmakerPlayerLeftRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerNotifyMatchmakerPlayerLeftRequest, LobbyId) == 0x000010, "Member 'FServerNotifyMatchmakerPlayerLeftRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FServerNotifyMatchmakerPlayerLeftRequest, PlayFabId) == 0x000020, "Member 'FServerNotifyMatchmakerPlayerLeftRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminRefundPurchaseResponse
// 0x0010 (0x0018 - 0x0008)
struct FAdminRefundPurchaseResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 PurchaseStatus;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRefundPurchaseResponse) == 0x000008, "Wrong alignment on FAdminRefundPurchaseResponse");
static_assert(sizeof(FAdminRefundPurchaseResponse) == 0x000018, "Wrong size on FAdminRefundPurchaseResponse");
static_assert(offsetof(FAdminRefundPurchaseResponse, PurchaseStatus) == 0x000008, "Member 'FAdminRefundPurchaseResponse::PurchaseStatus' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetCloudScriptRevisionResult
// 0x0030 (0x0038 - 0x0008)
struct FAdminGetCloudScriptRevisionResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CreatedAt;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Files;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsPublished;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F3[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Revision;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F4[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminGetCloudScriptRevisionResult) == 0x000008, "Wrong alignment on FAdminGetCloudScriptRevisionResult");
static_assert(sizeof(FAdminGetCloudScriptRevisionResult) == 0x000038, "Wrong size on FAdminGetCloudScriptRevisionResult");
static_assert(offsetof(FAdminGetCloudScriptRevisionResult, CreatedAt) == 0x000008, "Member 'FAdminGetCloudScriptRevisionResult::CreatedAt' has a wrong offset!");
static_assert(offsetof(FAdminGetCloudScriptRevisionResult, Files) == 0x000018, "Member 'FAdminGetCloudScriptRevisionResult::Files' has a wrong offset!");
static_assert(offsetof(FAdminGetCloudScriptRevisionResult, IsPublished) == 0x000028, "Member 'FAdminGetCloudScriptRevisionResult::IsPublished' has a wrong offset!");
static_assert(offsetof(FAdminGetCloudScriptRevisionResult, Revision) == 0x00002C, "Member 'FAdminGetCloudScriptRevisionResult::Revision' has a wrong offset!");
static_assert(offsetof(FAdminGetCloudScriptRevisionResult, Version) == 0x000030, "Member 'FAdminGetCloudScriptRevisionResult::Version' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetStoreItemsResult
// 0x0040 (0x0048 - 0x0008)
struct FAdminGetStoreItemsResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MarketingData;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPfSourceType                                 Source;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F5[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Store;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetStoreItemsResult) == 0x000008, "Wrong alignment on FAdminGetStoreItemsResult");
static_assert(sizeof(FAdminGetStoreItemsResult) == 0x000048, "Wrong size on FAdminGetStoreItemsResult");
static_assert(offsetof(FAdminGetStoreItemsResult, CatalogVersion) == 0x000008, "Member 'FAdminGetStoreItemsResult::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FAdminGetStoreItemsResult, MarketingData) == 0x000018, "Member 'FAdminGetStoreItemsResult::MarketingData' has a wrong offset!");
static_assert(offsetof(FAdminGetStoreItemsResult, Source) == 0x000020, "Member 'FAdminGetStoreItemsResult::Source' has a wrong offset!");
static_assert(offsetof(FAdminGetStoreItemsResult, Store) == 0x000028, "Member 'FAdminGetStoreItemsResult::Store' has a wrong offset!");
static_assert(offsetof(FAdminGetStoreItemsResult, StoreId) == 0x000038, "Member 'FAdminGetStoreItemsResult::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCancelAllServerBackfillTicketsForPlayerRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest) == 0x000008, "Wrong alignment on FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest");
static_assert(sizeof(FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest) == 0x000028, "Wrong size on FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest");
static_assert(offsetof(FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, CustomTags) == 0x000008, "Member 'FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, Entity) == 0x000010, "Member 'FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest::Entity' has a wrong offset!");
static_assert(offsetof(FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, QueueName) == 0x000018, "Member 'FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest::QueueName' has a wrong offset!");

// ScriptStruct PlayFab.ServerDeleteSharedGroupRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerDeleteSharedGroupRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SharedGroupId;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerDeleteSharedGroupRequest) == 0x000008, "Wrong alignment on FServerDeleteSharedGroupRequest");
static_assert(sizeof(FServerDeleteSharedGroupRequest) == 0x000018, "Wrong size on FServerDeleteSharedGroupRequest");
static_assert(offsetof(FServerDeleteSharedGroupRequest, SharedGroupId) == 0x000008, "Member 'FServerDeleteSharedGroupRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetCloudScriptVersionsResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetCloudScriptVersionsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Versions;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetCloudScriptVersionsResult) == 0x000008, "Wrong alignment on FAdminGetCloudScriptVersionsResult");
static_assert(sizeof(FAdminGetCloudScriptVersionsResult) == 0x000018, "Wrong size on FAdminGetCloudScriptVersionsResult");
static_assert(offsetof(FAdminGetCloudScriptVersionsResult, Versions) == 0x000008, "Member 'FAdminGetCloudScriptVersionsResult::Versions' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerSharedSecretsResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPlayerSharedSecretsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             SharedSecrets;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerSharedSecretsResult) == 0x000008, "Wrong alignment on FAdminGetPlayerSharedSecretsResult");
static_assert(sizeof(FAdminGetPlayerSharedSecretsResult) == 0x000018, "Wrong size on FAdminGetPlayerSharedSecretsResult");
static_assert(offsetof(FAdminGetPlayerSharedSecretsResult, SharedSecrets) == 0x000008, "Member 'FAdminGetPlayerSharedSecretsResult::SharedSecrets' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetContentUploadUrlResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetContentUploadUrlResult final : public FPlayFabResultCommon
{
public:
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetContentUploadUrlResult) == 0x000008, "Wrong alignment on FAdminGetContentUploadUrlResult");
static_assert(sizeof(FAdminGetContentUploadUrlResult) == 0x000018, "Wrong size on FAdminGetContentUploadUrlResult");
static_assert(offsetof(FAdminGetContentUploadUrlResult, URL) == 0x000008, "Member 'FAdminGetContentUploadUrlResult::URL' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetCatalogConfigResponse
// 0x0008 (0x0010 - 0x0008)
struct FEconomyGetCatalogConfigResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Config;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetCatalogConfigResponse) == 0x000008, "Wrong alignment on FEconomyGetCatalogConfigResponse");
static_assert(sizeof(FEconomyGetCatalogConfigResponse) == 0x000010, "Wrong size on FEconomyGetCatalogConfigResponse");
static_assert(offsetof(FEconomyGetCatalogConfigResponse, Config) == 0x000008, "Member 'FEconomyGetCatalogConfigResponse::Config' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkXboxAccountRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkXboxAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F6[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 XboxToken;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkXboxAccountRequest) == 0x000008, "Wrong alignment on FClientLinkXboxAccountRequest");
static_assert(sizeof(FClientLinkXboxAccountRequest) == 0x000028, "Wrong size on FClientLinkXboxAccountRequest");
static_assert(offsetof(FClientLinkXboxAccountRequest, CustomTags) == 0x000008, "Member 'FClientLinkXboxAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkXboxAccountRequest, ForceLink) == 0x000010, "Member 'FClientLinkXboxAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkXboxAccountRequest, XboxToken) == 0x000018, "Member 'FClientLinkXboxAccountRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetMatchmakerGameInfoResult
// 0x00B0 (0x00B8 - 0x0008)
struct FAdminGetMatchmakerGameInfoResult final : public FPlayFabResultCommon
{
public:
	class FString                                 BuildVersion;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndTime;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mode;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Players;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERegion                                       Region;                                            // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F7[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerIPV4Address;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerIPV6Address;                                 // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F8[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerPublicDNSName;                               // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartTime;                                         // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleId;                                           // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetMatchmakerGameInfoResult) == 0x000008, "Wrong alignment on FAdminGetMatchmakerGameInfoResult");
static_assert(sizeof(FAdminGetMatchmakerGameInfoResult) == 0x0000B8, "Wrong size on FAdminGetMatchmakerGameInfoResult");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, BuildVersion) == 0x000008, "Member 'FAdminGetMatchmakerGameInfoResult::BuildVersion' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, EndTime) == 0x000018, "Member 'FAdminGetMatchmakerGameInfoResult::EndTime' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, LobbyId) == 0x000028, "Member 'FAdminGetMatchmakerGameInfoResult::LobbyId' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, Mode) == 0x000038, "Member 'FAdminGetMatchmakerGameInfoResult::Mode' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, Players) == 0x000048, "Member 'FAdminGetMatchmakerGameInfoResult::Players' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, Region) == 0x000058, "Member 'FAdminGetMatchmakerGameInfoResult::Region' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, ServerIPV4Address) == 0x000060, "Member 'FAdminGetMatchmakerGameInfoResult::ServerIPV4Address' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, ServerIPV6Address) == 0x000070, "Member 'FAdminGetMatchmakerGameInfoResult::ServerIPV6Address' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, ServerPort) == 0x000080, "Member 'FAdminGetMatchmakerGameInfoResult::ServerPort' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, ServerPublicDNSName) == 0x000088, "Member 'FAdminGetMatchmakerGameInfoResult::ServerPublicDNSName' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, StartTime) == 0x000098, "Member 'FAdminGetMatchmakerGameInfoResult::StartTime' has a wrong offset!");
static_assert(offsetof(FAdminGetMatchmakerGameInfoResult, TitleId) == 0x0000A8, "Member 'FAdminGetMatchmakerGameInfoResult::TitleId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetTimeRequest
// 0x0000 (0x0008 - 0x0008)
struct FClientGetTimeRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FClientGetTimeRequest) == 0x000008, "Wrong alignment on FClientGetTimeRequest");
static_assert(sizeof(FClientGetTimeRequest) == 0x000008, "Wrong size on FClientGetTimeRequest");

// ScriptStruct PlayFab.EconomyRedeemGooglePlayInventoryItemsRequest
// 0x0030 (0x0038 - 0x0008)
struct FEconomyRedeemGooglePlayInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Purchases;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemGooglePlayInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyRedeemGooglePlayInventoryItemsRequest");
static_assert(sizeof(FEconomyRedeemGooglePlayInventoryItemsRequest) == 0x000038, "Wrong size on FEconomyRedeemGooglePlayInventoryItemsRequest");
static_assert(offsetof(FEconomyRedeemGooglePlayInventoryItemsRequest, CollectionId) == 0x000008, "Member 'FEconomyRedeemGooglePlayInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemGooglePlayInventoryItemsRequest, CustomTags) == 0x000018, "Member 'FEconomyRedeemGooglePlayInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemGooglePlayInventoryItemsRequest, Entity) == 0x000020, "Member 'FEconomyRedeemGooglePlayInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemGooglePlayInventoryItemsRequest, Purchases) == 0x000028, "Member 'FEconomyRedeemGooglePlayInventoryItemsRequest::Purchases' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerProfileResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminGetPlayerProfileResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     PlayerProfile;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerProfileResult) == 0x000008, "Wrong alignment on FAdminGetPlayerProfileResult");
static_assert(sizeof(FAdminGetPlayerProfileResult) == 0x000010, "Wrong size on FAdminGetPlayerProfileResult");
static_assert(offsetof(FAdminGetPlayerProfileResult, PlayerProfile) == 0x000008, "Member 'FAdminGetPlayerProfileResult::PlayerProfile' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlinkServerCustomIdResult
// 0x0000 (0x0008 - 0x0008)
struct FServerUnlinkServerCustomIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerUnlinkServerCustomIdResult) == 0x000008, "Wrong alignment on FServerUnlinkServerCustomIdResult");
static_assert(sizeof(FServerUnlinkServerCustomIdResult) == 0x000008, "Wrong size on FServerUnlinkServerCustomIdResult");

// ScriptStruct PlayFab.AdminGetPlayerSegmentsResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPlayerSegmentsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Segments;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerSegmentsResult) == 0x000008, "Wrong alignment on FAdminGetPlayerSegmentsResult");
static_assert(sizeof(FAdminGetPlayerSegmentsResult) == 0x000018, "Wrong size on FAdminGetPlayerSegmentsResult");
static_assert(offsetof(FAdminGetPlayerSegmentsResult, Segments) == 0x000008, "Member 'FAdminGetPlayerSegmentsResult::Segments' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateBansResult
// 0x0010 (0x0018 - 0x0008)
struct FServerUpdateBansResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdateBansResult) == 0x000008, "Wrong alignment on FServerUpdateBansResult");
static_assert(sizeof(FServerUpdateBansResult) == 0x000018, "Wrong size on FServerUpdateBansResult");
static_assert(offsetof(FServerUpdateBansResult, BanData) == 0x000008, "Member 'FServerUpdateBansResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayersInSegmentExportResponse
// 0x0020 (0x0028 - 0x0008)
struct FAdminGetPlayersInSegmentExportResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 IndexUrl;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 State;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayersInSegmentExportResponse) == 0x000008, "Wrong alignment on FAdminGetPlayersInSegmentExportResponse");
static_assert(sizeof(FAdminGetPlayersInSegmentExportResponse) == 0x000028, "Wrong size on FAdminGetPlayersInSegmentExportResponse");
static_assert(offsetof(FAdminGetPlayersInSegmentExportResponse, IndexUrl) == 0x000008, "Member 'FAdminGetPlayersInSegmentExportResponse::IndexUrl' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayersInSegmentExportResponse, State) == 0x000018, "Member 'FAdminGetPlayersInSegmentExportResponse::State' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdatePolicyRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminUpdatePolicyRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          OverwritePolicy;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PolicyName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PolicyVersion;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FA[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Statements;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdatePolicyRequest) == 0x000008, "Wrong alignment on FAdminUpdatePolicyRequest");
static_assert(sizeof(FAdminUpdatePolicyRequest) == 0x000038, "Wrong size on FAdminUpdatePolicyRequest");
static_assert(offsetof(FAdminUpdatePolicyRequest, OverwritePolicy) == 0x000008, "Member 'FAdminUpdatePolicyRequest::OverwritePolicy' has a wrong offset!");
static_assert(offsetof(FAdminUpdatePolicyRequest, PolicyName) == 0x000010, "Member 'FAdminUpdatePolicyRequest::PolicyName' has a wrong offset!");
static_assert(offsetof(FAdminUpdatePolicyRequest, PolicyVersion) == 0x000020, "Member 'FAdminUpdatePolicyRequest::PolicyVersion' has a wrong offset!");
static_assert(offsetof(FAdminUpdatePolicyRequest, Statements) == 0x000028, "Member 'FAdminUpdatePolicyRequest::Statements' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetTaskInstancesResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetTaskInstancesResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Summaries;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetTaskInstancesResult) == 0x000008, "Wrong alignment on FAdminGetTaskInstancesResult");
static_assert(sizeof(FAdminGetTaskInstancesResult) == 0x000018, "Wrong size on FAdminGetTaskInstancesResult");
static_assert(offsetof(FAdminGetTaskInstancesResult, Summaries) == 0x000008, "Member 'FAdminGetTaskInstancesResult::Summaries' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateOpenIdConnectionRequest
// 0x0048 (0x0050 - 0x0008)
struct FAdminUpdateOpenIdConnectionRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ClientId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientSecret;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectionId;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IssuerDiscoveryUrl;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     IssuerInformation;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateOpenIdConnectionRequest) == 0x000008, "Wrong alignment on FAdminUpdateOpenIdConnectionRequest");
static_assert(sizeof(FAdminUpdateOpenIdConnectionRequest) == 0x000050, "Wrong size on FAdminUpdateOpenIdConnectionRequest");
static_assert(offsetof(FAdminUpdateOpenIdConnectionRequest, ClientId) == 0x000008, "Member 'FAdminUpdateOpenIdConnectionRequest::ClientId' has a wrong offset!");
static_assert(offsetof(FAdminUpdateOpenIdConnectionRequest, ClientSecret) == 0x000018, "Member 'FAdminUpdateOpenIdConnectionRequest::ClientSecret' has a wrong offset!");
static_assert(offsetof(FAdminUpdateOpenIdConnectionRequest, ConnectionId) == 0x000028, "Member 'FAdminUpdateOpenIdConnectionRequest::ConnectionId' has a wrong offset!");
static_assert(offsetof(FAdminUpdateOpenIdConnectionRequest, IssuerDiscoveryUrl) == 0x000038, "Member 'FAdminUpdateOpenIdConnectionRequest::IssuerDiscoveryUrl' has a wrong offset!");
static_assert(offsetof(FAdminUpdateOpenIdConnectionRequest, IssuerInformation) == 0x000048, "Member 'FAdminUpdateOpenIdConnectionRequest::IssuerInformation' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateTitleMultiplayerServersQuotaChangeRequest
// 0x0058 (0x0060 - 0x0008)
struct FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ChangeDescription;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Changes;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ContactEmail;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Notes;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartDate;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest");
static_assert(sizeof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest) == 0x000060, "Wrong size on FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest");
static_assert(offsetof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, ChangeDescription) == 0x000008, "Member 'FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest::ChangeDescription' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, Changes) == 0x000018, "Member 'FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest::Changes' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, ContactEmail) == 0x000028, "Member 'FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest::ContactEmail' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, CustomTags) == 0x000038, "Member 'FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, Notes) == 0x000040, "Member 'FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest::Notes' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, StartDate) == 0x000050, "Member 'FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest::StartDate' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetAllSegmentsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetAllSegmentsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Segments;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetAllSegmentsResult) == 0x000008, "Wrong alignment on FServerGetAllSegmentsResult");
static_assert(sizeof(FServerGetAllSegmentsResult) == 0x000018, "Wrong size on FServerGetAllSegmentsResult");
static_assert(offsetof(FServerGetAllSegmentsResult, Segments) == 0x000008, "Member 'FServerGetAllSegmentsResult::Segments' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetTasksResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetTasksResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Tasks;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetTasksResult) == 0x000008, "Wrong alignment on FAdminGetTasksResult");
static_assert(sizeof(FAdminGetTasksResult) == 0x000018, "Wrong size on FAdminGetTasksResult");
static_assert(offsetof(FAdminGetTasksResult, Tasks) == 0x000008, "Member 'FAdminGetTasksResult::Tasks' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateSegmentRequest
// 0x0008 (0x0010 - 0x0008)
struct FAdminUpdateSegmentRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     SegmentModel;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateSegmentRequest) == 0x000008, "Wrong alignment on FAdminUpdateSegmentRequest");
static_assert(sizeof(FAdminUpdateSegmentRequest) == 0x000010, "Wrong size on FAdminUpdateSegmentRequest");
static_assert(offsetof(FAdminUpdateSegmentRequest, SegmentModel) == 0x000008, "Member 'FAdminUpdateSegmentRequest::SegmentModel' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetTitleDataResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminGetTitleDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetTitleDataResult) == 0x000008, "Wrong alignment on FAdminGetTitleDataResult");
static_assert(sizeof(FAdminGetTitleDataResult) == 0x000010, "Wrong size on FAdminGetTitleDataResult");
static_assert(offsetof(FAdminGetTitleDataResult, Data) == 0x000008, "Member 'FAdminGetTitleDataResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetUserBansResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetUserBansResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetUserBansResult) == 0x000008, "Wrong alignment on FAdminGetUserBansResult");
static_assert(sizeof(FAdminGetUserBansResult) == 0x000018, "Wrong size on FAdminGetUserBansResult");
static_assert(offsetof(FAdminGetUserBansResult, BanData) == 0x000008, "Member 'FAdminGetUserBansResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetFriendsListRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerGetFriendsListRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExternalFriendSources                        ExternalPlatformFriends;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FB[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetFriendsListRequest) == 0x000008, "Wrong alignment on FServerGetFriendsListRequest");
static_assert(sizeof(FServerGetFriendsListRequest) == 0x000040, "Wrong size on FServerGetFriendsListRequest");
static_assert(offsetof(FServerGetFriendsListRequest, CustomTags) == 0x000008, "Member 'FServerGetFriendsListRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetFriendsListRequest, ExternalPlatformFriends) == 0x000010, "Member 'FServerGetFriendsListRequest::ExternalPlatformFriends' has a wrong offset!");
static_assert(offsetof(FServerGetFriendsListRequest, PlayFabId) == 0x000018, "Member 'FServerGetFriendsListRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetFriendsListRequest, ProfileConstraints) == 0x000028, "Member 'FServerGetFriendsListRequest::ProfileConstraints' has a wrong offset!");
static_assert(offsetof(FServerGetFriendsListRequest, XboxToken) == 0x000030, "Member 'FServerGetFriendsListRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.ClientRestoreIOSPurchasesResult
// 0x0010 (0x0018 - 0x0008)
struct FClientRestoreIOSPurchasesResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Fulfillments;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRestoreIOSPurchasesResult) == 0x000008, "Wrong alignment on FClientRestoreIOSPurchasesResult");
static_assert(sizeof(FClientRestoreIOSPurchasesResult) == 0x000018, "Wrong size on FClientRestoreIOSPurchasesResult");
static_assert(offsetof(FClientRestoreIOSPurchasesResult, Fulfillments) == 0x000008, "Member 'FClientRestoreIOSPurchasesResult::Fulfillments' has a wrong offset!");

// ScriptStruct PlayFab.GroupsRemoveMembersRequest
// 0x0030 (0x0038 - 0x0008)
struct FGroupsRemoveMembersRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsRemoveMembersRequest) == 0x000008, "Wrong alignment on FGroupsRemoveMembersRequest");
static_assert(sizeof(FGroupsRemoveMembersRequest) == 0x000038, "Wrong size on FGroupsRemoveMembersRequest");
static_assert(offsetof(FGroupsRemoveMembersRequest, CustomTags) == 0x000008, "Member 'FGroupsRemoveMembersRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsRemoveMembersRequest, Group) == 0x000010, "Member 'FGroupsRemoveMembersRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsRemoveMembersRequest, Members) == 0x000018, "Member 'FGroupsRemoveMembersRequest::Members' has a wrong offset!");
static_assert(offsetof(FGroupsRemoveMembersRequest, RoleId) == 0x000028, "Member 'FGroupsRemoveMembersRequest::RoleId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetUserDataResult
// 0x0020 (0x0028 - 0x0008)
struct FAdminGetUserDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataVersion;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FC[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetUserDataResult) == 0x000008, "Wrong alignment on FAdminGetUserDataResult");
static_assert(sizeof(FAdminGetUserDataResult) == 0x000028, "Wrong size on FAdminGetUserDataResult");
static_assert(offsetof(FAdminGetUserDataResult, Data) == 0x000008, "Member 'FAdminGetUserDataResult::Data' has a wrong offset!");
static_assert(offsetof(FAdminGetUserDataResult, DataVersion) == 0x000010, "Member 'FAdminGetUserDataResult::DataVersion' has a wrong offset!");
static_assert(offsetof(FAdminGetUserDataResult, PlayFabId) == 0x000018, "Member 'FAdminGetUserDataResult::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetUserInventoryResult
// 0x0030 (0x0038 - 0x0008)
struct FAdminGetUserInventoryResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Inventory;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrency;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrencyRechargeTimes;                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetUserInventoryResult) == 0x000008, "Wrong alignment on FAdminGetUserInventoryResult");
static_assert(sizeof(FAdminGetUserInventoryResult) == 0x000038, "Wrong size on FAdminGetUserInventoryResult");
static_assert(offsetof(FAdminGetUserInventoryResult, Inventory) == 0x000008, "Member 'FAdminGetUserInventoryResult::Inventory' has a wrong offset!");
static_assert(offsetof(FAdminGetUserInventoryResult, PlayFabId) == 0x000018, "Member 'FAdminGetUserInventoryResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminGetUserInventoryResult, VirtualCurrency) == 0x000028, "Member 'FAdminGetUserInventoryResult::VirtualCurrency' has a wrong offset!");
static_assert(offsetof(FAdminGetUserInventoryResult, VirtualCurrencyRechargeTimes) == 0x000030, "Member 'FAdminGetUserInventoryResult::VirtualCurrencyRechargeTimes' has a wrong offset!");

// ScriptStruct PlayFab.AdminGrantItemsToUsersResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminGrantItemsToUsersResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             ItemGrantResults;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGrantItemsToUsersResult) == 0x000008, "Wrong alignment on FAdminGrantItemsToUsersResult");
static_assert(sizeof(FAdminGrantItemsToUsersResult) == 0x000018, "Wrong size on FAdminGrantItemsToUsersResult");
static_assert(offsetof(FAdminGrantItemsToUsersResult, ItemGrantResults) == 0x000008, "Member 'FAdminGrantItemsToUsersResult::ItemGrantResults' has a wrong offset!");

// ScriptStruct PlayFab.AdminIncrementLimitedEditionItemAvailabilityResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminIncrementLimitedEditionItemAvailabilityResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminIncrementLimitedEditionItemAvailabilityResult) == 0x000008, "Wrong alignment on FAdminIncrementLimitedEditionItemAvailabilityResult");
static_assert(sizeof(FAdminIncrementLimitedEditionItemAvailabilityResult) == 0x000008, "Wrong size on FAdminIncrementLimitedEditionItemAvailabilityResult");

// ScriptStruct PlayFab.AdminIncrementPlayerStatisticVersionResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminIncrementPlayerStatisticVersionResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     StatisticVersion;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminIncrementPlayerStatisticVersionResult) == 0x000008, "Wrong alignment on FAdminIncrementPlayerStatisticVersionResult");
static_assert(sizeof(FAdminIncrementPlayerStatisticVersionResult) == 0x000010, "Wrong size on FAdminIncrementPlayerStatisticVersionResult");
static_assert(offsetof(FAdminIncrementPlayerStatisticVersionResult, StatisticVersion) == 0x000008, "Member 'FAdminIncrementPlayerStatisticVersionResult::StatisticVersion' has a wrong offset!");

// ScriptStruct PlayFab.AdminListOpenIdConnectionResponse
// 0x0010 (0x0018 - 0x0008)
struct FAdminListOpenIdConnectionResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Connections;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminListOpenIdConnectionResponse) == 0x000008, "Wrong alignment on FAdminListOpenIdConnectionResponse");
static_assert(sizeof(FAdminListOpenIdConnectionResponse) == 0x000018, "Wrong size on FAdminListOpenIdConnectionResponse");
static_assert(offsetof(FAdminListOpenIdConnectionResponse, Connections) == 0x000008, "Member 'FAdminListOpenIdConnectionResponse::Connections' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemMicrosoftStoreInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyRedeemMicrosoftStoreInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Failed;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Succeeded;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemMicrosoftStoreInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyRedeemMicrosoftStoreInventoryItemsResponse");
static_assert(sizeof(FEconomyRedeemMicrosoftStoreInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyRedeemMicrosoftStoreInventoryItemsResponse");
static_assert(offsetof(FEconomyRedeemMicrosoftStoreInventoryItemsResponse, Failed) == 0x000008, "Member 'FEconomyRedeemMicrosoftStoreInventoryItemsResponse::Failed' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemMicrosoftStoreInventoryItemsResponse, Succeeded) == 0x000018, "Member 'FEconomyRedeemMicrosoftStoreInventoryItemsResponse::Succeeded' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemMicrosoftStoreInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyRedeemMicrosoftStoreInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.AdminListVirtualCurrencyTypesResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminListVirtualCurrencyTypesResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             VirtualCurrencies;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminListVirtualCurrencyTypesResult) == 0x000008, "Wrong alignment on FAdminListVirtualCurrencyTypesResult");
static_assert(sizeof(FAdminListVirtualCurrencyTypesResult) == 0x000018, "Wrong size on FAdminListVirtualCurrencyTypesResult");
static_assert(offsetof(FAdminListVirtualCurrencyTypesResult, VirtualCurrencies) == 0x000008, "Member 'FAdminListVirtualCurrencyTypesResult::VirtualCurrencies' has a wrong offset!");

// ScriptStruct PlayFab.AdminModifyServerBuildResult
// 0x0080 (0x0088 - 0x0008)
struct FAdminModifyServerBuildResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ActiveRegions;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommandLineTemplate;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExecutablePath;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGamesPerHost;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFreeGameSlots;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameBuildStatus                              Status;                                            // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FD[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Timestamp;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleId;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminModifyServerBuildResult) == 0x000008, "Wrong alignment on FAdminModifyServerBuildResult");
static_assert(sizeof(FAdminModifyServerBuildResult) == 0x000088, "Wrong size on FAdminModifyServerBuildResult");
static_assert(offsetof(FAdminModifyServerBuildResult, ActiveRegions) == 0x000008, "Member 'FAdminModifyServerBuildResult::ActiveRegions' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildResult, BuildId) == 0x000018, "Member 'FAdminModifyServerBuildResult::BuildId' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildResult, CommandLineTemplate) == 0x000028, "Member 'FAdminModifyServerBuildResult::CommandLineTemplate' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildResult, Comment) == 0x000038, "Member 'FAdminModifyServerBuildResult::Comment' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildResult, ExecutablePath) == 0x000048, "Member 'FAdminModifyServerBuildResult::ExecutablePath' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildResult, MaxGamesPerHost) == 0x000058, "Member 'FAdminModifyServerBuildResult::MaxGamesPerHost' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildResult, MinFreeGameSlots) == 0x00005C, "Member 'FAdminModifyServerBuildResult::MinFreeGameSlots' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildResult, Status) == 0x000060, "Member 'FAdminModifyServerBuildResult::Status' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildResult, Timestamp) == 0x000068, "Member 'FAdminModifyServerBuildResult::Timestamp' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildResult, TitleId) == 0x000078, "Member 'FAdminModifyServerBuildResult::TitleId' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkNintendoSwitchDeviceIdRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkNintendoSwitchDeviceIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FE[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NintendoSwitchDeviceId;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkNintendoSwitchDeviceIdRequest) == 0x000008, "Wrong alignment on FClientLinkNintendoSwitchDeviceIdRequest");
static_assert(sizeof(FClientLinkNintendoSwitchDeviceIdRequest) == 0x000028, "Wrong size on FClientLinkNintendoSwitchDeviceIdRequest");
static_assert(offsetof(FClientLinkNintendoSwitchDeviceIdRequest, CustomTags) == 0x000008, "Member 'FClientLinkNintendoSwitchDeviceIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkNintendoSwitchDeviceIdRequest, ForceLink) == 0x000010, "Member 'FClientLinkNintendoSwitchDeviceIdRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId) == 0x000018, "Member 'FClientLinkNintendoSwitchDeviceIdRequest::NintendoSwitchDeviceId' has a wrong offset!");

// ScriptStruct PlayFab.AdminRemovePlayerTagResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminRemovePlayerTagResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminRemovePlayerTagResult) == 0x000008, "Wrong alignment on FAdminRemovePlayerTagResult");
static_assert(sizeof(FAdminRemovePlayerTagResult) == 0x000008, "Wrong size on FAdminRemovePlayerTagResult");

// ScriptStruct PlayFab.ClientAcceptTradeResponse
// 0x0008 (0x0010 - 0x0008)
struct FClientAcceptTradeResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Trade;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAcceptTradeResponse) == 0x000008, "Wrong alignment on FClientAcceptTradeResponse");
static_assert(sizeof(FClientAcceptTradeResponse) == 0x000010, "Wrong size on FClientAcceptTradeResponse");
static_assert(offsetof(FClientAcceptTradeResponse, Trade) == 0x000008, "Member 'FClientAcceptTradeResponse::Trade' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetTitleDataRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerGetTitleDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Keys;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverrideLabel;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetTitleDataRequest) == 0x000008, "Wrong alignment on FServerGetTitleDataRequest");
static_assert(sizeof(FServerGetTitleDataRequest) == 0x000028, "Wrong size on FServerGetTitleDataRequest");
static_assert(offsetof(FServerGetTitleDataRequest, Keys) == 0x000008, "Member 'FServerGetTitleDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FServerGetTitleDataRequest, OverrideLabel) == 0x000018, "Member 'FServerGetTitleDataRequest::OverrideLabel' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationUpdateExclusionGroupRequest
// 0x0038 (0x0040 - 0x0008)
struct FExperimentationUpdateExclusionGroupRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExclusionGroupId;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationUpdateExclusionGroupRequest) == 0x000008, "Wrong alignment on FExperimentationUpdateExclusionGroupRequest");
static_assert(sizeof(FExperimentationUpdateExclusionGroupRequest) == 0x000040, "Wrong size on FExperimentationUpdateExclusionGroupRequest");
static_assert(offsetof(FExperimentationUpdateExclusionGroupRequest, CustomTags) == 0x000008, "Member 'FExperimentationUpdateExclusionGroupRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExclusionGroupRequest, Description) == 0x000010, "Member 'FExperimentationUpdateExclusionGroupRequest::Description' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExclusionGroupRequest, ExclusionGroupId) == 0x000020, "Member 'FExperimentationUpdateExclusionGroupRequest::ExclusionGroupId' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExclusionGroupRequest, Name) == 0x000030, "Member 'FExperimentationUpdateExclusionGroupRequest::Name' has a wrong offset!");

// ScriptStruct PlayFab.AdminResetCharacterStatisticsResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminResetCharacterStatisticsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminResetCharacterStatisticsResult) == 0x000008, "Wrong alignment on FAdminResetCharacterStatisticsResult");
static_assert(sizeof(FAdminResetCharacterStatisticsResult) == 0x000008, "Wrong size on FAdminResetCharacterStatisticsResult");

// ScriptStruct PlayFab.AdminResetPasswordResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminResetPasswordResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminResetPasswordResult) == 0x000008, "Wrong alignment on FAdminResetPasswordResult");
static_assert(sizeof(FAdminResetPasswordResult) == 0x000008, "Wrong size on FAdminResetPasswordResult");

// ScriptStruct PlayFab.EconomyGetInventoryCollectionIdsRequest
// 0x0028 (0x0030 - 0x0008)
struct FEconomyGetInventoryCollectionIdsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FF[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetInventoryCollectionIdsRequest) == 0x000008, "Wrong alignment on FEconomyGetInventoryCollectionIdsRequest");
static_assert(sizeof(FEconomyGetInventoryCollectionIdsRequest) == 0x000030, "Wrong size on FEconomyGetInventoryCollectionIdsRequest");
static_assert(offsetof(FEconomyGetInventoryCollectionIdsRequest, ContinuationToken) == 0x000008, "Member 'FEconomyGetInventoryCollectionIdsRequest::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryCollectionIdsRequest, Count) == 0x000018, "Member 'FEconomyGetInventoryCollectionIdsRequest::Count' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryCollectionIdsRequest, CustomTags) == 0x000020, "Member 'FEconomyGetInventoryCollectionIdsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryCollectionIdsRequest, Entity) == 0x000028, "Member 'FEconomyGetInventoryCollectionIdsRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.AuthenticationDeleteRequest
// 0x0010 (0x0018 - 0x0008)
struct FAuthenticationDeleteRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuthenticationDeleteRequest) == 0x000008, "Wrong alignment on FAuthenticationDeleteRequest");
static_assert(sizeof(FAuthenticationDeleteRequest) == 0x000018, "Wrong size on FAuthenticationDeleteRequest");
static_assert(offsetof(FAuthenticationDeleteRequest, CustomTags) == 0x000008, "Member 'FAuthenticationDeleteRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAuthenticationDeleteRequest, Entity) == 0x000010, "Member 'FAuthenticationDeleteRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.ServerAddSharedGroupMembersResult
// 0x0000 (0x0008 - 0x0008)
struct FServerAddSharedGroupMembersResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerAddSharedGroupMembersResult) == 0x000008, "Wrong alignment on FServerAddSharedGroupMembersResult");
static_assert(sizeof(FServerAddSharedGroupMembersResult) == 0x000008, "Wrong size on FServerAddSharedGroupMembersResult");

// ScriptStruct PlayFab.AdminResetUserStatisticsResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminResetUserStatisticsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminResetUserStatisticsResult) == 0x000008, "Wrong alignment on FAdminResetUserStatisticsResult");
static_assert(sizeof(FAdminResetUserStatisticsResult) == 0x000008, "Wrong size on FAdminResetUserStatisticsResult");

// ScriptStruct PlayFab.InsightsInsightsGetDetailsResponse
// 0x0038 (0x0040 - 0x0008)
struct FInsightsInsightsGetDetailsResponse final : public FPlayFabResultCommon
{
public:
	int32                                         DataUsageMb;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2100[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Limits;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             PendingOperations;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PerformanceLevel;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetentionDays;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInsightsInsightsGetDetailsResponse) == 0x000008, "Wrong alignment on FInsightsInsightsGetDetailsResponse");
static_assert(sizeof(FInsightsInsightsGetDetailsResponse) == 0x000040, "Wrong size on FInsightsInsightsGetDetailsResponse");
static_assert(offsetof(FInsightsInsightsGetDetailsResponse, DataUsageMb) == 0x000008, "Member 'FInsightsInsightsGetDetailsResponse::DataUsageMb' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetDetailsResponse, ErrorMessage) == 0x000010, "Member 'FInsightsInsightsGetDetailsResponse::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetDetailsResponse, Limits) == 0x000020, "Member 'FInsightsInsightsGetDetailsResponse::Limits' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetDetailsResponse, PendingOperations) == 0x000028, "Member 'FInsightsInsightsGetDetailsResponse::PendingOperations' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetDetailsResponse, PerformanceLevel) == 0x000038, "Member 'FInsightsInsightsGetDetailsResponse::PerformanceLevel' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetDetailsResponse, RetentionDays) == 0x00003C, "Member 'FInsightsInsightsGetDetailsResponse::RetentionDays' has a wrong offset!");

// ScriptStruct PlayFab.AdminResolvePurchaseDisputeResponse
// 0x0010 (0x0018 - 0x0008)
struct FAdminResolvePurchaseDisputeResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 PurchaseStatus;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminResolvePurchaseDisputeResponse) == 0x000008, "Wrong alignment on FAdminResolvePurchaseDisputeResponse");
static_assert(sizeof(FAdminResolvePurchaseDisputeResponse) == 0x000018, "Wrong size on FAdminResolvePurchaseDisputeResponse");
static_assert(offsetof(FAdminResolvePurchaseDisputeResponse, PurchaseStatus) == 0x000008, "Member 'FAdminResolvePurchaseDisputeResponse::PurchaseStatus' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromFacebookIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromFacebookIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromFacebookIDsResult) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromFacebookIDsResult");
static_assert(sizeof(FServerGetPlayFabIDsFromFacebookIDsResult) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromFacebookIDsResult");
static_assert(offsetof(FServerGetPlayFabIDsFromFacebookIDsResult, Data) == 0x000008, "Member 'FServerGetPlayFabIDsFromFacebookIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientAddGenericIDResult
// 0x0000 (0x0008 - 0x0008)
struct FClientAddGenericIDResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientAddGenericIDResult) == 0x000008, "Wrong alignment on FClientAddGenericIDResult");
static_assert(sizeof(FClientAddGenericIDResult) == 0x000008, "Wrong size on FClientAddGenericIDResult");

// ScriptStruct PlayFab.AdminRevokeAllBansForUserResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminRevokeAllBansForUserResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRevokeAllBansForUserResult) == 0x000008, "Wrong alignment on FAdminRevokeAllBansForUserResult");
static_assert(sizeof(FAdminRevokeAllBansForUserResult) == 0x000018, "Wrong size on FAdminRevokeAllBansForUserResult");
static_assert(offsetof(FAdminRevokeAllBansForUserResult, BanData) == 0x000008, "Member 'FAdminRevokeAllBansForUserResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.AdminRevokeBansResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminRevokeBansResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRevokeBansResult) == 0x000008, "Wrong alignment on FAdminRevokeBansResult");
static_assert(sizeof(FAdminRevokeBansResult) == 0x000018, "Wrong size on FAdminRevokeBansResult");
static_assert(offsetof(FAdminRevokeBansResult, BanData) == 0x000008, "Member 'FAdminRevokeBansResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetRandomResultTablesRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerGetRandomResultTablesRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TableIDs;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetRandomResultTablesRequest) == 0x000008, "Wrong alignment on FServerGetRandomResultTablesRequest");
static_assert(sizeof(FServerGetRandomResultTablesRequest) == 0x000028, "Wrong size on FServerGetRandomResultTablesRequest");
static_assert(offsetof(FServerGetRandomResultTablesRequest, CatalogVersion) == 0x000008, "Member 'FServerGetRandomResultTablesRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerGetRandomResultTablesRequest, TableIDs) == 0x000018, "Member 'FServerGetRandomResultTablesRequest::TableIDs' has a wrong offset!");

// ScriptStruct PlayFab.AuthenticationValidateEntityTokenRequest
// 0x0018 (0x0020 - 0x0008)
struct FAuthenticationValidateEntityTokenRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntityToken;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuthenticationValidateEntityTokenRequest) == 0x000008, "Wrong alignment on FAuthenticationValidateEntityTokenRequest");
static_assert(sizeof(FAuthenticationValidateEntityTokenRequest) == 0x000020, "Wrong size on FAuthenticationValidateEntityTokenRequest");
static_assert(offsetof(FAuthenticationValidateEntityTokenRequest, CustomTags) == 0x000008, "Member 'FAuthenticationValidateEntityTokenRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAuthenticationValidateEntityTokenRequest, EntityToken) == 0x000010, "Member 'FAuthenticationValidateEntityTokenRequest::EntityToken' has a wrong offset!");

// ScriptStruct PlayFab.AdminRevokeInventoryResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminRevokeInventoryResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminRevokeInventoryResult) == 0x000008, "Wrong alignment on FAdminRevokeInventoryResult");
static_assert(sizeof(FAdminRevokeInventoryResult) == 0x000008, "Wrong size on FAdminRevokeInventoryResult");

// ScriptStruct PlayFab.AdminRevokeInventoryItemsResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminRevokeInventoryItemsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Errors;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRevokeInventoryItemsResult) == 0x000008, "Wrong alignment on FAdminRevokeInventoryItemsResult");
static_assert(sizeof(FAdminRevokeInventoryItemsResult) == 0x000018, "Wrong size on FAdminRevokeInventoryItemsResult");
static_assert(offsetof(FAdminRevokeInventoryItemsResult, Errors) == 0x000008, "Member 'FAdminRevokeInventoryItemsResult::Errors' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerUpdateBuildRegionRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerUpdateBuildRegionRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     BuildRegion;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerUpdateBuildRegionRequest) == 0x000008, "Wrong alignment on FMultiplayerUpdateBuildRegionRequest");
static_assert(sizeof(FMultiplayerUpdateBuildRegionRequest) == 0x000028, "Wrong size on FMultiplayerUpdateBuildRegionRequest");
static_assert(offsetof(FMultiplayerUpdateBuildRegionRequest, BuildId) == 0x000008, "Member 'FMultiplayerUpdateBuildRegionRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateBuildRegionRequest, BuildRegion) == 0x000018, "Member 'FMultiplayerUpdateBuildRegionRequest::BuildRegion' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateBuildRegionRequest, CustomTags) == 0x000020, "Member 'FMultiplayerUpdateBuildRegionRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetAdPlacementsRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientGetAdPlacementsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AppID;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Identifier;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetAdPlacementsRequest) == 0x000008, "Wrong alignment on FClientGetAdPlacementsRequest");
static_assert(sizeof(FClientGetAdPlacementsRequest) == 0x000020, "Wrong size on FClientGetAdPlacementsRequest");
static_assert(offsetof(FClientGetAdPlacementsRequest, AppID) == 0x000008, "Member 'FClientGetAdPlacementsRequest::AppID' has a wrong offset!");
static_assert(offsetof(FClientGetAdPlacementsRequest, Identifier) == 0x000018, "Member 'FClientGetAdPlacementsRequest::Identifier' has a wrong offset!");

// ScriptStruct PlayFab.AdminRunTaskResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminRunTaskResult final : public FPlayFabResultCommon
{
public:
	class FString                                 TaskInstanceId;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRunTaskResult) == 0x000008, "Wrong alignment on FAdminRunTaskResult");
static_assert(sizeof(FAdminRunTaskResult) == 0x000018, "Wrong size on FAdminRunTaskResult");
static_assert(offsetof(FAdminRunTaskResult, TaskInstanceId) == 0x000008, "Member 'FAdminRunTaskResult::TaskInstanceId' has a wrong offset!");

// ScriptStruct PlayFab.AdminSendAccountRecoveryEmailResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminSendAccountRecoveryEmailResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminSendAccountRecoveryEmailResult) == 0x000008, "Wrong alignment on FAdminSendAccountRecoveryEmailResult");
static_assert(sizeof(FAdminSendAccountRecoveryEmailResult) == 0x000008, "Wrong size on FAdminSendAccountRecoveryEmailResult");

// ScriptStruct PlayFab.ClientGetCatalogItemsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetCatalogItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetCatalogItemsRequest) == 0x000008, "Wrong alignment on FClientGetCatalogItemsRequest");
static_assert(sizeof(FClientGetCatalogItemsRequest) == 0x000018, "Wrong size on FClientGetCatalogItemsRequest");
static_assert(offsetof(FClientGetCatalogItemsRequest, CatalogVersion) == 0x000008, "Member 'FClientGetCatalogItemsRequest::CatalogVersion' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateCatalogItemsResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminUpdateCatalogItemsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminUpdateCatalogItemsResult) == 0x000008, "Wrong alignment on FAdminUpdateCatalogItemsResult");
static_assert(sizeof(FAdminUpdateCatalogItemsResult) == 0x000008, "Wrong size on FAdminUpdateCatalogItemsResult");

// ScriptStruct PlayFab.ClientAddFriendResult
// 0x0008 (0x0010 - 0x0008)
struct FClientAddFriendResult final : public FPlayFabResultCommon
{
public:
	bool                                          Created;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2101[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientAddFriendResult) == 0x000008, "Wrong alignment on FClientAddFriendResult");
static_assert(sizeof(FClientAddFriendResult) == 0x000010, "Wrong size on FClientAddFriendResult");
static_assert(offsetof(FClientAddFriendResult, Created) == 0x000008, "Member 'FClientAddFriendResult::Created' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetMembershipOverrideResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminSetMembershipOverrideResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminSetMembershipOverrideResult) == 0x000008, "Wrong alignment on FAdminSetMembershipOverrideResult");
static_assert(sizeof(FAdminSetMembershipOverrideResult) == 0x000008, "Wrong size on FAdminSetMembershipOverrideResult");

// ScriptStruct PlayFab.ClientModifyUserVirtualCurrencyResult
// 0x0028 (0x0030 - 0x0008)
struct FClientModifyUserVirtualCurrencyResult final : public FPlayFabResultCommon
{
public:
	int32                                         Balance;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BalanceChange;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientModifyUserVirtualCurrencyResult) == 0x000008, "Wrong alignment on FClientModifyUserVirtualCurrencyResult");
static_assert(sizeof(FClientModifyUserVirtualCurrencyResult) == 0x000030, "Wrong size on FClientModifyUserVirtualCurrencyResult");
static_assert(offsetof(FClientModifyUserVirtualCurrencyResult, Balance) == 0x000008, "Member 'FClientModifyUserVirtualCurrencyResult::Balance' has a wrong offset!");
static_assert(offsetof(FClientModifyUserVirtualCurrencyResult, BalanceChange) == 0x00000C, "Member 'FClientModifyUserVirtualCurrencyResult::BalanceChange' has a wrong offset!");
static_assert(offsetof(FClientModifyUserVirtualCurrencyResult, PlayFabId) == 0x000010, "Member 'FClientModifyUserVirtualCurrencyResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FClientModifyUserVirtualCurrencyResult, VirtualCurrency) == 0x000020, "Member 'FClientModifyUserVirtualCurrencyResult::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetPlayerSecretResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminSetPlayerSecretResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminSetPlayerSecretResult) == 0x000008, "Wrong alignment on FAdminSetPlayerSecretResult");
static_assert(sizeof(FAdminSetPlayerSecretResult) == 0x000008, "Wrong size on FAdminSetPlayerSecretResult");

// ScriptStruct PlayFab.ClientSendAccountRecoveryEmailRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientSendAccountRecoveryEmailRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailTemplateId;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientSendAccountRecoveryEmailRequest) == 0x000008, "Wrong alignment on FClientSendAccountRecoveryEmailRequest");
static_assert(sizeof(FClientSendAccountRecoveryEmailRequest) == 0x000030, "Wrong size on FClientSendAccountRecoveryEmailRequest");
static_assert(offsetof(FClientSendAccountRecoveryEmailRequest, CustomTags) == 0x000008, "Member 'FClientSendAccountRecoveryEmailRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientSendAccountRecoveryEmailRequest, Email) == 0x000010, "Member 'FClientSendAccountRecoveryEmailRequest::Email' has a wrong offset!");
static_assert(offsetof(FClientSendAccountRecoveryEmailRequest, EmailTemplateId) == 0x000020, "Member 'FClientSendAccountRecoveryEmailRequest::EmailTemplateId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerJoinArrangedLobbyRequest
// 0x0040 (0x0048 - 0x0008)
struct FMultiplayerJoinArrangedLobbyRequest final : public FPlayFabRequestCommon
{
public:
	EAccessPolicy                                 AccessPolicy;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2102[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ArrangementString;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2103[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     MemberData;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MemberEntity;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOwnerMigrationPolicy                         OwnerMigrationPolicy;                              // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConnections;                                    // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2104[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerJoinArrangedLobbyRequest) == 0x000008, "Wrong alignment on FMultiplayerJoinArrangedLobbyRequest");
static_assert(sizeof(FMultiplayerJoinArrangedLobbyRequest) == 0x000048, "Wrong size on FMultiplayerJoinArrangedLobbyRequest");
static_assert(offsetof(FMultiplayerJoinArrangedLobbyRequest, AccessPolicy) == 0x000008, "Member 'FMultiplayerJoinArrangedLobbyRequest::AccessPolicy' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinArrangedLobbyRequest, ArrangementString) == 0x000010, "Member 'FMultiplayerJoinArrangedLobbyRequest::ArrangementString' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinArrangedLobbyRequest, CustomTags) == 0x000020, "Member 'FMultiplayerJoinArrangedLobbyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinArrangedLobbyRequest, MaxPlayers) == 0x000028, "Member 'FMultiplayerJoinArrangedLobbyRequest::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinArrangedLobbyRequest, MemberData) == 0x000030, "Member 'FMultiplayerJoinArrangedLobbyRequest::MemberData' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinArrangedLobbyRequest, MemberEntity) == 0x000038, "Member 'FMultiplayerJoinArrangedLobbyRequest::MemberEntity' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinArrangedLobbyRequest, OwnerMigrationPolicy) == 0x000040, "Member 'FMultiplayerJoinArrangedLobbyRequest::OwnerMigrationPolicy' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinArrangedLobbyRequest, UseConnections) == 0x000041, "Member 'FMultiplayerJoinArrangedLobbyRequest::UseConnections' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetPublishedRevisionResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminSetPublishedRevisionResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminSetPublishedRevisionResult) == 0x000008, "Wrong alignment on FAdminSetPublishedRevisionResult");
static_assert(sizeof(FAdminSetPublishedRevisionResult) == 0x000008, "Wrong size on FAdminSetPublishedRevisionResult");

// ScriptStruct PlayFab.ClientUnlinkXboxAccountRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkXboxAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkXboxAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkXboxAccountRequest");
static_assert(sizeof(FClientUnlinkXboxAccountRequest) == 0x000010, "Wrong size on FClientUnlinkXboxAccountRequest");
static_assert(offsetof(FClientUnlinkXboxAccountRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkXboxAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientAddOrUpdateContactEmailResult
// 0x0000 (0x0008 - 0x0008)
struct FClientAddOrUpdateContactEmailResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientAddOrUpdateContactEmailResult) == 0x000008, "Wrong alignment on FClientAddOrUpdateContactEmailResult");
static_assert(sizeof(FClientAddOrUpdateContactEmailResult) == 0x000008, "Wrong size on FClientAddOrUpdateContactEmailResult");

// ScriptStruct PlayFab.MultiplayerListBuildSummariesResponse
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerListBuildSummariesResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BuildSummaries;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2105[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListBuildSummariesResponse) == 0x000008, "Wrong alignment on FMultiplayerListBuildSummariesResponse");
static_assert(sizeof(FMultiplayerListBuildSummariesResponse) == 0x000030, "Wrong size on FMultiplayerListBuildSummariesResponse");
static_assert(offsetof(FMultiplayerListBuildSummariesResponse, BuildSummaries) == 0x000008, "Member 'FMultiplayerListBuildSummariesResponse::BuildSummaries' has a wrong offset!");
static_assert(offsetof(FMultiplayerListBuildSummariesResponse, PageSize) == 0x000018, "Member 'FMultiplayerListBuildSummariesResponse::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListBuildSummariesResponse, SkipToken) == 0x000020, "Member 'FMultiplayerListBuildSummariesResponse::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetPublisherDataResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminSetPublisherDataResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminSetPublisherDataResult) == 0x000008, "Wrong alignment on FAdminSetPublisherDataResult");
static_assert(sizeof(FAdminSetPublisherDataResult) == 0x000008, "Wrong size on FAdminSetPublisherDataResult");

// ScriptStruct PlayFab.EconomyTransferInventoryItemsResponse
// 0x0040 (0x0048 - 0x0008)
struct FEconomyTransferInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 GivingETag;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GivingTransactionIds;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceivingTransactionIds;                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyTransferInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyTransferInventoryItemsResponse");
static_assert(sizeof(FEconomyTransferInventoryItemsResponse) == 0x000048, "Wrong size on FEconomyTransferInventoryItemsResponse");
static_assert(offsetof(FEconomyTransferInventoryItemsResponse, GivingETag) == 0x000008, "Member 'FEconomyTransferInventoryItemsResponse::GivingETag' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsResponse, GivingTransactionIds) == 0x000018, "Member 'FEconomyTransferInventoryItemsResponse::GivingTransactionIds' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsResponse, IdempotencyId) == 0x000028, "Member 'FEconomyTransferInventoryItemsResponse::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsResponse, ReceivingTransactionIds) == 0x000038, "Member 'FEconomyTransferInventoryItemsResponse::ReceivingTransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateStoreItemsResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminUpdateStoreItemsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminUpdateStoreItemsResult) == 0x000008, "Wrong alignment on FAdminUpdateStoreItemsResult");
static_assert(sizeof(FAdminUpdateStoreItemsResult) == 0x000008, "Wrong size on FAdminUpdateStoreItemsResult");

// ScriptStruct PlayFab.ClientAttributeInstallResult
// 0x0000 (0x0008 - 0x0008)
struct FClientAttributeInstallResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientAttributeInstallResult) == 0x000008, "Wrong alignment on FClientAttributeInstallResult");
static_assert(sizeof(FClientAttributeInstallResult) == 0x000008, "Wrong size on FClientAttributeInstallResult");

// ScriptStruct PlayFab.AdminSetTitleDataResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminSetTitleDataResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminSetTitleDataResult) == 0x000008, "Wrong alignment on FAdminSetTitleDataResult");
static_assert(sizeof(FAdminSetTitleDataResult) == 0x000008, "Wrong size on FAdminSetTitleDataResult");

// ScriptStruct PlayFab.CloudScriptPostFunctionResultForScheduledTaskRequest
// 0x0018 (0x0020 - 0x0008)
struct FCloudScriptPostFunctionResultForScheduledTaskRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionResult;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ScheduledTaskId;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptPostFunctionResultForScheduledTaskRequest) == 0x000008, "Wrong alignment on FCloudScriptPostFunctionResultForScheduledTaskRequest");
static_assert(sizeof(FCloudScriptPostFunctionResultForScheduledTaskRequest) == 0x000020, "Wrong size on FCloudScriptPostFunctionResultForScheduledTaskRequest");
static_assert(offsetof(FCloudScriptPostFunctionResultForScheduledTaskRequest, CustomTags) == 0x000008, "Member 'FCloudScriptPostFunctionResultForScheduledTaskRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptPostFunctionResultForScheduledTaskRequest, FunctionResult) == 0x000010, "Member 'FCloudScriptPostFunctionResultForScheduledTaskRequest::FunctionResult' has a wrong offset!");
static_assert(offsetof(FCloudScriptPostFunctionResultForScheduledTaskRequest, ScheduledTaskId) == 0x000018, "Member 'FCloudScriptPostFunctionResultForScheduledTaskRequest::ScheduledTaskId' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetTitleDataAndOverridesResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminSetTitleDataAndOverridesResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminSetTitleDataAndOverridesResult) == 0x000008, "Wrong alignment on FAdminSetTitleDataAndOverridesResult");
static_assert(sizeof(FAdminSetTitleDataAndOverridesResult) == 0x000008, "Wrong size on FAdminSetTitleDataAndOverridesResult");

// ScriptStruct PlayFab.AdminSetupPushNotificationResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminSetupPushNotificationResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ARN;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminSetupPushNotificationResult) == 0x000008, "Wrong alignment on FAdminSetupPushNotificationResult");
static_assert(sizeof(FAdminSetupPushNotificationResult) == 0x000018, "Wrong size on FAdminSetupPushNotificationResult");
static_assert(offsetof(FAdminSetupPushNotificationResult, ARN) == 0x000008, "Member 'FAdminSetupPushNotificationResult::ARN' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkNintendoServiceAccountRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkNintendoServiceAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkNintendoServiceAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkNintendoServiceAccountRequest");
static_assert(sizeof(FClientUnlinkNintendoServiceAccountRequest) == 0x000010, "Wrong size on FClientUnlinkNintendoServiceAccountRequest");
static_assert(offsetof(FClientUnlinkNintendoServiceAccountRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkNintendoServiceAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateRemoteUserResponse
// 0x0030 (0x0038 - 0x0008)
struct FMultiplayerCreateRemoteUserResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ExpirationTime;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateRemoteUserResponse) == 0x000008, "Wrong alignment on FMultiplayerCreateRemoteUserResponse");
static_assert(sizeof(FMultiplayerCreateRemoteUserResponse) == 0x000038, "Wrong size on FMultiplayerCreateRemoteUserResponse");
static_assert(offsetof(FMultiplayerCreateRemoteUserResponse, ExpirationTime) == 0x000008, "Member 'FMultiplayerCreateRemoteUserResponse::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateRemoteUserResponse, Password) == 0x000018, "Member 'FMultiplayerCreateRemoteUserResponse::Password' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateRemoteUserResponse, Username) == 0x000028, "Member 'FMultiplayerCreateRemoteUserResponse::Username' has a wrong offset!");

// ScriptStruct PlayFab.ClientConfirmPurchaseResult
// 0x0030 (0x0038 - 0x0008)
struct FClientConfirmPurchaseResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OrderID;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseDate;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConfirmPurchaseResult) == 0x000008, "Wrong alignment on FClientConfirmPurchaseResult");
static_assert(sizeof(FClientConfirmPurchaseResult) == 0x000038, "Wrong size on FClientConfirmPurchaseResult");
static_assert(offsetof(FClientConfirmPurchaseResult, Items) == 0x000008, "Member 'FClientConfirmPurchaseResult::Items' has a wrong offset!");
static_assert(offsetof(FClientConfirmPurchaseResult, OrderID) == 0x000018, "Member 'FClientConfirmPurchaseResult::OrderID' has a wrong offset!");
static_assert(offsetof(FClientConfirmPurchaseResult, PurchaseDate) == 0x000028, "Member 'FClientConfirmPurchaseResult::PurchaseDate' has a wrong offset!");

// ScriptStruct PlayFab.ServerEvaluateRandomResultTableResult
// 0x0010 (0x0018 - 0x0008)
struct FServerEvaluateRandomResultTableResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ResultItemId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerEvaluateRandomResultTableResult) == 0x000008, "Wrong alignment on FServerEvaluateRandomResultTableResult");
static_assert(sizeof(FServerEvaluateRandomResultTableResult) == 0x000018, "Wrong size on FServerEvaluateRandomResultTableResult");
static_assert(offsetof(FServerEvaluateRandomResultTableResult, ResultItemId) == 0x000008, "Member 'FServerEvaluateRandomResultTableResult::ResultItemId' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateBansResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminUpdateBansResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateBansResult) == 0x000008, "Wrong alignment on FAdminUpdateBansResult");
static_assert(sizeof(FAdminUpdateBansResult) == 0x000018, "Wrong size on FAdminUpdateBansResult");
static_assert(offsetof(FAdminUpdateBansResult, BanData) == 0x000008, "Member 'FAdminUpdateBansResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkNintendoServiceAccountRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkNintendoServiceAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2106[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IdentityToken;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkNintendoServiceAccountRequest) == 0x000008, "Wrong alignment on FClientLinkNintendoServiceAccountRequest");
static_assert(sizeof(FClientLinkNintendoServiceAccountRequest) == 0x000028, "Wrong size on FClientLinkNintendoServiceAccountRequest");
static_assert(offsetof(FClientLinkNintendoServiceAccountRequest, CustomTags) == 0x000008, "Member 'FClientLinkNintendoServiceAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkNintendoServiceAccountRequest, ForceLink) == 0x000010, "Member 'FClientLinkNintendoServiceAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkNintendoServiceAccountRequest, IdentityToken) == 0x000018, "Member 'FClientLinkNintendoServiceAccountRequest::IdentityToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerDeleteBuildAliasRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerDeleteBuildAliasRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AliasId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerDeleteBuildAliasRequest) == 0x000008, "Wrong alignment on FMultiplayerDeleteBuildAliasRequest");
static_assert(sizeof(FMultiplayerDeleteBuildAliasRequest) == 0x000020, "Wrong size on FMultiplayerDeleteBuildAliasRequest");
static_assert(offsetof(FMultiplayerDeleteBuildAliasRequest, AliasId) == 0x000008, "Member 'FMultiplayerDeleteBuildAliasRequest::AliasId' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteBuildAliasRequest, CustomTags) == 0x000018, "Member 'FMultiplayerDeleteBuildAliasRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateCloudScriptResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminUpdateCloudScriptResult final : public FPlayFabResultCommon
{
public:
	int32                                         Revision;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateCloudScriptResult) == 0x000008, "Wrong alignment on FAdminUpdateCloudScriptResult");
static_assert(sizeof(FAdminUpdateCloudScriptResult) == 0x000010, "Wrong size on FAdminUpdateCloudScriptResult");
static_assert(offsetof(FAdminUpdateCloudScriptResult, Revision) == 0x000008, "Member 'FAdminUpdateCloudScriptResult::Revision' has a wrong offset!");
static_assert(offsetof(FAdminUpdateCloudScriptResult, Version) == 0x00000C, "Member 'FAdminUpdateCloudScriptResult::Version' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdatePlayerSharedSecretResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminUpdatePlayerSharedSecretResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminUpdatePlayerSharedSecretResult) == 0x000008, "Wrong alignment on FAdminUpdatePlayerSharedSecretResult");
static_assert(sizeof(FAdminUpdatePlayerSharedSecretResult) == 0x000008, "Wrong size on FAdminUpdatePlayerSharedSecretResult");

// ScriptStruct PlayFab.AuthenticationValidateEntityTokenResponse
// 0x0028 (0x0030 - 0x0008)
struct FAuthenticationValidateEntityTokenResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Entity;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIdentifiedDeviceType                         IdentifiedDeviceType;                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoginIdentityProvider                        IdentityProvider;                                  // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2107[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IdentityProviderIssuedId;                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Lineage;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuthenticationValidateEntityTokenResponse) == 0x000008, "Wrong alignment on FAuthenticationValidateEntityTokenResponse");
static_assert(sizeof(FAuthenticationValidateEntityTokenResponse) == 0x000030, "Wrong size on FAuthenticationValidateEntityTokenResponse");
static_assert(offsetof(FAuthenticationValidateEntityTokenResponse, Entity) == 0x000008, "Member 'FAuthenticationValidateEntityTokenResponse::Entity' has a wrong offset!");
static_assert(offsetof(FAuthenticationValidateEntityTokenResponse, IdentifiedDeviceType) == 0x000010, "Member 'FAuthenticationValidateEntityTokenResponse::IdentifiedDeviceType' has a wrong offset!");
static_assert(offsetof(FAuthenticationValidateEntityTokenResponse, IdentityProvider) == 0x000011, "Member 'FAuthenticationValidateEntityTokenResponse::IdentityProvider' has a wrong offset!");
static_assert(offsetof(FAuthenticationValidateEntityTokenResponse, IdentityProviderIssuedId) == 0x000018, "Member 'FAuthenticationValidateEntityTokenResponse::IdentityProviderIssuedId' has a wrong offset!");
static_assert(offsetof(FAuthenticationValidateEntityTokenResponse, Lineage) == 0x000028, "Member 'FAuthenticationValidateEntityTokenResponse::Lineage' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationEmptyResponse
// 0x0000 (0x0008 - 0x0008)
struct FExperimentationEmptyResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FExperimentationEmptyResponse) == 0x000008, "Wrong alignment on FExperimentationEmptyResponse");
static_assert(sizeof(FExperimentationEmptyResponse) == 0x000008, "Wrong size on FExperimentationEmptyResponse");

// ScriptStruct PlayFab.AdminUpdatePlayerStatisticDefinitionResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminUpdatePlayerStatisticDefinitionResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Statistic;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdatePlayerStatisticDefinitionResult) == 0x000008, "Wrong alignment on FAdminUpdatePlayerStatisticDefinitionResult");
static_assert(sizeof(FAdminUpdatePlayerStatisticDefinitionResult) == 0x000010, "Wrong size on FAdminUpdatePlayerStatisticDefinitionResult");
static_assert(offsetof(FAdminUpdatePlayerStatisticDefinitionResult, Statistic) == 0x000008, "Member 'FAdminUpdatePlayerStatisticDefinitionResult::Statistic' has a wrong offset!");

// ScriptStruct PlayFab.AuthenticationAuthenticateCustomIdRequest
// 0x0018 (0x0020 - 0x0008)
struct FAuthenticationAuthenticateCustomIdRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CustomId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuthenticationAuthenticateCustomIdRequest) == 0x000008, "Wrong alignment on FAuthenticationAuthenticateCustomIdRequest");
static_assert(sizeof(FAuthenticationAuthenticateCustomIdRequest) == 0x000020, "Wrong size on FAuthenticationAuthenticateCustomIdRequest");
static_assert(offsetof(FAuthenticationAuthenticateCustomIdRequest, CustomId) == 0x000008, "Member 'FAuthenticationAuthenticateCustomIdRequest::CustomId' has a wrong offset!");
static_assert(offsetof(FAuthenticationAuthenticateCustomIdRequest, CustomTags) == 0x000018, "Member 'FAuthenticationAuthenticateCustomIdRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkTwitchAccountRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientUnlinkTwitchAccountRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AccessToken;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkTwitchAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkTwitchAccountRequest");
static_assert(sizeof(FClientUnlinkTwitchAccountRequest) == 0x000020, "Wrong size on FClientUnlinkTwitchAccountRequest");
static_assert(offsetof(FClientUnlinkTwitchAccountRequest, AccessToken) == 0x000008, "Member 'FClientUnlinkTwitchAccountRequest::AccessToken' has a wrong offset!");
static_assert(offsetof(FClientUnlinkTwitchAccountRequest, CustomTags) == 0x000018, "Member 'FClientUnlinkTwitchAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateBuildWithManagedContainerResponse
// 0x00F8 (0x0100 - 0x0008)
struct FMultiplayerCreateBuildWithManagedContainerResponse final : public FPlayFabResultCommon
{
public:
	bool                                          AreAssetsReadonly;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2108[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContainerFlavor                              ContainerFlavor;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2109[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CreationTime;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameAssetReferences;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameCertificateReferences;                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 GameWorkingDirectory;                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InstrumentationConfiguration;                      // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MetaData;                                          // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MonitoringApplicationConfiguration;                // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiplayerServerCountPerVm;                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210A[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OsPlatform;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Ports;                                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             RegionConfigurations;                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ServerResourceConstraints;                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerType;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartMultiplayerServerCommand;                     // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStreamingForAssetDownloads;                     // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzureVmSize                                  VmSize;                                            // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210B[0x6];                                     // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     VmStartupScriptConfiguration;                      // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateBuildWithManagedContainerResponse) == 0x000008, "Wrong alignment on FMultiplayerCreateBuildWithManagedContainerResponse");
static_assert(sizeof(FMultiplayerCreateBuildWithManagedContainerResponse) == 0x000100, "Wrong size on FMultiplayerCreateBuildWithManagedContainerResponse");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, AreAssetsReadonly) == 0x000008, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::AreAssetsReadonly' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, BuildId) == 0x000010, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, BuildName) == 0x000020, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::BuildName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, ContainerFlavor) == 0x000030, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::ContainerFlavor' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, CreationTime) == 0x000038, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::CreationTime' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, GameAssetReferences) == 0x000048, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::GameAssetReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, GameCertificateReferences) == 0x000058, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::GameCertificateReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, GameWorkingDirectory) == 0x000068, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::GameWorkingDirectory' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, InstrumentationConfiguration) == 0x000078, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::InstrumentationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, MetaData) == 0x000080, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::MetaData' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, MonitoringApplicationConfiguration) == 0x000088, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::MonitoringApplicationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, MultiplayerServerCountPerVm) == 0x000090, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::MultiplayerServerCountPerVm' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, OsPlatform) == 0x000098, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::OsPlatform' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, Ports) == 0x0000A8, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::Ports' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, RegionConfigurations) == 0x0000B8, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::RegionConfigurations' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, ServerResourceConstraints) == 0x0000C8, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::ServerResourceConstraints' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, ServerType) == 0x0000D0, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::ServerType' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, StartMultiplayerServerCommand) == 0x0000E0, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::StartMultiplayerServerCommand' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, UseStreamingForAssetDownloads) == 0x0000F0, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::UseStreamingForAssetDownloads' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, VmSize) == 0x0000F1, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::VmSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerResponse, VmStartupScriptConfiguration) == 0x0000F8, "Member 'FMultiplayerCreateBuildWithManagedContainerResponse::VmStartupScriptConfiguration' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCharacterDataResult
// 0x0030 (0x0038 - 0x0008)
struct FServerGetCharacterDataResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataVersion;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210C[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCharacterDataResult) == 0x000008, "Wrong alignment on FServerGetCharacterDataResult");
static_assert(sizeof(FServerGetCharacterDataResult) == 0x000038, "Wrong size on FServerGetCharacterDataResult");
static_assert(offsetof(FServerGetCharacterDataResult, CharacterId) == 0x000008, "Member 'FServerGetCharacterDataResult::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterDataResult, Data) == 0x000018, "Member 'FServerGetCharacterDataResult::Data' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterDataResult, DataVersion) == 0x000020, "Member 'FServerGetCharacterDataResult::DataVersion' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterDataResult, PlayFabId) == 0x000028, "Member 'FServerGetCharacterDataResult::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdatePolicyResponse
// 0x0020 (0x0028 - 0x0008)
struct FAdminUpdatePolicyResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 PolicyName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Statements;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdatePolicyResponse) == 0x000008, "Wrong alignment on FAdminUpdatePolicyResponse");
static_assert(sizeof(FAdminUpdatePolicyResponse) == 0x000028, "Wrong size on FAdminUpdatePolicyResponse");
static_assert(offsetof(FAdminUpdatePolicyResponse, PolicyName) == 0x000008, "Member 'FAdminUpdatePolicyResponse::PolicyName' has a wrong offset!");
static_assert(offsetof(FAdminUpdatePolicyResponse, Statements) == 0x000018, "Member 'FAdminUpdatePolicyResponse::Statements' has a wrong offset!");

// ScriptStruct PlayFab.ClientCancelTradeResponse
// 0x0008 (0x0010 - 0x0008)
struct FClientCancelTradeResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Trade;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientCancelTradeResponse) == 0x000008, "Wrong alignment on FClientCancelTradeResponse");
static_assert(sizeof(FClientCancelTradeResponse) == 0x000010, "Wrong size on FClientCancelTradeResponse");
static_assert(offsetof(FClientCancelTradeResponse, Trade) == 0x000008, "Member 'FClientCancelTradeResponse::Trade' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateRandomResultTablesResult
// 0x0000 (0x0008 - 0x0008)
struct FAdminUpdateRandomResultTablesResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAdminUpdateRandomResultTablesResult) == 0x000008, "Wrong alignment on FAdminUpdateRandomResultTablesResult");
static_assert(sizeof(FAdminUpdateRandomResultTablesResult) == 0x000008, "Wrong size on FAdminUpdateRandomResultTablesResult");

// ScriptStruct PlayFab.ExperimentationCreateExperimentResult
// 0x0010 (0x0018 - 0x0008)
struct FExperimentationCreateExperimentResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ExperimentId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationCreateExperimentResult) == 0x000008, "Wrong alignment on FExperimentationCreateExperimentResult");
static_assert(sizeof(FExperimentationCreateExperimentResult) == 0x000018, "Wrong size on FExperimentationCreateExperimentResult");
static_assert(offsetof(FExperimentationCreateExperimentResult, ExperimentId) == 0x000008, "Member 'FExperimentationCreateExperimentResult::ExperimentId' has a wrong offset!");

// ScriptStruct PlayFab.AuthenticationGetEntityTokenResponse
// 0x0028 (0x0030 - 0x0008)
struct FAuthenticationGetEntityTokenResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Entity;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EntityToken;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TokenExpiration;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuthenticationGetEntityTokenResponse) == 0x000008, "Wrong alignment on FAuthenticationGetEntityTokenResponse");
static_assert(sizeof(FAuthenticationGetEntityTokenResponse) == 0x000030, "Wrong size on FAuthenticationGetEntityTokenResponse");
static_assert(offsetof(FAuthenticationGetEntityTokenResponse, Entity) == 0x000008, "Member 'FAuthenticationGetEntityTokenResponse::Entity' has a wrong offset!");
static_assert(offsetof(FAuthenticationGetEntityTokenResponse, EntityToken) == 0x000010, "Member 'FAuthenticationGetEntityTokenResponse::EntityToken' has a wrong offset!");
static_assert(offsetof(FAuthenticationGetEntityTokenResponse, TokenExpiration) == 0x000020, "Member 'FAuthenticationGetEntityTokenResponse::TokenExpiration' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemReviewsRequest
// 0x0048 (0x0050 - 0x0008)
struct FEconomyGetItemReviewsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContinuationToken;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210D[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderBy;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemReviewsRequest) == 0x000008, "Wrong alignment on FEconomyGetItemReviewsRequest");
static_assert(sizeof(FEconomyGetItemReviewsRequest) == 0x000050, "Wrong size on FEconomyGetItemReviewsRequest");
static_assert(offsetof(FEconomyGetItemReviewsRequest, AlternateId) == 0x000008, "Member 'FEconomyGetItemReviewsRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewsRequest, ContinuationToken) == 0x000010, "Member 'FEconomyGetItemReviewsRequest::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewsRequest, Count) == 0x000020, "Member 'FEconomyGetItemReviewsRequest::Count' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewsRequest, CustomTags) == 0x000028, "Member 'FEconomyGetItemReviewsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewsRequest, ID) == 0x000030, "Member 'FEconomyGetItemReviewsRequest::ID' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewsRequest, OrderBy) == 0x000040, "Member 'FEconomyGetItemReviewsRequest::OrderBy' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateSegmentResponse
// 0x0020 (0x0028 - 0x0008)
struct FAdminUpdateSegmentResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SegmentId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateSegmentResponse) == 0x000008, "Wrong alignment on FAdminUpdateSegmentResponse");
static_assert(sizeof(FAdminUpdateSegmentResponse) == 0x000028, "Wrong size on FAdminUpdateSegmentResponse");
static_assert(offsetof(FAdminUpdateSegmentResponse, ErrorMessage) == 0x000008, "Member 'FAdminUpdateSegmentResponse::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FAdminUpdateSegmentResponse, SegmentId) == 0x000018, "Member 'FAdminUpdateSegmentResponse::SegmentId' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlockContainerItemResult
// 0x0038 (0x0040 - 0x0008)
struct FClientUnlockContainerItemResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             GrantedItems;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UnlockedItemInstanceId;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnlockedWithItemInstanceId;                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrency;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlockContainerItemResult) == 0x000008, "Wrong alignment on FClientUnlockContainerItemResult");
static_assert(sizeof(FClientUnlockContainerItemResult) == 0x000040, "Wrong size on FClientUnlockContainerItemResult");
static_assert(offsetof(FClientUnlockContainerItemResult, GrantedItems) == 0x000008, "Member 'FClientUnlockContainerItemResult::GrantedItems' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerItemResult, UnlockedItemInstanceId) == 0x000018, "Member 'FClientUnlockContainerItemResult::UnlockedItemInstanceId' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerItemResult, UnlockedWithItemInstanceId) == 0x000028, "Member 'FClientUnlockContainerItemResult::UnlockedWithItemInstanceId' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerItemResult, VirtualCurrency) == 0x000038, "Member 'FClientUnlockContainerItemResult::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetStoreItemsResult
// 0x0040 (0x0048 - 0x0008)
struct FServerGetStoreItemsResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MarketingData;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPfSourceType                                 Source;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Store;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetStoreItemsResult) == 0x000008, "Wrong alignment on FServerGetStoreItemsResult");
static_assert(sizeof(FServerGetStoreItemsResult) == 0x000048, "Wrong size on FServerGetStoreItemsResult");
static_assert(offsetof(FServerGetStoreItemsResult, CatalogVersion) == 0x000008, "Member 'FServerGetStoreItemsResult::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerGetStoreItemsResult, MarketingData) == 0x000018, "Member 'FServerGetStoreItemsResult::MarketingData' has a wrong offset!");
static_assert(offsetof(FServerGetStoreItemsResult, Source) == 0x000020, "Member 'FServerGetStoreItemsResult::Source' has a wrong offset!");
static_assert(offsetof(FServerGetStoreItemsResult, Store) == 0x000028, "Member 'FServerGetStoreItemsResult::Store' has a wrong offset!");
static_assert(offsetof(FServerGetStoreItemsResult, StoreId) == 0x000038, "Member 'FServerGetStoreItemsResult::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateUserDataResult
// 0x0008 (0x0010 - 0x0008)
struct FAdminUpdateUserDataResult final : public FPlayFabResultCommon
{
public:
	int32                                         DataVersion;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210F[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminUpdateUserDataResult) == 0x000008, "Wrong alignment on FAdminUpdateUserDataResult");
static_assert(sizeof(FAdminUpdateUserDataResult) == 0x000010, "Wrong size on FAdminUpdateUserDataResult");
static_assert(offsetof(FAdminUpdateUserDataResult, DataVersion) == 0x000008, "Member 'FAdminUpdateUserDataResult::DataVersion' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateUserTitleDisplayNameResult
// 0x0010 (0x0018 - 0x0008)
struct FAdminUpdateUserTitleDisplayNameResult final : public FPlayFabResultCommon
{
public:
	class FString                                 DisplayName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateUserTitleDisplayNameResult) == 0x000008, "Wrong alignment on FAdminUpdateUserTitleDisplayNameResult");
static_assert(sizeof(FAdminUpdateUserTitleDisplayNameResult) == 0x000018, "Wrong size on FAdminUpdateUserTitleDisplayNameResult");
static_assert(offsetof(FAdminUpdateUserTitleDisplayNameResult, DisplayName) == 0x000008, "Member 'FAdminUpdateUserTitleDisplayNameResult::DisplayName' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteContentRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminDeleteContentRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Key;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteContentRequest) == 0x000008, "Wrong alignment on FAdminDeleteContentRequest");
static_assert(sizeof(FAdminDeleteContentRequest) == 0x000018, "Wrong size on FAdminDeleteContentRequest");
static_assert(offsetof(FAdminDeleteContentRequest, Key) == 0x000008, "Member 'FAdminDeleteContentRequest::Key' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteMasterPlayerAccountRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminDeleteMasterPlayerAccountRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 MetaData;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteMasterPlayerAccountRequest) == 0x000008, "Wrong alignment on FAdminDeleteMasterPlayerAccountRequest");
static_assert(sizeof(FAdminDeleteMasterPlayerAccountRequest) == 0x000028, "Wrong size on FAdminDeleteMasterPlayerAccountRequest");
static_assert(offsetof(FAdminDeleteMasterPlayerAccountRequest, MetaData) == 0x000008, "Member 'FAdminDeleteMasterPlayerAccountRequest::MetaData' has a wrong offset!");
static_assert(offsetof(FAdminDeleteMasterPlayerAccountRequest, PlayFabId) == 0x000018, "Member 'FAdminDeleteMasterPlayerAccountRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.DataFinalizeFileUploadsResponse
// 0x0018 (0x0020 - 0x0008)
struct FDataFinalizeFileUploadsResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Entity;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MetaData;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2110[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataFinalizeFileUploadsResponse) == 0x000008, "Wrong alignment on FDataFinalizeFileUploadsResponse");
static_assert(sizeof(FDataFinalizeFileUploadsResponse) == 0x000020, "Wrong size on FDataFinalizeFileUploadsResponse");
static_assert(offsetof(FDataFinalizeFileUploadsResponse, Entity) == 0x000008, "Member 'FDataFinalizeFileUploadsResponse::Entity' has a wrong offset!");
static_assert(offsetof(FDataFinalizeFileUploadsResponse, MetaData) == 0x000010, "Member 'FDataFinalizeFileUploadsResponse::MetaData' has a wrong offset!");
static_assert(offsetof(FDataFinalizeFileUploadsResponse, ProfileVersion) == 0x000018, "Member 'FDataFinalizeFileUploadsResponse::ProfileVersion' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteMembershipSubscriptionRequest
// 0x0038 (0x0040 - 0x0008)
struct FAdminDeleteMembershipSubscriptionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MembershipId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubscriptionId;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteMembershipSubscriptionRequest) == 0x000008, "Wrong alignment on FAdminDeleteMembershipSubscriptionRequest");
static_assert(sizeof(FAdminDeleteMembershipSubscriptionRequest) == 0x000040, "Wrong size on FAdminDeleteMembershipSubscriptionRequest");
static_assert(offsetof(FAdminDeleteMembershipSubscriptionRequest, CustomTags) == 0x000008, "Member 'FAdminDeleteMembershipSubscriptionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminDeleteMembershipSubscriptionRequest, MembershipId) == 0x000010, "Member 'FAdminDeleteMembershipSubscriptionRequest::MembershipId' has a wrong offset!");
static_assert(offsetof(FAdminDeleteMembershipSubscriptionRequest, PlayFabId) == 0x000020, "Member 'FAdminDeleteMembershipSubscriptionRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminDeleteMembershipSubscriptionRequest, SubscriptionId) == 0x000030, "Member 'FAdminDeleteMembershipSubscriptionRequest::SubscriptionId' has a wrong offset!");

// ScriptStruct PlayFab.ClientOpenTradeRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientOpenTradeRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AllowedPlayerIds;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferedInventoryInstanceIds;                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestedCatalogItemIds;                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientOpenTradeRequest) == 0x000008, "Wrong alignment on FClientOpenTradeRequest");
static_assert(sizeof(FClientOpenTradeRequest) == 0x000038, "Wrong size on FClientOpenTradeRequest");
static_assert(offsetof(FClientOpenTradeRequest, AllowedPlayerIds) == 0x000008, "Member 'FClientOpenTradeRequest::AllowedPlayerIds' has a wrong offset!");
static_assert(offsetof(FClientOpenTradeRequest, OfferedInventoryInstanceIds) == 0x000018, "Member 'FClientOpenTradeRequest::OfferedInventoryInstanceIds' has a wrong offset!");
static_assert(offsetof(FClientOpenTradeRequest, RequestedCatalogItemIds) == 0x000028, "Member 'FClientOpenTradeRequest::RequestedCatalogItemIds' has a wrong offset!");

// ScriptStruct PlayFab.DataDeleteFilesRequest
// 0x0028 (0x0030 - 0x0008)
struct FDataDeleteFilesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileNames;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2111[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataDeleteFilesRequest) == 0x000008, "Wrong alignment on FDataDeleteFilesRequest");
static_assert(sizeof(FDataDeleteFilesRequest) == 0x000030, "Wrong size on FDataDeleteFilesRequest");
static_assert(offsetof(FDataDeleteFilesRequest, CustomTags) == 0x000008, "Member 'FDataDeleteFilesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FDataDeleteFilesRequest, Entity) == 0x000010, "Member 'FDataDeleteFilesRequest::Entity' has a wrong offset!");
static_assert(offsetof(FDataDeleteFilesRequest, FileNames) == 0x000018, "Member 'FDataDeleteFilesRequest::FileNames' has a wrong offset!");
static_assert(offsetof(FDataDeleteFilesRequest, ProfileVersion) == 0x000028, "Member 'FDataDeleteFilesRequest::ProfileVersion' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteOpenIdConnectionRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminDeleteOpenIdConnectionRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ConnectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteOpenIdConnectionRequest) == 0x000008, "Wrong alignment on FAdminDeleteOpenIdConnectionRequest");
static_assert(sizeof(FAdminDeleteOpenIdConnectionRequest) == 0x000018, "Wrong size on FAdminDeleteOpenIdConnectionRequest");
static_assert(offsetof(FAdminDeleteOpenIdConnectionRequest, ConnectionId) == 0x000008, "Member 'FAdminDeleteOpenIdConnectionRequest::ConnectionId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCancelAllMatchmakingTicketsForPlayerRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest) == 0x000008, "Wrong alignment on FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest");
static_assert(sizeof(FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest) == 0x000028, "Wrong size on FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest");
static_assert(offsetof(FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, CustomTags) == 0x000008, "Member 'FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, Entity) == 0x000010, "Member 'FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest::Entity' has a wrong offset!");
static_assert(offsetof(FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, QueueName) == 0x000018, "Member 'FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest::QueueName' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeletePlayerRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminDeletePlayerRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeletePlayerRequest) == 0x000008, "Wrong alignment on FAdminDeletePlayerRequest");
static_assert(sizeof(FAdminDeletePlayerRequest) == 0x000018, "Wrong size on FAdminDeletePlayerRequest");
static_assert(offsetof(FAdminDeletePlayerRequest, PlayFabId) == 0x000008, "Member 'FAdminDeletePlayerRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeletePlayerSharedSecretRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminDeletePlayerSharedSecretRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SecretKey;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeletePlayerSharedSecretRequest) == 0x000008, "Wrong alignment on FAdminDeletePlayerSharedSecretRequest");
static_assert(sizeof(FAdminDeletePlayerSharedSecretRequest) == 0x000018, "Wrong size on FAdminDeletePlayerSharedSecretRequest");
static_assert(offsetof(FAdminDeletePlayerSharedSecretRequest, SecretKey) == 0x000008, "Member 'FAdminDeletePlayerSharedSecretRequest::SecretKey' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteSegmentRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminDeleteSegmentRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SegmentId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteSegmentRequest) == 0x000008, "Wrong alignment on FAdminDeleteSegmentRequest");
static_assert(sizeof(FAdminDeleteSegmentRequest) == 0x000018, "Wrong size on FAdminDeleteSegmentRequest");
static_assert(offsetof(FAdminDeleteSegmentRequest, SegmentId) == 0x000008, "Member 'FAdminDeleteSegmentRequest::SegmentId' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteStoreRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminDeleteStoreRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteStoreRequest) == 0x000008, "Wrong alignment on FAdminDeleteStoreRequest");
static_assert(sizeof(FAdminDeleteStoreRequest) == 0x000030, "Wrong size on FAdminDeleteStoreRequest");
static_assert(offsetof(FAdminDeleteStoreRequest, CatalogVersion) == 0x000008, "Member 'FAdminDeleteStoreRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FAdminDeleteStoreRequest, CustomTags) == 0x000018, "Member 'FAdminDeleteStoreRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminDeleteStoreRequest, StoreId) == 0x000020, "Member 'FAdminDeleteStoreRequest::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteTaskRequest
// 0x0008 (0x0010 - 0x0008)
struct FAdminDeleteTaskRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Identifier;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteTaskRequest) == 0x000008, "Wrong alignment on FAdminDeleteTaskRequest");
static_assert(sizeof(FAdminDeleteTaskRequest) == 0x000010, "Wrong size on FAdminDeleteTaskRequest");
static_assert(offsetof(FAdminDeleteTaskRequest, Identifier) == 0x000008, "Member 'FAdminDeleteTaskRequest::Identifier' has a wrong offset!");

// ScriptStruct PlayFab.AdminDeleteTitleRequest
// 0x0000 (0x0008 - 0x0008)
struct FAdminDeleteTitleRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FAdminDeleteTitleRequest) == 0x000008, "Wrong alignment on FAdminDeleteTitleRequest");
static_assert(sizeof(FAdminDeleteTitleRequest) == 0x000008, "Wrong size on FAdminDeleteTitleRequest");

// ScriptStruct PlayFab.AdminDeleteTitleDataOverrideRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminDeleteTitleDataOverrideRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 OverrideLabel;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminDeleteTitleDataOverrideRequest) == 0x000008, "Wrong alignment on FAdminDeleteTitleDataOverrideRequest");
static_assert(sizeof(FAdminDeleteTitleDataOverrideRequest) == 0x000018, "Wrong size on FAdminDeleteTitleDataOverrideRequest");
static_assert(offsetof(FAdminDeleteTitleDataOverrideRequest, OverrideLabel) == 0x000008, "Member 'FAdminDeleteTitleDataOverrideRequest::OverrideLabel' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListQosServersForTitleResponse
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerListQosServersForTitleResponse final : public FPlayFabResultCommon
{
public:
	int32                                         PageSize;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2112[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             QosServers;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SkipToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListQosServersForTitleResponse) == 0x000008, "Wrong alignment on FMultiplayerListQosServersForTitleResponse");
static_assert(sizeof(FMultiplayerListQosServersForTitleResponse) == 0x000030, "Wrong size on FMultiplayerListQosServersForTitleResponse");
static_assert(offsetof(FMultiplayerListQosServersForTitleResponse, PageSize) == 0x000008, "Member 'FMultiplayerListQosServersForTitleResponse::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListQosServersForTitleResponse, QosServers) == 0x000010, "Member 'FMultiplayerListQosServersForTitleResponse::QosServers' has a wrong offset!");
static_assert(offsetof(FMultiplayerListQosServersForTitleResponse, SkipToken) == 0x000020, "Member 'FMultiplayerListQosServersForTitleResponse::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.ServerMoveItemToCharacterFromUserRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerMoveItemToCharacterFromUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemInstanceId;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMoveItemToCharacterFromUserRequest) == 0x000008, "Wrong alignment on FServerMoveItemToCharacterFromUserRequest");
static_assert(sizeof(FServerMoveItemToCharacterFromUserRequest) == 0x000038, "Wrong size on FServerMoveItemToCharacterFromUserRequest");
static_assert(offsetof(FServerMoveItemToCharacterFromUserRequest, CharacterId) == 0x000008, "Member 'FServerMoveItemToCharacterFromUserRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerMoveItemToCharacterFromUserRequest, ItemInstanceId) == 0x000018, "Member 'FServerMoveItemToCharacterFromUserRequest::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerMoveItemToCharacterFromUserRequest, PlayFabId) == 0x000028, "Member 'FServerMoveItemToCharacterFromUserRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminExportMasterPlayerDataRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminExportMasterPlayerDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminExportMasterPlayerDataRequest) == 0x000008, "Wrong alignment on FAdminExportMasterPlayerDataRequest");
static_assert(sizeof(FAdminExportMasterPlayerDataRequest) == 0x000018, "Wrong size on FAdminExportMasterPlayerDataRequest");
static_assert(offsetof(FAdminExportMasterPlayerDataRequest, PlayFabId) == 0x000008, "Member 'FAdminExportMasterPlayerDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsRemoveGroupApplicationRequest
// 0x0018 (0x0020 - 0x0008)
struct FGroupsRemoveGroupApplicationRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsRemoveGroupApplicationRequest) == 0x000008, "Wrong alignment on FGroupsRemoveGroupApplicationRequest");
static_assert(sizeof(FGroupsRemoveGroupApplicationRequest) == 0x000020, "Wrong size on FGroupsRemoveGroupApplicationRequest");
static_assert(offsetof(FGroupsRemoveGroupApplicationRequest, CustomTags) == 0x000008, "Member 'FGroupsRemoveGroupApplicationRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsRemoveGroupApplicationRequest, Entity) == 0x000010, "Member 'FGroupsRemoveGroupApplicationRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsRemoveGroupApplicationRequest, Group) == 0x000018, "Member 'FGroupsRemoveGroupApplicationRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetFriendsListResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetFriendsListResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Friends;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetFriendsListResult) == 0x000008, "Wrong alignment on FServerGetFriendsListResult");
static_assert(sizeof(FServerGetFriendsListResult) == 0x000018, "Wrong size on FServerGetFriendsListResult");
static_assert(offsetof(FServerGetFriendsListResult, Friends) == 0x000008, "Member 'FServerGetFriendsListResult::Friends' has a wrong offset!");

// ScriptStruct PlayFab.ClientReportAdActivityRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientReportAdActivityRequest final : public FPlayFabRequestCommon
{
public:
	EAdActivity                                   Activity;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2113[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlacementId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientReportAdActivityRequest) == 0x000008, "Wrong alignment on FClientReportAdActivityRequest");
static_assert(sizeof(FClientReportAdActivityRequest) == 0x000038, "Wrong size on FClientReportAdActivityRequest");
static_assert(offsetof(FClientReportAdActivityRequest, Activity) == 0x000008, "Member 'FClientReportAdActivityRequest::Activity' has a wrong offset!");
static_assert(offsetof(FClientReportAdActivityRequest, CustomTags) == 0x000010, "Member 'FClientReportAdActivityRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientReportAdActivityRequest, PlacementId) == 0x000018, "Member 'FClientReportAdActivityRequest::PlacementId' has a wrong offset!");
static_assert(offsetof(FClientReportAdActivityRequest, RewardId) == 0x000028, "Member 'FClientReportAdActivityRequest::RewardId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetAllSegmentsRequest
// 0x0000 (0x0008 - 0x0008)
struct FAdminGetAllSegmentsRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FAdminGetAllSegmentsRequest) == 0x000008, "Wrong alignment on FAdminGetAllSegmentsRequest");
static_assert(sizeof(FAdminGetAllSegmentsRequest) == 0x000008, "Wrong size on FAdminGetAllSegmentsRequest");

// ScriptStruct PlayFab.ClientWriteClientCharacterEventRequest
// 0x0040 (0x0048 - 0x0008)
struct FClientWriteClientCharacterEventRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Body;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientWriteClientCharacterEventRequest) == 0x000008, "Wrong alignment on FClientWriteClientCharacterEventRequest");
static_assert(sizeof(FClientWriteClientCharacterEventRequest) == 0x000048, "Wrong size on FClientWriteClientCharacterEventRequest");
static_assert(offsetof(FClientWriteClientCharacterEventRequest, Body) == 0x000008, "Member 'FClientWriteClientCharacterEventRequest::Body' has a wrong offset!");
static_assert(offsetof(FClientWriteClientCharacterEventRequest, CharacterId) == 0x000010, "Member 'FClientWriteClientCharacterEventRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientWriteClientCharacterEventRequest, CustomTags) == 0x000020, "Member 'FClientWriteClientCharacterEventRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientWriteClientCharacterEventRequest, EventName) == 0x000028, "Member 'FClientWriteClientCharacterEventRequest::EventName' has a wrong offset!");
static_assert(offsetof(FClientWriteClientCharacterEventRequest, Timestamp) == 0x000038, "Member 'FClientWriteClientCharacterEventRequest::Timestamp' has a wrong offset!");

// ScriptStruct PlayFab.EconomyExecuteInventoryOperationsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyExecuteInventoryOperationsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ETag;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyExecuteInventoryOperationsResponse) == 0x000008, "Wrong alignment on FEconomyExecuteInventoryOperationsResponse");
static_assert(sizeof(FEconomyExecuteInventoryOperationsResponse) == 0x000038, "Wrong size on FEconomyExecuteInventoryOperationsResponse");
static_assert(offsetof(FEconomyExecuteInventoryOperationsResponse, ETag) == 0x000008, "Member 'FEconomyExecuteInventoryOperationsResponse::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyExecuteInventoryOperationsResponse, IdempotencyId) == 0x000018, "Member 'FEconomyExecuteInventoryOperationsResponse::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyExecuteInventoryOperationsResponse, TransactionIds) == 0x000028, "Member 'FEconomyExecuteInventoryOperationsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetCatalogItemsRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetCatalogItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetCatalogItemsRequest) == 0x000008, "Wrong alignment on FAdminGetCatalogItemsRequest");
static_assert(sizeof(FAdminGetCatalogItemsRequest) == 0x000018, "Wrong size on FAdminGetCatalogItemsRequest");
static_assert(offsetof(FAdminGetCatalogItemsRequest, CatalogVersion) == 0x000008, "Member 'FAdminGetCatalogItemsRequest::CatalogVersion' has a wrong offset!");

// ScriptStruct PlayFab.ServerRevokeInventoryItemRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerRevokeInventoryItemRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemInstanceId;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRevokeInventoryItemRequest) == 0x000008, "Wrong alignment on FServerRevokeInventoryItemRequest");
static_assert(sizeof(FServerRevokeInventoryItemRequest) == 0x000038, "Wrong size on FServerRevokeInventoryItemRequest");
static_assert(offsetof(FServerRevokeInventoryItemRequest, CharacterId) == 0x000008, "Member 'FServerRevokeInventoryItemRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerRevokeInventoryItemRequest, ItemInstanceId) == 0x000018, "Member 'FServerRevokeInventoryItemRequest::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerRevokeInventoryItemRequest, PlayFabId) == 0x000028, "Member 'FServerRevokeInventoryItemRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetCloudScriptRevisionRequest
// 0x0008 (0x0010 - 0x0008)
struct FAdminGetCloudScriptRevisionRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Revision;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetCloudScriptRevisionRequest) == 0x000008, "Wrong alignment on FAdminGetCloudScriptRevisionRequest");
static_assert(sizeof(FAdminGetCloudScriptRevisionRequest) == 0x000010, "Wrong size on FAdminGetCloudScriptRevisionRequest");
static_assert(offsetof(FAdminGetCloudScriptRevisionRequest, Revision) == 0x000008, "Member 'FAdminGetCloudScriptRevisionRequest::Revision' has a wrong offset!");
static_assert(offsetof(FAdminGetCloudScriptRevisionRequest, Version) == 0x00000C, "Member 'FAdminGetCloudScriptRevisionRequest::Version' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetCloudScriptVersionsRequest
// 0x0000 (0x0008 - 0x0008)
struct FAdminGetCloudScriptVersionsRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FAdminGetCloudScriptVersionsRequest) == 0x000008, "Wrong alignment on FAdminGetCloudScriptVersionsRequest");
static_assert(sizeof(FAdminGetCloudScriptVersionsRequest) == 0x000008, "Wrong size on FAdminGetCloudScriptVersionsRequest");

// ScriptStruct PlayFab.MultiplayerListBuildAliasesResponse
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerListBuildAliasesResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BuildAliases;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2114[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListBuildAliasesResponse) == 0x000008, "Wrong alignment on FMultiplayerListBuildAliasesResponse");
static_assert(sizeof(FMultiplayerListBuildAliasesResponse) == 0x000030, "Wrong size on FMultiplayerListBuildAliasesResponse");
static_assert(offsetof(FMultiplayerListBuildAliasesResponse, BuildAliases) == 0x000008, "Member 'FMultiplayerListBuildAliasesResponse::BuildAliases' has a wrong offset!");
static_assert(offsetof(FMultiplayerListBuildAliasesResponse, PageSize) == 0x000018, "Member 'FMultiplayerListBuildAliasesResponse::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListBuildAliasesResponse, SkipToken) == 0x000020, "Member 'FMultiplayerListBuildAliasesResponse::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkSteamAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkSteamAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkSteamAccountResult) == 0x000008, "Wrong alignment on FClientUnlinkSteamAccountResult");
static_assert(sizeof(FClientUnlinkSteamAccountResult) == 0x000008, "Wrong size on FClientUnlinkSteamAccountResult");

// ScriptStruct PlayFab.AdminGetContentListRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetContentListRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetContentListRequest) == 0x000008, "Wrong alignment on FAdminGetContentListRequest");
static_assert(sizeof(FAdminGetContentListRequest) == 0x000018, "Wrong size on FAdminGetContentListRequest");
static_assert(offsetof(FAdminGetContentListRequest, Prefix) == 0x000008, "Member 'FAdminGetContentListRequest::Prefix' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetContentUploadUrlRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminGetContentUploadUrlRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ContentType;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetContentUploadUrlRequest) == 0x000008, "Wrong alignment on FAdminGetContentUploadUrlRequest");
static_assert(sizeof(FAdminGetContentUploadUrlRequest) == 0x000028, "Wrong size on FAdminGetContentUploadUrlRequest");
static_assert(offsetof(FAdminGetContentUploadUrlRequest, ContentType) == 0x000008, "Member 'FAdminGetContentUploadUrlRequest::ContentType' has a wrong offset!");
static_assert(offsetof(FAdminGetContentUploadUrlRequest, Key) == 0x000018, "Member 'FAdminGetContentUploadUrlRequest::Key' has a wrong offset!");

// ScriptStruct PlayFab.EconomyReviewItemResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomyReviewItemResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomyReviewItemResponse) == 0x000008, "Wrong alignment on FEconomyReviewItemResponse");
static_assert(sizeof(FEconomyReviewItemResponse) == 0x000008, "Wrong size on FEconomyReviewItemResponse");

// ScriptStruct PlayFab.ProfilesGetEntityProfileRequest
// 0x0018 (0x0020 - 0x0008)
struct FProfilesGetEntityProfileRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DataAsObject;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2115[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetEntityProfileRequest) == 0x000008, "Wrong alignment on FProfilesGetEntityProfileRequest");
static_assert(sizeof(FProfilesGetEntityProfileRequest) == 0x000020, "Wrong size on FProfilesGetEntityProfileRequest");
static_assert(offsetof(FProfilesGetEntityProfileRequest, CustomTags) == 0x000008, "Member 'FProfilesGetEntityProfileRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FProfilesGetEntityProfileRequest, DataAsObject) == 0x000010, "Member 'FProfilesGetEntityProfileRequest::DataAsObject' has a wrong offset!");
static_assert(offsetof(FProfilesGetEntityProfileRequest, Entity) == 0x000018, "Member 'FProfilesGetEntityProfileRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkXboxAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkXboxAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkXboxAccountResult) == 0x000008, "Wrong alignment on FClientUnlinkXboxAccountResult");
static_assert(sizeof(FClientUnlinkXboxAccountResult) == 0x000008, "Wrong size on FClientUnlinkXboxAccountResult");

// ScriptStruct PlayFab.AdminGetDataReportRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminGetDataReportRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Day;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReportName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Year;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2116[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminGetDataReportRequest) == 0x000008, "Wrong alignment on FAdminGetDataReportRequest");
static_assert(sizeof(FAdminGetDataReportRequest) == 0x000028, "Wrong size on FAdminGetDataReportRequest");
static_assert(offsetof(FAdminGetDataReportRequest, Day) == 0x000008, "Member 'FAdminGetDataReportRequest::Day' has a wrong offset!");
static_assert(offsetof(FAdminGetDataReportRequest, Month) == 0x00000C, "Member 'FAdminGetDataReportRequest::Month' has a wrong offset!");
static_assert(offsetof(FAdminGetDataReportRequest, ReportName) == 0x000010, "Member 'FAdminGetDataReportRequest::ReportName' has a wrong offset!");
static_assert(offsetof(FAdminGetDataReportRequest, Year) == 0x000020, "Member 'FAdminGetDataReportRequest::Year' has a wrong offset!");

// ScriptStruct PlayFab.ClientListUsersCharactersRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientListUsersCharactersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientListUsersCharactersRequest) == 0x000008, "Wrong alignment on FClientListUsersCharactersRequest");
static_assert(sizeof(FClientListUsersCharactersRequest) == 0x000018, "Wrong size on FClientListUsersCharactersRequest");
static_assert(offsetof(FClientListUsersCharactersRequest, PlayFabId) == 0x000008, "Member 'FClientListUsersCharactersRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetMatchmakerGameInfoRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetMatchmakerGameInfoRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 LobbyId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetMatchmakerGameInfoRequest) == 0x000008, "Wrong alignment on FAdminGetMatchmakerGameInfoRequest");
static_assert(sizeof(FAdminGetMatchmakerGameInfoRequest) == 0x000018, "Wrong size on FAdminGetMatchmakerGameInfoRequest");
static_assert(offsetof(FAdminGetMatchmakerGameInfoRequest, LobbyId) == 0x000008, "Member 'FAdminGetMatchmakerGameInfoRequest::LobbyId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetMatchmakerGameModesRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetMatchmakerGameModesRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildVersion;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetMatchmakerGameModesRequest) == 0x000008, "Wrong alignment on FAdminGetMatchmakerGameModesRequest");
static_assert(sizeof(FAdminGetMatchmakerGameModesRequest) == 0x000018, "Wrong size on FAdminGetMatchmakerGameModesRequest");
static_assert(offsetof(FAdminGetMatchmakerGameModesRequest, BuildVersion) == 0x000008, "Member 'FAdminGetMatchmakerGameModesRequest::BuildVersion' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetFriendLeaderboardAroundPlayerRequest
// 0x0050 (0x0058 - 0x0008)
struct FClientGetFriendLeaderboardAroundPlayerRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExternalFriendSources                        ExternalPlatformFriends;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2117[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxResultsCount;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpecificVersion;                                // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2118[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetFriendLeaderboardAroundPlayerRequest) == 0x000008, "Wrong alignment on FClientGetFriendLeaderboardAroundPlayerRequest");
static_assert(sizeof(FClientGetFriendLeaderboardAroundPlayerRequest) == 0x000058, "Wrong size on FClientGetFriendLeaderboardAroundPlayerRequest");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerRequest, CustomTags) == 0x000008, "Member 'FClientGetFriendLeaderboardAroundPlayerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerRequest, ExternalPlatformFriends) == 0x000010, "Member 'FClientGetFriendLeaderboardAroundPlayerRequest::ExternalPlatformFriends' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerRequest, MaxResultsCount) == 0x000014, "Member 'FClientGetFriendLeaderboardAroundPlayerRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerRequest, PlayFabId) == 0x000018, "Member 'FClientGetFriendLeaderboardAroundPlayerRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerRequest, ProfileConstraints) == 0x000028, "Member 'FClientGetFriendLeaderboardAroundPlayerRequest::ProfileConstraints' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerRequest, StatisticName) == 0x000030, "Member 'FClientGetFriendLeaderboardAroundPlayerRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerRequest, UseSpecificVersion) == 0x000040, "Member 'FClientGetFriendLeaderboardAroundPlayerRequest::UseSpecificVersion' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerRequest, Version) == 0x000044, "Member 'FClientGetFriendLeaderboardAroundPlayerRequest::Version' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerRequest, XboxToken) == 0x000048, "Member 'FClientGetFriendLeaderboardAroundPlayerRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetMultiplayerServerDetailsResponse
// 0x00C0 (0x00C8 - 0x0008)
struct FMultiplayerGetMultiplayerServerDetailsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             ConnectedPlayers;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FQDN;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IPV4Address;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastStateTransitionTime;                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Ports;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             PublicIPV4Addresses;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 State;                                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VmId;                                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetMultiplayerServerDetailsResponse) == 0x000008, "Wrong alignment on FMultiplayerGetMultiplayerServerDetailsResponse");
static_assert(sizeof(FMultiplayerGetMultiplayerServerDetailsResponse) == 0x0000C8, "Wrong size on FMultiplayerGetMultiplayerServerDetailsResponse");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, BuildId) == 0x000008, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, ConnectedPlayers) == 0x000018, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::ConnectedPlayers' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, FQDN) == 0x000028, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::FQDN' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, IPV4Address) == 0x000038, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::IPV4Address' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, LastStateTransitionTime) == 0x000048, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::LastStateTransitionTime' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, Ports) == 0x000058, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::Ports' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, PublicIPV4Addresses) == 0x000068, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::PublicIPV4Addresses' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, Region) == 0x000078, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::Region' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, ServerId) == 0x000088, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::ServerId' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, SessionId) == 0x000098, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::SessionId' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, State) == 0x0000A8, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::State' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsResponse, VmId) == 0x0000B8, "Member 'FMultiplayerGetMultiplayerServerDetailsResponse::VmId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayedTitleListRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPlayedTitleListRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayedTitleListRequest) == 0x000008, "Wrong alignment on FAdminGetPlayedTitleListRequest");
static_assert(sizeof(FAdminGetPlayedTitleListRequest) == 0x000018, "Wrong size on FAdminGetPlayedTitleListRequest");
static_assert(offsetof(FAdminGetPlayedTitleListRequest, PlayFabId) == 0x000008, "Member 'FAdminGetPlayedTitleListRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdateCharacterStatisticsResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUpdateCharacterStatisticsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUpdateCharacterStatisticsResult) == 0x000008, "Wrong alignment on FClientUpdateCharacterStatisticsResult");
static_assert(sizeof(FClientUpdateCharacterStatisticsResult) == 0x000008, "Wrong size on FClientUpdateCharacterStatisticsResult");

// ScriptStruct PlayFab.AdminGetPlayerIdFromAuthTokenRequest
// 0x0018 (0x0020 - 0x0008)
struct FAdminGetPlayerIdFromAuthTokenRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Token;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAuthTokenType                                TokenType;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2119[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminGetPlayerIdFromAuthTokenRequest) == 0x000008, "Wrong alignment on FAdminGetPlayerIdFromAuthTokenRequest");
static_assert(sizeof(FAdminGetPlayerIdFromAuthTokenRequest) == 0x000020, "Wrong size on FAdminGetPlayerIdFromAuthTokenRequest");
static_assert(offsetof(FAdminGetPlayerIdFromAuthTokenRequest, Token) == 0x000008, "Member 'FAdminGetPlayerIdFromAuthTokenRequest::Token' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayerIdFromAuthTokenRequest, TokenType) == 0x000018, "Member 'FAdminGetPlayerIdFromAuthTokenRequest::TokenType' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerStatisticVersionsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayerStatisticVersionsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             StatisticVersions;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerStatisticVersionsResult) == 0x000008, "Wrong alignment on FServerGetPlayerStatisticVersionsResult");
static_assert(sizeof(FServerGetPlayerStatisticVersionsResult) == 0x000018, "Wrong size on FServerGetPlayerStatisticVersionsResult");
static_assert(offsetof(FServerGetPlayerStatisticVersionsResult, StatisticVersions) == 0x000008, "Member 'FServerGetPlayerStatisticVersionsResult::StatisticVersions' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemSteamInventoryItemsRequest
// 0x0020 (0x0028 - 0x0008)
struct FEconomyRedeemSteamInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemSteamInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyRedeemSteamInventoryItemsRequest");
static_assert(sizeof(FEconomyRedeemSteamInventoryItemsRequest) == 0x000028, "Wrong size on FEconomyRedeemSteamInventoryItemsRequest");
static_assert(offsetof(FEconomyRedeemSteamInventoryItemsRequest, CollectionId) == 0x000008, "Member 'FEconomyRedeemSteamInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemSteamInventoryItemsRequest, CustomTags) == 0x000018, "Member 'FEconomyRedeemSteamInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemSteamInventoryItemsRequest, Entity) == 0x000020, "Member 'FEconomyRedeemSteamInventoryItemsRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerProfileRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminGetPlayerProfileRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerProfileRequest) == 0x000008, "Wrong alignment on FAdminGetPlayerProfileRequest");
static_assert(sizeof(FAdminGetPlayerProfileRequest) == 0x000028, "Wrong size on FAdminGetPlayerProfileRequest");
static_assert(offsetof(FAdminGetPlayerProfileRequest, CustomTags) == 0x000008, "Member 'FAdminGetPlayerProfileRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayerProfileRequest, PlayFabId) == 0x000010, "Member 'FAdminGetPlayerProfileRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayerProfileRequest, ProfileConstraints) == 0x000020, "Member 'FAdminGetPlayerProfileRequest::ProfileConstraints' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayersSegmentsRequest
// 0x0018 (0x0020 - 0x0008)
struct FAdminGetPlayersSegmentsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayersSegmentsRequest) == 0x000008, "Wrong alignment on FAdminGetPlayersSegmentsRequest");
static_assert(sizeof(FAdminGetPlayersSegmentsRequest) == 0x000020, "Wrong size on FAdminGetPlayersSegmentsRequest");
static_assert(offsetof(FAdminGetPlayersSegmentsRequest, CustomTags) == 0x000008, "Member 'FAdminGetPlayersSegmentsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayersSegmentsRequest, PlayFabId) == 0x000010, "Member 'FAdminGetPlayersSegmentsRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithTwitchRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientLoginWithTwitchRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AccessToken;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateAccount;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithTwitchRequest) == 0x000008, "Wrong alignment on FClientLoginWithTwitchRequest");
static_assert(sizeof(FClientLoginWithTwitchRequest) == 0x000050, "Wrong size on FClientLoginWithTwitchRequest");
static_assert(offsetof(FClientLoginWithTwitchRequest, AccessToken) == 0x000008, "Member 'FClientLoginWithTwitchRequest::AccessToken' has a wrong offset!");
static_assert(offsetof(FClientLoginWithTwitchRequest, CreateAccount) == 0x000018, "Member 'FClientLoginWithTwitchRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithTwitchRequest, CustomTags) == 0x000020, "Member 'FClientLoginWithTwitchRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithTwitchRequest, EncryptedRequest) == 0x000028, "Member 'FClientLoginWithTwitchRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithTwitchRequest, InfoRequestParameters) == 0x000038, "Member 'FClientLoginWithTwitchRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithTwitchRequest, PlayerSecret) == 0x000040, "Member 'FClientLoginWithTwitchRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetTitleMultiplayerServersQuotaChangeRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest) == 0x000008, "Wrong alignment on FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest");
static_assert(sizeof(FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest) == 0x000020, "Wrong size on FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest");
static_assert(offsetof(FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest, RequestId) == 0x000010, "Member 'FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest::RequestId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerSharedSecretsRequest
// 0x0000 (0x0008 - 0x0008)
struct FAdminGetPlayerSharedSecretsRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FAdminGetPlayerSharedSecretsRequest) == 0x000008, "Wrong alignment on FAdminGetPlayerSharedSecretsRequest");
static_assert(sizeof(FAdminGetPlayerSharedSecretsRequest) == 0x000008, "Wrong size on FAdminGetPlayerSharedSecretsRequest");

// ScriptStruct PlayFab.ServerUnlockContainerItemResult
// 0x0038 (0x0040 - 0x0008)
struct FServerUnlockContainerItemResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             GrantedItems;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 UnlockedItemInstanceId;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnlockedWithItemInstanceId;                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrency;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUnlockContainerItemResult) == 0x000008, "Wrong alignment on FServerUnlockContainerItemResult");
static_assert(sizeof(FServerUnlockContainerItemResult) == 0x000040, "Wrong size on FServerUnlockContainerItemResult");
static_assert(offsetof(FServerUnlockContainerItemResult, GrantedItems) == 0x000008, "Member 'FServerUnlockContainerItemResult::GrantedItems' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerItemResult, UnlockedItemInstanceId) == 0x000018, "Member 'FServerUnlockContainerItemResult::UnlockedItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerItemResult, UnlockedWithItemInstanceId) == 0x000028, "Member 'FServerUnlockContainerItemResult::UnlockedWithItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerItemResult, VirtualCurrency) == 0x000038, "Member 'FServerUnlockContainerItemResult::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.AdminRevokeBansRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminRevokeBansRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BanIds;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRevokeBansRequest) == 0x000008, "Wrong alignment on FAdminRevokeBansRequest");
static_assert(sizeof(FAdminRevokeBansRequest) == 0x000018, "Wrong size on FAdminRevokeBansRequest");
static_assert(offsetof(FAdminRevokeBansRequest, BanIds) == 0x000008, "Member 'FAdminRevokeBansRequest::BanIds' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayersInSegmentRequest
// 0x0038 (0x0040 - 0x0008)
struct FAdminGetPlayersInSegmentRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetProfilesAsync;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211B[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBatchSize;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsToLive;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SegmentId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayersInSegmentRequest) == 0x000008, "Wrong alignment on FAdminGetPlayersInSegmentRequest");
static_assert(sizeof(FAdminGetPlayersInSegmentRequest) == 0x000040, "Wrong size on FAdminGetPlayersInSegmentRequest");
static_assert(offsetof(FAdminGetPlayersInSegmentRequest, ContinuationToken) == 0x000008, "Member 'FAdminGetPlayersInSegmentRequest::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayersInSegmentRequest, CustomTags) == 0x000018, "Member 'FAdminGetPlayersInSegmentRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayersInSegmentRequest, GetProfilesAsync) == 0x000020, "Member 'FAdminGetPlayersInSegmentRequest::GetProfilesAsync' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayersInSegmentRequest, MaxBatchSize) == 0x000024, "Member 'FAdminGetPlayersInSegmentRequest::MaxBatchSize' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayersInSegmentRequest, SecondsToLive) == 0x000028, "Member 'FAdminGetPlayersInSegmentRequest::SecondsToLive' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayersInSegmentRequest, SegmentId) == 0x000030, "Member 'FAdminGetPlayersInSegmentRequest::SegmentId' has a wrong offset!");

// ScriptStruct PlayFab.ServerRevokeAllBansForUserRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerRevokeAllBansForUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRevokeAllBansForUserRequest) == 0x000008, "Wrong alignment on FServerRevokeAllBansForUserRequest");
static_assert(sizeof(FServerRevokeAllBansForUserRequest) == 0x000018, "Wrong size on FServerRevokeAllBansForUserRequest");
static_assert(offsetof(FServerRevokeAllBansForUserRequest, PlayFabId) == 0x000008, "Member 'FServerRevokeAllBansForUserRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerStatisticDefinitionsRequest
// 0x0000 (0x0008 - 0x0008)
struct FAdminGetPlayerStatisticDefinitionsRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FAdminGetPlayerStatisticDefinitionsRequest) == 0x000008, "Wrong alignment on FAdminGetPlayerStatisticDefinitionsRequest");
static_assert(sizeof(FAdminGetPlayerStatisticDefinitionsRequest) == 0x000008, "Wrong size on FAdminGetPlayerStatisticDefinitionsRequest");

// ScriptStruct PlayFab.AdminGetPlayerStatisticVersionsRequest
// 0x0018 (0x0020 - 0x0008)
struct FAdminGetPlayerStatisticVersionsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerStatisticVersionsRequest) == 0x000008, "Wrong alignment on FAdminGetPlayerStatisticVersionsRequest");
static_assert(sizeof(FAdminGetPlayerStatisticVersionsRequest) == 0x000020, "Wrong size on FAdminGetPlayerStatisticVersionsRequest");
static_assert(offsetof(FAdminGetPlayerStatisticVersionsRequest, CustomTags) == 0x000008, "Member 'FAdminGetPlayerStatisticVersionsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayerStatisticVersionsRequest, StatisticName) == 0x000010, "Member 'FAdminGetPlayerStatisticVersionsRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.InsightsInsightsEmptyRequest
// 0x0008 (0x0010 - 0x0008)
struct FInsightsInsightsEmptyRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInsightsInsightsEmptyRequest) == 0x000008, "Wrong alignment on FInsightsInsightsEmptyRequest");
static_assert(sizeof(FInsightsInsightsEmptyRequest) == 0x000010, "Wrong size on FInsightsInsightsEmptyRequest");
static_assert(offsetof(FInsightsInsightsEmptyRequest, CustomTags) == 0x000008, "Member 'FInsightsInsightsEmptyRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayerTagsRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminGetPlayerTagsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayerTagsRequest) == 0x000008, "Wrong alignment on FAdminGetPlayerTagsRequest");
static_assert(sizeof(FAdminGetPlayerTagsRequest) == 0x000030, "Wrong size on FAdminGetPlayerTagsRequest");
static_assert(offsetof(FAdminGetPlayerTagsRequest, CustomTags) == 0x000008, "Member 'FAdminGetPlayerTagsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayerTagsRequest, Namespace) == 0x000010, "Member 'FAdminGetPlayerTagsRequest::Namespace' has a wrong offset!");
static_assert(offsetof(FAdminGetPlayerTagsRequest, PlayFabId) == 0x000020, "Member 'FAdminGetPlayerTagsRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPolicyRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPolicyRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PolicyName;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPolicyRequest) == 0x000008, "Wrong alignment on FAdminGetPolicyRequest");
static_assert(sizeof(FAdminGetPolicyRequest) == 0x000018, "Wrong size on FAdminGetPolicyRequest");
static_assert(offsetof(FAdminGetPolicyRequest, PolicyName) == 0x000008, "Member 'FAdminGetPolicyRequest::PolicyName' has a wrong offset!");

// ScriptStruct PlayFab.ServerLoginWithXboxIdRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerLoginWithXboxIdRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sandbox;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLoginWithXboxIdRequest) == 0x000008, "Wrong alignment on FServerLoginWithXboxIdRequest");
static_assert(sizeof(FServerLoginWithXboxIdRequest) == 0x000040, "Wrong size on FServerLoginWithXboxIdRequest");
static_assert(offsetof(FServerLoginWithXboxIdRequest, CreateAccount) == 0x000008, "Member 'FServerLoginWithXboxIdRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FServerLoginWithXboxIdRequest, CustomTags) == 0x000010, "Member 'FServerLoginWithXboxIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLoginWithXboxIdRequest, InfoRequestParameters) == 0x000018, "Member 'FServerLoginWithXboxIdRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FServerLoginWithXboxIdRequest, Sandbox) == 0x000020, "Member 'FServerLoginWithXboxIdRequest::Sandbox' has a wrong offset!");
static_assert(offsetof(FServerLoginWithXboxIdRequest, XboxId) == 0x000030, "Member 'FServerLoginWithXboxIdRequest::XboxId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetBuildResponse
// 0x0108 (0x0110 - 0x0008)
struct FMultiplayerGetBuildResponse final : public FPlayFabResultCommon
{
public:
	bool                                          AreAssetsReadonly;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildStatus;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContainerFlavor                              ContainerFlavor;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211F[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContainerRunCommand;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreationTime;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomGameContainerImage;                          // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameAssetReferences;                               // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameCertificateReferences;                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InstrumentationConfiguration;                      // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MetaData;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiplayerServerCountPerVm;                       // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2120[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OsPlatform;                                        // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Ports;                                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             RegionConfigurations;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ServerResourceConstraints;                         // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerType;                                        // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartMultiplayerServerCommand;                     // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzureVmSize                                  VmSize;                                            // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2121[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     VmStartupScriptConfiguration;                      // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetBuildResponse) == 0x000008, "Wrong alignment on FMultiplayerGetBuildResponse");
static_assert(sizeof(FMultiplayerGetBuildResponse) == 0x000110, "Wrong size on FMultiplayerGetBuildResponse");
static_assert(offsetof(FMultiplayerGetBuildResponse, AreAssetsReadonly) == 0x000008, "Member 'FMultiplayerGetBuildResponse::AreAssetsReadonly' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, BuildId) == 0x000010, "Member 'FMultiplayerGetBuildResponse::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, BuildName) == 0x000020, "Member 'FMultiplayerGetBuildResponse::BuildName' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, BuildStatus) == 0x000030, "Member 'FMultiplayerGetBuildResponse::BuildStatus' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, ContainerFlavor) == 0x000040, "Member 'FMultiplayerGetBuildResponse::ContainerFlavor' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, ContainerRunCommand) == 0x000048, "Member 'FMultiplayerGetBuildResponse::ContainerRunCommand' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, CreationTime) == 0x000058, "Member 'FMultiplayerGetBuildResponse::CreationTime' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, CustomGameContainerImage) == 0x000068, "Member 'FMultiplayerGetBuildResponse::CustomGameContainerImage' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, GameAssetReferences) == 0x000070, "Member 'FMultiplayerGetBuildResponse::GameAssetReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, GameCertificateReferences) == 0x000080, "Member 'FMultiplayerGetBuildResponse::GameCertificateReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, InstrumentationConfiguration) == 0x000090, "Member 'FMultiplayerGetBuildResponse::InstrumentationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, MetaData) == 0x000098, "Member 'FMultiplayerGetBuildResponse::MetaData' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, MultiplayerServerCountPerVm) == 0x0000A0, "Member 'FMultiplayerGetBuildResponse::MultiplayerServerCountPerVm' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, OsPlatform) == 0x0000A8, "Member 'FMultiplayerGetBuildResponse::OsPlatform' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, Ports) == 0x0000B8, "Member 'FMultiplayerGetBuildResponse::Ports' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, RegionConfigurations) == 0x0000C8, "Member 'FMultiplayerGetBuildResponse::RegionConfigurations' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, ServerResourceConstraints) == 0x0000D8, "Member 'FMultiplayerGetBuildResponse::ServerResourceConstraints' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, ServerType) == 0x0000E0, "Member 'FMultiplayerGetBuildResponse::ServerType' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, StartMultiplayerServerCommand) == 0x0000F0, "Member 'FMultiplayerGetBuildResponse::StartMultiplayerServerCommand' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, VmSize) == 0x000100, "Member 'FMultiplayerGetBuildResponse::VmSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildResponse, VmStartupScriptConfiguration) == 0x000108, "Member 'FMultiplayerGetBuildResponse::VmStartupScriptConfiguration' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyGetInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ETag;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyGetInventoryItemsResponse");
static_assert(sizeof(FEconomyGetInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyGetInventoryItemsResponse");
static_assert(offsetof(FEconomyGetInventoryItemsResponse, ContinuationToken) == 0x000008, "Member 'FEconomyGetInventoryItemsResponse::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryItemsResponse, ETag) == 0x000018, "Member 'FEconomyGetInventoryItemsResponse::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryItemsResponse, Items) == 0x000028, "Member 'FEconomyGetInventoryItemsResponse::Items' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPublisherDataRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPublisherDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Keys;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPublisherDataRequest) == 0x000008, "Wrong alignment on FAdminGetPublisherDataRequest");
static_assert(sizeof(FAdminGetPublisherDataRequest) == 0x000018, "Wrong size on FAdminGetPublisherDataRequest");
static_assert(offsetof(FAdminGetPublisherDataRequest, Keys) == 0x000008, "Member 'FAdminGetPublisherDataRequest::Keys' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetRandomResultTablesRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetRandomResultTablesRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetRandomResultTablesRequest) == 0x000008, "Wrong alignment on FAdminGetRandomResultTablesRequest");
static_assert(sizeof(FAdminGetRandomResultTablesRequest) == 0x000018, "Wrong size on FAdminGetRandomResultTablesRequest");
static_assert(offsetof(FAdminGetRandomResultTablesRequest, CatalogVersion) == 0x000008, "Member 'FAdminGetRandomResultTablesRequest::CatalogVersion' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetPlayersInSegmentExportRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetPlayersInSegmentExportRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ExportId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetPlayersInSegmentExportRequest) == 0x000008, "Wrong alignment on FAdminGetPlayersInSegmentExportRequest");
static_assert(sizeof(FAdminGetPlayersInSegmentExportRequest) == 0x000018, "Wrong size on FAdminGetPlayersInSegmentExportRequest");
static_assert(offsetof(FAdminGetPlayersInSegmentExportRequest, ExportId) == 0x000008, "Member 'FAdminGetPlayersInSegmentExportRequest::ExportId' has a wrong offset!");

// ScriptStruct PlayFab.ServerLoginWithServerCustomIdRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerLoginWithServerCustomIdRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2122[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerCustomId;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLoginWithServerCustomIdRequest) == 0x000008, "Wrong alignment on FServerLoginWithServerCustomIdRequest");
static_assert(sizeof(FServerLoginWithServerCustomIdRequest) == 0x000040, "Wrong size on FServerLoginWithServerCustomIdRequest");
static_assert(offsetof(FServerLoginWithServerCustomIdRequest, CreateAccount) == 0x000008, "Member 'FServerLoginWithServerCustomIdRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FServerLoginWithServerCustomIdRequest, CustomTags) == 0x000010, "Member 'FServerLoginWithServerCustomIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLoginWithServerCustomIdRequest, InfoRequestParameters) == 0x000018, "Member 'FServerLoginWithServerCustomIdRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FServerLoginWithServerCustomIdRequest, PlayerSecret) == 0x000020, "Member 'FServerLoginWithServerCustomIdRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FServerLoginWithServerCustomIdRequest, ServerCustomId) == 0x000030, "Member 'FServerLoginWithServerCustomIdRequest::ServerCustomId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerLobbyEmptyResult
// 0x0000 (0x0008 - 0x0008)
struct FMultiplayerLobbyEmptyResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FMultiplayerLobbyEmptyResult) == 0x000008, "Wrong alignment on FMultiplayerLobbyEmptyResult");
static_assert(sizeof(FMultiplayerLobbyEmptyResult) == 0x000008, "Wrong size on FMultiplayerLobbyEmptyResult");

// ScriptStruct PlayFab.ClientLinkFacebookAccountRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkFacebookAccountRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AccessToken;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2123[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientLinkFacebookAccountRequest) == 0x000008, "Wrong alignment on FClientLinkFacebookAccountRequest");
static_assert(sizeof(FClientLinkFacebookAccountRequest) == 0x000028, "Wrong size on FClientLinkFacebookAccountRequest");
static_assert(offsetof(FClientLinkFacebookAccountRequest, AccessToken) == 0x000008, "Member 'FClientLinkFacebookAccountRequest::AccessToken' has a wrong offset!");
static_assert(offsetof(FClientLinkFacebookAccountRequest, CustomTags) == 0x000018, "Member 'FClientLinkFacebookAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkFacebookAccountRequest, ForceLink) == 0x000020, "Member 'FClientLinkFacebookAccountRequest::ForceLink' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetMultiplayerSessionLogsBySessionIdRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest) == 0x000008, "Wrong alignment on FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest");
static_assert(sizeof(FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest) == 0x000020, "Wrong size on FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest");
static_assert(offsetof(FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest, SessionId) == 0x000010, "Member 'FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest::SessionId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetSegmentsRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetSegmentsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SegmentIds;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetSegmentsRequest) == 0x000008, "Wrong alignment on FAdminGetSegmentsRequest");
static_assert(sizeof(FAdminGetSegmentsRequest) == 0x000018, "Wrong size on FAdminGetSegmentsRequest");
static_assert(offsetof(FAdminGetSegmentsRequest, SegmentIds) == 0x000008, "Member 'FAdminGetSegmentsRequest::SegmentIds' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetStoreItemsRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminGetStoreItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetStoreItemsRequest) == 0x000008, "Wrong alignment on FAdminGetStoreItemsRequest");
static_assert(sizeof(FAdminGetStoreItemsRequest) == 0x000028, "Wrong size on FAdminGetStoreItemsRequest");
static_assert(offsetof(FAdminGetStoreItemsRequest, CatalogVersion) == 0x000008, "Member 'FAdminGetStoreItemsRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FAdminGetStoreItemsRequest, StoreId) == 0x000018, "Member 'FAdminGetStoreItemsRequest::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetTaskInstancesRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminGetTaskInstancesRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 StartedAtRangeFrom;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartedAtRangeTo;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETaskInstanceStatus                           StatusFilter;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2124[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     TaskIdentifier;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetTaskInstancesRequest) == 0x000008, "Wrong alignment on FAdminGetTaskInstancesRequest");
static_assert(sizeof(FAdminGetTaskInstancesRequest) == 0x000038, "Wrong size on FAdminGetTaskInstancesRequest");
static_assert(offsetof(FAdminGetTaskInstancesRequest, StartedAtRangeFrom) == 0x000008, "Member 'FAdminGetTaskInstancesRequest::StartedAtRangeFrom' has a wrong offset!");
static_assert(offsetof(FAdminGetTaskInstancesRequest, StartedAtRangeTo) == 0x000018, "Member 'FAdminGetTaskInstancesRequest::StartedAtRangeTo' has a wrong offset!");
static_assert(offsetof(FAdminGetTaskInstancesRequest, StatusFilter) == 0x000028, "Member 'FAdminGetTaskInstancesRequest::StatusFilter' has a wrong offset!");
static_assert(offsetof(FAdminGetTaskInstancesRequest, TaskIdentifier) == 0x000030, "Member 'FAdminGetTaskInstancesRequest::TaskIdentifier' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetCharacterInventoryResult
// 0x0030 (0x0038 - 0x0008)
struct FClientGetCharacterInventoryResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Inventory;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrency;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrencyRechargeTimes;                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetCharacterInventoryResult) == 0x000008, "Wrong alignment on FClientGetCharacterInventoryResult");
static_assert(sizeof(FClientGetCharacterInventoryResult) == 0x000038, "Wrong size on FClientGetCharacterInventoryResult");
static_assert(offsetof(FClientGetCharacterInventoryResult, CharacterId) == 0x000008, "Member 'FClientGetCharacterInventoryResult::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterInventoryResult, Inventory) == 0x000018, "Member 'FClientGetCharacterInventoryResult::Inventory' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterInventoryResult, VirtualCurrency) == 0x000028, "Member 'FClientGetCharacterInventoryResult::VirtualCurrency' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterInventoryResult, VirtualCurrencyRechargeTimes) == 0x000030, "Member 'FClientGetCharacterInventoryResult::VirtualCurrencyRechargeTimes' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetTasksRequest
// 0x0008 (0x0010 - 0x0008)
struct FAdminGetTasksRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Identifier;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetTasksRequest) == 0x000008, "Wrong alignment on FAdminGetTasksRequest");
static_assert(sizeof(FAdminGetTasksRequest) == 0x000010, "Wrong size on FAdminGetTasksRequest");
static_assert(offsetof(FAdminGetTasksRequest, Identifier) == 0x000008, "Member 'FAdminGetTasksRequest::Identifier' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerProfileRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientGetPlayerProfileRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerProfileRequest) == 0x000008, "Wrong alignment on FClientGetPlayerProfileRequest");
static_assert(sizeof(FClientGetPlayerProfileRequest) == 0x000028, "Wrong size on FClientGetPlayerProfileRequest");
static_assert(offsetof(FClientGetPlayerProfileRequest, CustomTags) == 0x000008, "Member 'FClientGetPlayerProfileRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerProfileRequest, PlayFabId) == 0x000010, "Member 'FClientGetPlayerProfileRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerProfileRequest, ProfileConstraints) == 0x000020, "Member 'FClientGetPlayerProfileRequest::ProfileConstraints' has a wrong offset!");

// ScriptStruct PlayFab.ServerGrantItemsToUsersResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGrantItemsToUsersResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             ItemGrantResults;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGrantItemsToUsersResult) == 0x000008, "Wrong alignment on FServerGrantItemsToUsersResult");
static_assert(sizeof(FServerGrantItemsToUsersResult) == 0x000018, "Wrong size on FServerGrantItemsToUsersResult");
static_assert(offsetof(FServerGrantItemsToUsersResult, ItemGrantResults) == 0x000008, "Member 'FServerGrantItemsToUsersResult::ItemGrantResults' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetTitleDataRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminGetTitleDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Keys;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverrideLabel;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetTitleDataRequest) == 0x000008, "Wrong alignment on FAdminGetTitleDataRequest");
static_assert(sizeof(FAdminGetTitleDataRequest) == 0x000028, "Wrong size on FAdminGetTitleDataRequest");
static_assert(offsetof(FAdminGetTitleDataRequest, Keys) == 0x000008, "Member 'FAdminGetTitleDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FAdminGetTitleDataRequest, OverrideLabel) == 0x000018, "Member 'FAdminGetTitleDataRequest::OverrideLabel' has a wrong offset!");

// ScriptStruct PlayFab.AdminLookupUserAccountInfoRequest
// 0x0040 (0x0048 - 0x0008)
struct FAdminLookupUserAccountInfoRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Email;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleDisplayName;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminLookupUserAccountInfoRequest) == 0x000008, "Wrong alignment on FAdminLookupUserAccountInfoRequest");
static_assert(sizeof(FAdminLookupUserAccountInfoRequest) == 0x000048, "Wrong size on FAdminLookupUserAccountInfoRequest");
static_assert(offsetof(FAdminLookupUserAccountInfoRequest, Email) == 0x000008, "Member 'FAdminLookupUserAccountInfoRequest::Email' has a wrong offset!");
static_assert(offsetof(FAdminLookupUserAccountInfoRequest, PlayFabId) == 0x000018, "Member 'FAdminLookupUserAccountInfoRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminLookupUserAccountInfoRequest, TitleDisplayName) == 0x000028, "Member 'FAdminLookupUserAccountInfoRequest::TitleDisplayName' has a wrong offset!");
static_assert(offsetof(FAdminLookupUserAccountInfoRequest, Username) == 0x000038, "Member 'FAdminLookupUserAccountInfoRequest::Username' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetUserBansRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminGetUserBansRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetUserBansRequest) == 0x000008, "Wrong alignment on FAdminGetUserBansRequest");
static_assert(sizeof(FAdminGetUserBansRequest) == 0x000018, "Wrong size on FAdminGetUserBansRequest");
static_assert(offsetof(FAdminGetUserBansRequest, PlayFabId) == 0x000008, "Member 'FAdminGetUserBansRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListGroupBlocksResponse
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListGroupBlocksResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BlockedEntities;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListGroupBlocksResponse) == 0x000008, "Wrong alignment on FGroupsListGroupBlocksResponse");
static_assert(sizeof(FGroupsListGroupBlocksResponse) == 0x000018, "Wrong size on FGroupsListGroupBlocksResponse");
static_assert(offsetof(FGroupsListGroupBlocksResponse, BlockedEntities) == 0x000008, "Member 'FGroupsListGroupBlocksResponse::BlockedEntities' has a wrong offset!");

// ScriptStruct PlayFab.GroupsUpdateGroupResponse
// 0x0018 (0x0020 - 0x0008)
struct FGroupsUpdateGroupResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 OperationReason;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOperationTypes                               SetResult;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2125[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroupsUpdateGroupResponse) == 0x000008, "Wrong alignment on FGroupsUpdateGroupResponse");
static_assert(sizeof(FGroupsUpdateGroupResponse) == 0x000020, "Wrong size on FGroupsUpdateGroupResponse");
static_assert(offsetof(FGroupsUpdateGroupResponse, OperationReason) == 0x000008, "Member 'FGroupsUpdateGroupResponse::OperationReason' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupResponse, ProfileVersion) == 0x000018, "Member 'FGroupsUpdateGroupResponse::ProfileVersion' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupResponse, SetResult) == 0x00001C, "Member 'FGroupsUpdateGroupResponse::SetResult' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetUserDataRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminGetUserDataRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         IfChangedFromDataVersion;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2126[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keys;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetUserDataRequest) == 0x000008, "Wrong alignment on FAdminGetUserDataRequest");
static_assert(sizeof(FAdminGetUserDataRequest) == 0x000030, "Wrong size on FAdminGetUserDataRequest");
static_assert(offsetof(FAdminGetUserDataRequest, IfChangedFromDataVersion) == 0x000008, "Member 'FAdminGetUserDataRequest::IfChangedFromDataVersion' has a wrong offset!");
static_assert(offsetof(FAdminGetUserDataRequest, Keys) == 0x000010, "Member 'FAdminGetUserDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FAdminGetUserDataRequest, PlayFabId) == 0x000020, "Member 'FAdminGetUserDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminGetUserInventoryRequest
// 0x0018 (0x0020 - 0x0008)
struct FAdminGetUserInventoryRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGetUserInventoryRequest) == 0x000008, "Wrong alignment on FAdminGetUserInventoryRequest");
static_assert(sizeof(FAdminGetUserInventoryRequest) == 0x000020, "Wrong size on FAdminGetUserInventoryRequest");
static_assert(offsetof(FAdminGetUserInventoryRequest, CustomTags) == 0x000008, "Member 'FAdminGetUserInventoryRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminGetUserInventoryRequest, PlayFabId) == 0x000010, "Member 'FAdminGetUserInventoryRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemContainersRequest
// 0x0040 (0x0048 - 0x0008)
struct FEconomyGetItemContainersRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContinuationToken;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2127[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemContainersRequest) == 0x000008, "Wrong alignment on FEconomyGetItemContainersRequest");
static_assert(sizeof(FEconomyGetItemContainersRequest) == 0x000048, "Wrong size on FEconomyGetItemContainersRequest");
static_assert(offsetof(FEconomyGetItemContainersRequest, AlternateId) == 0x000008, "Member 'FEconomyGetItemContainersRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemContainersRequest, ContinuationToken) == 0x000010, "Member 'FEconomyGetItemContainersRequest::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemContainersRequest, Count) == 0x000020, "Member 'FEconomyGetItemContainersRequest::Count' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemContainersRequest, CustomTags) == 0x000028, "Member 'FEconomyGetItemContainersRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemContainersRequest, Entity) == 0x000030, "Member 'FEconomyGetItemContainersRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemContainersRequest, ID) == 0x000038, "Member 'FEconomyGetItemContainersRequest::ID' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptPostFunctionResultForFunctionExecutionRequest
// 0x0018 (0x0020 - 0x0008)
struct FCloudScriptPostFunctionResultForFunctionExecutionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionResult;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptPostFunctionResultForFunctionExecutionRequest) == 0x000008, "Wrong alignment on FCloudScriptPostFunctionResultForFunctionExecutionRequest");
static_assert(sizeof(FCloudScriptPostFunctionResultForFunctionExecutionRequest) == 0x000020, "Wrong size on FCloudScriptPostFunctionResultForFunctionExecutionRequest");
static_assert(offsetof(FCloudScriptPostFunctionResultForFunctionExecutionRequest, CustomTags) == 0x000008, "Member 'FCloudScriptPostFunctionResultForFunctionExecutionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptPostFunctionResultForFunctionExecutionRequest, Entity) == 0x000010, "Member 'FCloudScriptPostFunctionResultForFunctionExecutionRequest::Entity' has a wrong offset!");
static_assert(offsetof(FCloudScriptPostFunctionResultForFunctionExecutionRequest, FunctionResult) == 0x000018, "Member 'FCloudScriptPostFunctionResultForFunctionExecutionRequest::FunctionResult' has a wrong offset!");

// ScriptStruct PlayFab.AdminGrantItemsToUsersRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminGrantItemsToUsersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             ItemGrants;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminGrantItemsToUsersRequest) == 0x000008, "Wrong alignment on FAdminGrantItemsToUsersRequest");
static_assert(sizeof(FAdminGrantItemsToUsersRequest) == 0x000030, "Wrong size on FAdminGrantItemsToUsersRequest");
static_assert(offsetof(FAdminGrantItemsToUsersRequest, CatalogVersion) == 0x000008, "Member 'FAdminGrantItemsToUsersRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FAdminGrantItemsToUsersRequest, CustomTags) == 0x000018, "Member 'FAdminGrantItemsToUsersRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminGrantItemsToUsersRequest, ItemGrants) == 0x000020, "Member 'FAdminGrantItemsToUsersRequest::ItemGrants' has a wrong offset!");

// ScriptStruct PlayFab.AdminIncrementLimitedEditionItemAvailabilityRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminIncrementLimitedEditionItemAvailabilityRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2128[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CatalogVersion;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminIncrementLimitedEditionItemAvailabilityRequest) == 0x000008, "Wrong alignment on FAdminIncrementLimitedEditionItemAvailabilityRequest");
static_assert(sizeof(FAdminIncrementLimitedEditionItemAvailabilityRequest) == 0x000038, "Wrong size on FAdminIncrementLimitedEditionItemAvailabilityRequest");
static_assert(offsetof(FAdminIncrementLimitedEditionItemAvailabilityRequest, Amount) == 0x000008, "Member 'FAdminIncrementLimitedEditionItemAvailabilityRequest::Amount' has a wrong offset!");
static_assert(offsetof(FAdminIncrementLimitedEditionItemAvailabilityRequest, CatalogVersion) == 0x000010, "Member 'FAdminIncrementLimitedEditionItemAvailabilityRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FAdminIncrementLimitedEditionItemAvailabilityRequest, CustomTags) == 0x000020, "Member 'FAdminIncrementLimitedEditionItemAvailabilityRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminIncrementLimitedEditionItemAvailabilityRequest, ItemId) == 0x000028, "Member 'FAdminIncrementLimitedEditionItemAvailabilityRequest::ItemId' has a wrong offset!");

// ScriptStruct PlayFab.MatchmakerPlayerJoinedRequest
// 0x0028 (0x0030 - 0x0008)
struct FMatchmakerPlayerJoinedRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakerPlayerJoinedRequest) == 0x000008, "Wrong alignment on FMatchmakerPlayerJoinedRequest");
static_assert(sizeof(FMatchmakerPlayerJoinedRequest) == 0x000030, "Wrong size on FMatchmakerPlayerJoinedRequest");
static_assert(offsetof(FMatchmakerPlayerJoinedRequest, CustomTags) == 0x000008, "Member 'FMatchmakerPlayerJoinedRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMatchmakerPlayerJoinedRequest, LobbyId) == 0x000010, "Member 'FMatchmakerPlayerJoinedRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakerPlayerJoinedRequest, PlayFabId) == 0x000020, "Member 'FMatchmakerPlayerJoinedRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientSetPlayerSecretRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientSetPlayerSecretRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 EncryptedRequest;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientSetPlayerSecretRequest) == 0x000008, "Wrong alignment on FClientSetPlayerSecretRequest");
static_assert(sizeof(FClientSetPlayerSecretRequest) == 0x000028, "Wrong size on FClientSetPlayerSecretRequest");
static_assert(offsetof(FClientSetPlayerSecretRequest, EncryptedRequest) == 0x000008, "Member 'FClientSetPlayerSecretRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientSetPlayerSecretRequest, PlayerSecret) == 0x000018, "Member 'FClientSetPlayerSecretRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.AdminIncrementPlayerStatisticVersionRequest
// 0x0018 (0x0020 - 0x0008)
struct FAdminIncrementPlayerStatisticVersionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminIncrementPlayerStatisticVersionRequest) == 0x000008, "Wrong alignment on FAdminIncrementPlayerStatisticVersionRequest");
static_assert(sizeof(FAdminIncrementPlayerStatisticVersionRequest) == 0x000020, "Wrong size on FAdminIncrementPlayerStatisticVersionRequest");
static_assert(offsetof(FAdminIncrementPlayerStatisticVersionRequest, CustomTags) == 0x000008, "Member 'FAdminIncrementPlayerStatisticVersionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminIncrementPlayerStatisticVersionRequest, StatisticName) == 0x000010, "Member 'FAdminIncrementPlayerStatisticVersionRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.AdminListOpenIdConnectionRequest
// 0x0000 (0x0008 - 0x0008)
struct FAdminListOpenIdConnectionRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FAdminListOpenIdConnectionRequest) == 0x000008, "Wrong alignment on FAdminListOpenIdConnectionRequest");
static_assert(sizeof(FAdminListOpenIdConnectionRequest) == 0x000008, "Wrong size on FAdminListOpenIdConnectionRequest");

// ScriptStruct PlayFab.AdminListVirtualCurrencyTypesRequest
// 0x0000 (0x0008 - 0x0008)
struct FAdminListVirtualCurrencyTypesRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FAdminListVirtualCurrencyTypesRequest) == 0x000008, "Wrong alignment on FAdminListVirtualCurrencyTypesRequest");
static_assert(sizeof(FAdminListVirtualCurrencyTypesRequest) == 0x000008, "Wrong size on FAdminListVirtualCurrencyTypesRequest");

// ScriptStruct PlayFab.ClientUnlinkOpenIdConnectRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientUnlinkOpenIdConnectRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ConnectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkOpenIdConnectRequest) == 0x000008, "Wrong alignment on FClientUnlinkOpenIdConnectRequest");
static_assert(sizeof(FClientUnlinkOpenIdConnectRequest) == 0x000020, "Wrong size on FClientUnlinkOpenIdConnectRequest");
static_assert(offsetof(FClientUnlinkOpenIdConnectRequest, ConnectionId) == 0x000008, "Member 'FClientUnlinkOpenIdConnectRequest::ConnectionId' has a wrong offset!");
static_assert(offsetof(FClientUnlinkOpenIdConnectRequest, CustomTags) == 0x000018, "Member 'FClientUnlinkOpenIdConnectRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateServerBackfillTicketResult
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerCreateServerBackfillTicketResult final : public FPlayFabResultCommon
{
public:
	class FString                                 TicketId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateServerBackfillTicketResult) == 0x000008, "Wrong alignment on FMultiplayerCreateServerBackfillTicketResult");
static_assert(sizeof(FMultiplayerCreateServerBackfillTicketResult) == 0x000018, "Wrong size on FMultiplayerCreateServerBackfillTicketResult");
static_assert(offsetof(FMultiplayerCreateServerBackfillTicketResult, TicketId) == 0x000008, "Member 'FMultiplayerCreateServerBackfillTicketResult::TicketId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGrantItemsToCharacterRequest
// 0x0058 (0x0060 - 0x0008)
struct FServerGrantItemsToCharacterRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Annotation;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CatalogVersion;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemIds;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGrantItemsToCharacterRequest) == 0x000008, "Wrong alignment on FServerGrantItemsToCharacterRequest");
static_assert(sizeof(FServerGrantItemsToCharacterRequest) == 0x000060, "Wrong size on FServerGrantItemsToCharacterRequest");
static_assert(offsetof(FServerGrantItemsToCharacterRequest, Annotation) == 0x000008, "Member 'FServerGrantItemsToCharacterRequest::Annotation' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToCharacterRequest, CatalogVersion) == 0x000018, "Member 'FServerGrantItemsToCharacterRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToCharacterRequest, CharacterId) == 0x000028, "Member 'FServerGrantItemsToCharacterRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToCharacterRequest, CustomTags) == 0x000038, "Member 'FServerGrantItemsToCharacterRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToCharacterRequest, ItemIds) == 0x000040, "Member 'FServerGrantItemsToCharacterRequest::ItemIds' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToCharacterRequest, PlayFabId) == 0x000050, "Member 'FServerGrantItemsToCharacterRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminModifyServerBuildRequest
// 0x0070 (0x0078 - 0x0008)
struct FAdminModifyServerBuildRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ActiveRegions;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommandLineTemplate;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExecutablePath;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGamesPerHost;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFreeGameSlots;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminModifyServerBuildRequest) == 0x000008, "Wrong alignment on FAdminModifyServerBuildRequest");
static_assert(sizeof(FAdminModifyServerBuildRequest) == 0x000078, "Wrong size on FAdminModifyServerBuildRequest");
static_assert(offsetof(FAdminModifyServerBuildRequest, ActiveRegions) == 0x000008, "Member 'FAdminModifyServerBuildRequest::ActiveRegions' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildRequest, BuildId) == 0x000018, "Member 'FAdminModifyServerBuildRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildRequest, CommandLineTemplate) == 0x000028, "Member 'FAdminModifyServerBuildRequest::CommandLineTemplate' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildRequest, Comment) == 0x000038, "Member 'FAdminModifyServerBuildRequest::Comment' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildRequest, CustomTags) == 0x000048, "Member 'FAdminModifyServerBuildRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildRequest, ExecutablePath) == 0x000050, "Member 'FAdminModifyServerBuildRequest::ExecutablePath' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildRequest, MaxGamesPerHost) == 0x000060, "Member 'FAdminModifyServerBuildRequest::MaxGamesPerHost' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildRequest, MinFreeGameSlots) == 0x000064, "Member 'FAdminModifyServerBuildRequest::MinFreeGameSlots' has a wrong offset!");
static_assert(offsetof(FAdminModifyServerBuildRequest, Timestamp) == 0x000068, "Member 'FAdminModifyServerBuildRequest::Timestamp' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetLeaderboardAroundUserResult
// 0x0028 (0x0030 - 0x0008)
struct FServerGetLeaderboardAroundUserResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NextReset;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2129[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerGetLeaderboardAroundUserResult) == 0x000008, "Wrong alignment on FServerGetLeaderboardAroundUserResult");
static_assert(sizeof(FServerGetLeaderboardAroundUserResult) == 0x000030, "Wrong size on FServerGetLeaderboardAroundUserResult");
static_assert(offsetof(FServerGetLeaderboardAroundUserResult, Leaderboard) == 0x000008, "Member 'FServerGetLeaderboardAroundUserResult::Leaderboard' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundUserResult, NextReset) == 0x000018, "Member 'FServerGetLeaderboardAroundUserResult::NextReset' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundUserResult, Version) == 0x000028, "Member 'FServerGetLeaderboardAroundUserResult::Version' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkNintendoSwitchDeviceIdResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkNintendoSwitchDeviceIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkNintendoSwitchDeviceIdResult) == 0x000008, "Wrong alignment on FClientLinkNintendoSwitchDeviceIdResult");
static_assert(sizeof(FClientLinkNintendoSwitchDeviceIdResult) == 0x000008, "Wrong size on FClientLinkNintendoSwitchDeviceIdResult");

// ScriptStruct PlayFab.AdminRefundPurchaseRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminRefundPurchaseRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 OrderID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRefundPurchaseRequest) == 0x000008, "Wrong alignment on FAdminRefundPurchaseRequest");
static_assert(sizeof(FAdminRefundPurchaseRequest) == 0x000038, "Wrong size on FAdminRefundPurchaseRequest");
static_assert(offsetof(FAdminRefundPurchaseRequest, OrderID) == 0x000008, "Member 'FAdminRefundPurchaseRequest::OrderID' has a wrong offset!");
static_assert(offsetof(FAdminRefundPurchaseRequest, PlayFabId) == 0x000018, "Member 'FAdminRefundPurchaseRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminRefundPurchaseRequest, Reason) == 0x000028, "Member 'FAdminRefundPurchaseRequest::Reason' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlockContainerItemRequest
// 0x0038 (0x0040 - 0x0008)
struct FClientUnlockContainerItemRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainerItemId;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlockContainerItemRequest) == 0x000008, "Wrong alignment on FClientUnlockContainerItemRequest");
static_assert(sizeof(FClientUnlockContainerItemRequest) == 0x000040, "Wrong size on FClientUnlockContainerItemRequest");
static_assert(offsetof(FClientUnlockContainerItemRequest, CatalogVersion) == 0x000008, "Member 'FClientUnlockContainerItemRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerItemRequest, CharacterId) == 0x000018, "Member 'FClientUnlockContainerItemRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerItemRequest, ContainerItemId) == 0x000028, "Member 'FClientUnlockContainerItemRequest::ContainerItemId' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerItemRequest, CustomTags) == 0x000038, "Member 'FClientUnlockContainerItemRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListContainerImagesResponse
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerListContainerImagesResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 Images;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListContainerImagesResponse) == 0x000008, "Wrong alignment on FMultiplayerListContainerImagesResponse");
static_assert(sizeof(FMultiplayerListContainerImagesResponse) == 0x000030, "Wrong size on FMultiplayerListContainerImagesResponse");
static_assert(offsetof(FMultiplayerListContainerImagesResponse, Images) == 0x000008, "Member 'FMultiplayerListContainerImagesResponse::Images' has a wrong offset!");
static_assert(offsetof(FMultiplayerListContainerImagesResponse, PageSize) == 0x000018, "Member 'FMultiplayerListContainerImagesResponse::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListContainerImagesResponse, SkipToken) == 0x000020, "Member 'FMultiplayerListContainerImagesResponse::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.AdminRemovePlayerTagRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminRemovePlayerTagRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRemovePlayerTagRequest) == 0x000008, "Wrong alignment on FAdminRemovePlayerTagRequest");
static_assert(sizeof(FAdminRemovePlayerTagRequest) == 0x000030, "Wrong size on FAdminRemovePlayerTagRequest");
static_assert(offsetof(FAdminRemovePlayerTagRequest, CustomTags) == 0x000008, "Member 'FAdminRemovePlayerTagRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminRemovePlayerTagRequest, PlayFabId) == 0x000010, "Member 'FAdminRemovePlayerTagRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminRemovePlayerTagRequest, TagName) == 0x000020, "Member 'FAdminRemovePlayerTagRequest::TagName' has a wrong offset!");

// ScriptStruct PlayFab.AdminRemoveVirtualCurrencyTypesRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminRemoveVirtualCurrencyTypesRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             VirtualCurrencies;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRemoveVirtualCurrencyTypesRequest) == 0x000008, "Wrong alignment on FAdminRemoveVirtualCurrencyTypesRequest");
static_assert(sizeof(FAdminRemoveVirtualCurrencyTypesRequest) == 0x000018, "Wrong size on FAdminRemoveVirtualCurrencyTypesRequest");
static_assert(offsetof(FAdminRemoveVirtualCurrencyTypesRequest, VirtualCurrencies) == 0x000008, "Member 'FAdminRemoveVirtualCurrencyTypesRequest::VirtualCurrencies' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdateSharedGroupDataRequest
// 0x0038 (0x0040 - 0x0008)
struct FClientUpdateSharedGroupDataRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserDataPermission                           Permission;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SharedGroupId;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUpdateSharedGroupDataRequest) == 0x000008, "Wrong alignment on FClientUpdateSharedGroupDataRequest");
static_assert(sizeof(FClientUpdateSharedGroupDataRequest) == 0x000040, "Wrong size on FClientUpdateSharedGroupDataRequest");
static_assert(offsetof(FClientUpdateSharedGroupDataRequest, CustomTags) == 0x000008, "Member 'FClientUpdateSharedGroupDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientUpdateSharedGroupDataRequest, Data) == 0x000010, "Member 'FClientUpdateSharedGroupDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FClientUpdateSharedGroupDataRequest, KeysToRemove) == 0x000018, "Member 'FClientUpdateSharedGroupDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FClientUpdateSharedGroupDataRequest, Permission) == 0x000028, "Member 'FClientUpdateSharedGroupDataRequest::Permission' has a wrong offset!");
static_assert(offsetof(FClientUpdateSharedGroupDataRequest, SharedGroupId) == 0x000030, "Member 'FClientUpdateSharedGroupDataRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.AdminResetCharacterStatisticsRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminResetCharacterStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminResetCharacterStatisticsRequest) == 0x000008, "Wrong alignment on FAdminResetCharacterStatisticsRequest");
static_assert(sizeof(FAdminResetCharacterStatisticsRequest) == 0x000030, "Wrong size on FAdminResetCharacterStatisticsRequest");
static_assert(offsetof(FAdminResetCharacterStatisticsRequest, CharacterId) == 0x000008, "Member 'FAdminResetCharacterStatisticsRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FAdminResetCharacterStatisticsRequest, CustomTags) == 0x000018, "Member 'FAdminResetCharacterStatisticsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminResetCharacterStatisticsRequest, PlayFabId) == 0x000020, "Member 'FAdminResetCharacterStatisticsRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateCharacterDataRequest
// 0x0048 (0x0050 - 0x0008)
struct FServerUpdateCharacterDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserDataPermission                           Permission;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212C[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdateCharacterDataRequest) == 0x000008, "Wrong alignment on FServerUpdateCharacterDataRequest");
static_assert(sizeof(FServerUpdateCharacterDataRequest) == 0x000050, "Wrong size on FServerUpdateCharacterDataRequest");
static_assert(offsetof(FServerUpdateCharacterDataRequest, CharacterId) == 0x000008, "Member 'FServerUpdateCharacterDataRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerUpdateCharacterDataRequest, CustomTags) == 0x000018, "Member 'FServerUpdateCharacterDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUpdateCharacterDataRequest, Data) == 0x000020, "Member 'FServerUpdateCharacterDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FServerUpdateCharacterDataRequest, KeysToRemove) == 0x000028, "Member 'FServerUpdateCharacterDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FServerUpdateCharacterDataRequest, Permission) == 0x000038, "Member 'FServerUpdateCharacterDataRequest::Permission' has a wrong offset!");
static_assert(offsetof(FServerUpdateCharacterDataRequest, PlayFabId) == 0x000040, "Member 'FServerUpdateCharacterDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminResetPasswordRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminResetPasswordRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminResetPasswordRequest) == 0x000008, "Wrong alignment on FAdminResetPasswordRequest");
static_assert(sizeof(FAdminResetPasswordRequest) == 0x000030, "Wrong size on FAdminResetPasswordRequest");
static_assert(offsetof(FAdminResetPasswordRequest, CustomTags) == 0x000008, "Member 'FAdminResetPasswordRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminResetPasswordRequest, Password) == 0x000010, "Member 'FAdminResetPasswordRequest::Password' has a wrong offset!");
static_assert(offsetof(FAdminResetPasswordRequest, Token) == 0x000020, "Member 'FAdminResetPasswordRequest::Token' has a wrong offset!");

// ScriptStruct PlayFab.AdminResetUserStatisticsRequest
// 0x0018 (0x0020 - 0x0008)
struct FAdminResetUserStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminResetUserStatisticsRequest) == 0x000008, "Wrong alignment on FAdminResetUserStatisticsRequest");
static_assert(sizeof(FAdminResetUserStatisticsRequest) == 0x000020, "Wrong size on FAdminResetUserStatisticsRequest");
static_assert(offsetof(FAdminResetUserStatisticsRequest, CustomTags) == 0x000008, "Member 'FAdminResetUserStatisticsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminResetUserStatisticsRequest, PlayFabId) == 0x000010, "Member 'FAdminResetUserStatisticsRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkAndroidDeviceIDResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkAndroidDeviceIDResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkAndroidDeviceIDResult) == 0x000008, "Wrong alignment on FClientUnlinkAndroidDeviceIDResult");
static_assert(sizeof(FClientUnlinkAndroidDeviceIDResult) == 0x000008, "Wrong size on FClientUnlinkAndroidDeviceIDResult");

// ScriptStruct PlayFab.AdminResolvePurchaseDisputeRequest
// 0x0038 (0x0040 - 0x0008)
struct FAdminResolvePurchaseDisputeRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 OrderID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResolutionOutcome                            Outcome;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212D[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminResolvePurchaseDisputeRequest) == 0x000008, "Wrong alignment on FAdminResolvePurchaseDisputeRequest");
static_assert(sizeof(FAdminResolvePurchaseDisputeRequest) == 0x000040, "Wrong size on FAdminResolvePurchaseDisputeRequest");
static_assert(offsetof(FAdminResolvePurchaseDisputeRequest, OrderID) == 0x000008, "Member 'FAdminResolvePurchaseDisputeRequest::OrderID' has a wrong offset!");
static_assert(offsetof(FAdminResolvePurchaseDisputeRequest, Outcome) == 0x000018, "Member 'FAdminResolvePurchaseDisputeRequest::Outcome' has a wrong offset!");
static_assert(offsetof(FAdminResolvePurchaseDisputeRequest, PlayFabId) == 0x000020, "Member 'FAdminResolvePurchaseDisputeRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminResolvePurchaseDisputeRequest, Reason) == 0x000030, "Member 'FAdminResolvePurchaseDisputeRequest::Reason' has a wrong offset!");

// ScriptStruct PlayFab.AdminRevokeAllBansForUserRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminRevokeAllBansForUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRevokeAllBansForUserRequest) == 0x000008, "Wrong alignment on FAdminRevokeAllBansForUserRequest");
static_assert(sizeof(FAdminRevokeAllBansForUserRequest) == 0x000018, "Wrong size on FAdminRevokeAllBansForUserRequest");
static_assert(offsetof(FAdminRevokeAllBansForUserRequest, PlayFabId) == 0x000008, "Member 'FAdminRevokeAllBansForUserRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkXboxAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FServerLinkXboxAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerLinkXboxAccountResult) == 0x000008, "Wrong alignment on FServerLinkXboxAccountResult");
static_assert(sizeof(FServerLinkXboxAccountResult) == 0x000008, "Wrong size on FServerLinkXboxAccountResult");

// ScriptStruct PlayFab.AdminRevokeInventoryItemRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminRevokeInventoryItemRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemInstanceId;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRevokeInventoryItemRequest) == 0x000008, "Wrong alignment on FAdminRevokeInventoryItemRequest");
static_assert(sizeof(FAdminRevokeInventoryItemRequest) == 0x000038, "Wrong size on FAdminRevokeInventoryItemRequest");
static_assert(offsetof(FAdminRevokeInventoryItemRequest, CharacterId) == 0x000008, "Member 'FAdminRevokeInventoryItemRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FAdminRevokeInventoryItemRequest, ItemInstanceId) == 0x000018, "Member 'FAdminRevokeInventoryItemRequest::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FAdminRevokeInventoryItemRequest, PlayFabId) == 0x000028, "Member 'FAdminRevokeInventoryItemRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumeMicrosoftStoreEntitlementsResponse
// 0x0010 (0x0018 - 0x0008)
struct FClientConsumeMicrosoftStoreEntitlementsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConsumeMicrosoftStoreEntitlementsResponse) == 0x000008, "Wrong alignment on FClientConsumeMicrosoftStoreEntitlementsResponse");
static_assert(sizeof(FClientConsumeMicrosoftStoreEntitlementsResponse) == 0x000018, "Wrong size on FClientConsumeMicrosoftStoreEntitlementsResponse");
static_assert(offsetof(FClientConsumeMicrosoftStoreEntitlementsResponse, Items) == 0x000008, "Member 'FClientConsumeMicrosoftStoreEntitlementsResponse::Items' has a wrong offset!");

// ScriptStruct PlayFab.AdminRevokeInventoryItemsRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminRevokeInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRevokeInventoryItemsRequest) == 0x000008, "Wrong alignment on FAdminRevokeInventoryItemsRequest");
static_assert(sizeof(FAdminRevokeInventoryItemsRequest) == 0x000018, "Wrong size on FAdminRevokeInventoryItemsRequest");
static_assert(offsetof(FAdminRevokeInventoryItemsRequest, Items) == 0x000008, "Member 'FAdminRevokeInventoryItemsRequest::Items' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerSubscribeToLobbyResourceResult
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerSubscribeToLobbyResourceResult final : public FPlayFabResultCommon
{
public:
	class FString                                 Topic;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerSubscribeToLobbyResourceResult) == 0x000008, "Wrong alignment on FMultiplayerSubscribeToLobbyResourceResult");
static_assert(sizeof(FMultiplayerSubscribeToLobbyResourceResult) == 0x000018, "Wrong size on FMultiplayerSubscribeToLobbyResourceResult");
static_assert(offsetof(FMultiplayerSubscribeToLobbyResourceResult, Topic) == 0x000008, "Member 'FMultiplayerSubscribeToLobbyResourceResult::Topic' has a wrong offset!");

// ScriptStruct PlayFab.AdminRunTaskRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminRunTaskRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Identifier;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminRunTaskRequest) == 0x000008, "Wrong alignment on FAdminRunTaskRequest");
static_assert(sizeof(FAdminRunTaskRequest) == 0x000018, "Wrong size on FAdminRunTaskRequest");
static_assert(offsetof(FAdminRunTaskRequest, CustomTags) == 0x000008, "Member 'FAdminRunTaskRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminRunTaskRequest, Identifier) == 0x000010, "Member 'FAdminRunTaskRequest::Identifier' has a wrong offset!");

// ScriptStruct PlayFab.AdminSendAccountRecoveryEmailRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminSendAccountRecoveryEmailRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailTemplateId;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminSendAccountRecoveryEmailRequest) == 0x000008, "Wrong alignment on FAdminSendAccountRecoveryEmailRequest");
static_assert(sizeof(FAdminSendAccountRecoveryEmailRequest) == 0x000030, "Wrong size on FAdminSendAccountRecoveryEmailRequest");
static_assert(offsetof(FAdminSendAccountRecoveryEmailRequest, CustomTags) == 0x000008, "Member 'FAdminSendAccountRecoveryEmailRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminSendAccountRecoveryEmailRequest, Email) == 0x000010, "Member 'FAdminSendAccountRecoveryEmailRequest::Email' has a wrong offset!");
static_assert(offsetof(FAdminSendAccountRecoveryEmailRequest, EmailTemplateId) == 0x000020, "Member 'FAdminSendAccountRecoveryEmailRequest::EmailTemplateId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListQosServersForTitleRequest
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerListQosServersForTitleRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeAllRegions;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerListQosServersForTitleRequest) == 0x000008, "Wrong alignment on FMultiplayerListQosServersForTitleRequest");
static_assert(sizeof(FMultiplayerListQosServersForTitleRequest) == 0x000018, "Wrong size on FMultiplayerListQosServersForTitleRequest");
static_assert(offsetof(FMultiplayerListQosServersForTitleRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListQosServersForTitleRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListQosServersForTitleRequest, IncludeAllRegions) == 0x000010, "Member 'FMultiplayerListQosServersForTitleRequest::IncludeAllRegions' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateCatalogItemsRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminUpdateCatalogItemsRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Catalog;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CatalogVersion;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetAsDefaultCatalog;                               // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212F[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminUpdateCatalogItemsRequest) == 0x000008, "Wrong alignment on FAdminUpdateCatalogItemsRequest");
static_assert(sizeof(FAdminUpdateCatalogItemsRequest) == 0x000038, "Wrong size on FAdminUpdateCatalogItemsRequest");
static_assert(offsetof(FAdminUpdateCatalogItemsRequest, Catalog) == 0x000008, "Member 'FAdminUpdateCatalogItemsRequest::Catalog' has a wrong offset!");
static_assert(offsetof(FAdminUpdateCatalogItemsRequest, CatalogVersion) == 0x000018, "Member 'FAdminUpdateCatalogItemsRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FAdminUpdateCatalogItemsRequest, CustomTags) == 0x000028, "Member 'FAdminUpdateCatalogItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminUpdateCatalogItemsRequest, SetAsDefaultCatalog) == 0x000030, "Member 'FAdminUpdateCatalogItemsRequest::SetAsDefaultCatalog' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumePSNEntitlementsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientConsumePSNEntitlementsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             ItemsGranted;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConsumePSNEntitlementsResult) == 0x000008, "Wrong alignment on FClientConsumePSNEntitlementsResult");
static_assert(sizeof(FClientConsumePSNEntitlementsResult) == 0x000018, "Wrong size on FClientConsumePSNEntitlementsResult");
static_assert(offsetof(FClientConsumePSNEntitlementsResult, ItemsGranted) == 0x000008, "Member 'FClientConsumePSNEntitlementsResult::ItemsGranted' has a wrong offset!");

// ScriptStruct PlayFab.EventsWriteEventsResponse
// 0x0010 (0x0018 - 0x0008)
struct FEventsWriteEventsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 AssignedEventIds;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventsWriteEventsResponse) == 0x000008, "Wrong alignment on FEventsWriteEventsResponse");
static_assert(sizeof(FEventsWriteEventsResponse) == 0x000018, "Wrong size on FEventsWriteEventsResponse");
static_assert(offsetof(FEventsWriteEventsResponse, AssignedEventIds) == 0x000008, "Member 'FEventsWriteEventsResponse::AssignedEventIds' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlinkSteamIdResult
// 0x0000 (0x0008 - 0x0008)
struct FServerUnlinkSteamIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerUnlinkSteamIdResult) == 0x000008, "Wrong alignment on FServerUnlinkSteamIdResult");
static_assert(sizeof(FServerUnlinkSteamIdResult) == 0x000008, "Wrong size on FServerUnlinkSteamIdResult");

// ScriptStruct PlayFab.AdminSetMembershipOverrideRequest
// 0x0038 (0x0040 - 0x0008)
struct FAdminSetMembershipOverrideRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpirationTime;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MembershipId;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminSetMembershipOverrideRequest) == 0x000008, "Wrong alignment on FAdminSetMembershipOverrideRequest");
static_assert(sizeof(FAdminSetMembershipOverrideRequest) == 0x000040, "Wrong size on FAdminSetMembershipOverrideRequest");
static_assert(offsetof(FAdminSetMembershipOverrideRequest, CustomTags) == 0x000008, "Member 'FAdminSetMembershipOverrideRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminSetMembershipOverrideRequest, ExpirationTime) == 0x000010, "Member 'FAdminSetMembershipOverrideRequest::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FAdminSetMembershipOverrideRequest, MembershipId) == 0x000020, "Member 'FAdminSetMembershipOverrideRequest::MembershipId' has a wrong offset!");
static_assert(offsetof(FAdminSetMembershipOverrideRequest, PlayFabId) == 0x000030, "Member 'FAdminSetMembershipOverrideRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetPlayerSecretRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminSetPlayerSecretRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayerSecret;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminSetPlayerSecretRequest) == 0x000008, "Wrong alignment on FAdminSetPlayerSecretRequest");
static_assert(sizeof(FAdminSetPlayerSecretRequest) == 0x000028, "Wrong size on FAdminSetPlayerSecretRequest");
static_assert(offsetof(FAdminSetPlayerSecretRequest, PlayerSecret) == 0x000008, "Member 'FAdminSetPlayerSecretRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FAdminSetPlayerSecretRequest, PlayFabId) == 0x000018, "Member 'FAdminSetPlayerSecretRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCancelMatchmakingTicketRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerCancelMatchmakingTicketRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCancelMatchmakingTicketRequest) == 0x000008, "Wrong alignment on FMultiplayerCancelMatchmakingTicketRequest");
static_assert(sizeof(FMultiplayerCancelMatchmakingTicketRequest) == 0x000030, "Wrong size on FMultiplayerCancelMatchmakingTicketRequest");
static_assert(offsetof(FMultiplayerCancelMatchmakingTicketRequest, CustomTags) == 0x000008, "Member 'FMultiplayerCancelMatchmakingTicketRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCancelMatchmakingTicketRequest, QueueName) == 0x000010, "Member 'FMultiplayerCancelMatchmakingTicketRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCancelMatchmakingTicketRequest, TicketId) == 0x000020, "Member 'FMultiplayerCancelMatchmakingTicketRequest::TicketId' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetPublishedRevisionRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminSetPublishedRevisionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revision;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminSetPublishedRevisionRequest) == 0x000008, "Wrong alignment on FAdminSetPublishedRevisionRequest");
static_assert(sizeof(FAdminSetPublishedRevisionRequest) == 0x000018, "Wrong size on FAdminSetPublishedRevisionRequest");
static_assert(offsetof(FAdminSetPublishedRevisionRequest, CustomTags) == 0x000008, "Member 'FAdminSetPublishedRevisionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminSetPublishedRevisionRequest, Revision) == 0x000010, "Member 'FAdminSetPublishedRevisionRequest::Revision' has a wrong offset!");
static_assert(offsetof(FAdminSetPublishedRevisionRequest, Version) == 0x000014, "Member 'FAdminSetPublishedRevisionRequest::Version' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithXboxRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientLoginWithXboxRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2130[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithXboxRequest) == 0x000008, "Wrong alignment on FClientLoginWithXboxRequest");
static_assert(sizeof(FClientLoginWithXboxRequest) == 0x000050, "Wrong size on FClientLoginWithXboxRequest");
static_assert(offsetof(FClientLoginWithXboxRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithXboxRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithXboxRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithXboxRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithXboxRequest, EncryptedRequest) == 0x000018, "Member 'FClientLoginWithXboxRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithXboxRequest, InfoRequestParameters) == 0x000028, "Member 'FClientLoginWithXboxRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithXboxRequest, PlayerSecret) == 0x000030, "Member 'FClientLoginWithXboxRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FClientLoginWithXboxRequest, XboxToken) == 0x000040, "Member 'FClientLoginWithXboxRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.DataInitiateFileUploadsResponse
// 0x0020 (0x0028 - 0x0008)
struct FDataInitiateFileUploadsResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Entity;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2131[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             UploadDetails;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataInitiateFileUploadsResponse) == 0x000008, "Wrong alignment on FDataInitiateFileUploadsResponse");
static_assert(sizeof(FDataInitiateFileUploadsResponse) == 0x000028, "Wrong size on FDataInitiateFileUploadsResponse");
static_assert(offsetof(FDataInitiateFileUploadsResponse, Entity) == 0x000008, "Member 'FDataInitiateFileUploadsResponse::Entity' has a wrong offset!");
static_assert(offsetof(FDataInitiateFileUploadsResponse, ProfileVersion) == 0x000010, "Member 'FDataInitiateFileUploadsResponse::ProfileVersion' has a wrong offset!");
static_assert(offsetof(FDataInitiateFileUploadsResponse, UploadDetails) == 0x000018, "Member 'FDataInitiateFileUploadsResponse::UploadDetails' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumeItemResult
// 0x0018 (0x0020 - 0x0008)
struct FClientConsumeItemResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ItemInstanceId;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingUses;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2132[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientConsumeItemResult) == 0x000008, "Wrong alignment on FClientConsumeItemResult");
static_assert(sizeof(FClientConsumeItemResult) == 0x000020, "Wrong size on FClientConsumeItemResult");
static_assert(offsetof(FClientConsumeItemResult, ItemInstanceId) == 0x000008, "Member 'FClientConsumeItemResult::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FClientConsumeItemResult, RemainingUses) == 0x000018, "Member 'FClientConsumeItemResult::RemainingUses' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetPublisherDataRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminSetPublisherDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Key;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminSetPublisherDataRequest) == 0x000008, "Wrong alignment on FAdminSetPublisherDataRequest");
static_assert(sizeof(FAdminSetPublisherDataRequest) == 0x000028, "Wrong size on FAdminSetPublisherDataRequest");
static_assert(offsetof(FAdminSetPublisherDataRequest, Key) == 0x000008, "Member 'FAdminSetPublisherDataRequest::Key' has a wrong offset!");
static_assert(offsetof(FAdminSetPublisherDataRequest, Value) == 0x000018, "Member 'FAdminSetPublisherDataRequest::Value' has a wrong offset!");

// ScriptStruct PlayFab.ServerRedeemCouponRequest
// 0x0048 (0x0050 - 0x0008)
struct FServerRedeemCouponRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CouponCode;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRedeemCouponRequest) == 0x000008, "Wrong alignment on FServerRedeemCouponRequest");
static_assert(sizeof(FServerRedeemCouponRequest) == 0x000050, "Wrong size on FServerRedeemCouponRequest");
static_assert(offsetof(FServerRedeemCouponRequest, CatalogVersion) == 0x000008, "Member 'FServerRedeemCouponRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerRedeemCouponRequest, CharacterId) == 0x000018, "Member 'FServerRedeemCouponRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerRedeemCouponRequest, CouponCode) == 0x000028, "Member 'FServerRedeemCouponRequest::CouponCode' has a wrong offset!");
static_assert(offsetof(FServerRedeemCouponRequest, CustomTags) == 0x000038, "Member 'FServerRedeemCouponRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerRedeemCouponRequest, PlayFabId) == 0x000040, "Member 'FServerRedeemCouponRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkAppleRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkAppleRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2133[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IdentityToken;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkAppleRequest) == 0x000008, "Wrong alignment on FClientLinkAppleRequest");
static_assert(sizeof(FClientLinkAppleRequest) == 0x000028, "Wrong size on FClientLinkAppleRequest");
static_assert(offsetof(FClientLinkAppleRequest, CustomTags) == 0x000008, "Member 'FClientLinkAppleRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkAppleRequest, ForceLink) == 0x000010, "Member 'FClientLinkAppleRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkAppleRequest, IdentityToken) == 0x000018, "Member 'FClientLinkAppleRequest::IdentityToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListPartyQosServersResponse
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerListPartyQosServersResponse final : public FPlayFabResultCommon
{
public:
	int32                                         PageSize;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2134[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             QosServers;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SkipToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListPartyQosServersResponse) == 0x000008, "Wrong alignment on FMultiplayerListPartyQosServersResponse");
static_assert(sizeof(FMultiplayerListPartyQosServersResponse) == 0x000030, "Wrong size on FMultiplayerListPartyQosServersResponse");
static_assert(offsetof(FMultiplayerListPartyQosServersResponse, PageSize) == 0x000008, "Member 'FMultiplayerListPartyQosServersResponse::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListPartyQosServersResponse, QosServers) == 0x000010, "Member 'FMultiplayerListPartyQosServersResponse::QosServers' has a wrong offset!");
static_assert(offsetof(FMultiplayerListPartyQosServersResponse, SkipToken) == 0x000020, "Member 'FMultiplayerListPartyQosServersResponse::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.ClientCreateSharedGroupResult
// 0x0010 (0x0018 - 0x0008)
struct FClientCreateSharedGroupResult final : public FPlayFabResultCommon
{
public:
	class FString                                 SharedGroupId;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientCreateSharedGroupResult) == 0x000008, "Wrong alignment on FClientCreateSharedGroupResult");
static_assert(sizeof(FClientCreateSharedGroupResult) == 0x000018, "Wrong size on FClientCreateSharedGroupResult");
static_assert(offsetof(FClientCreateSharedGroupResult, SharedGroupId) == 0x000008, "Member 'FClientCreateSharedGroupResult::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateStoreItemsRequest
// 0x0040 (0x0048 - 0x0008)
struct FAdminUpdateStoreItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MarketingData;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Store;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateStoreItemsRequest) == 0x000008, "Wrong alignment on FAdminUpdateStoreItemsRequest");
static_assert(sizeof(FAdminUpdateStoreItemsRequest) == 0x000048, "Wrong size on FAdminUpdateStoreItemsRequest");
static_assert(offsetof(FAdminUpdateStoreItemsRequest, CatalogVersion) == 0x000008, "Member 'FAdminUpdateStoreItemsRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FAdminUpdateStoreItemsRequest, CustomTags) == 0x000018, "Member 'FAdminUpdateStoreItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminUpdateStoreItemsRequest, MarketingData) == 0x000020, "Member 'FAdminUpdateStoreItemsRequest::MarketingData' has a wrong offset!");
static_assert(offsetof(FAdminUpdateStoreItemsRequest, Store) == 0x000028, "Member 'FAdminUpdateStoreItemsRequest::Store' has a wrong offset!");
static_assert(offsetof(FAdminUpdateStoreItemsRequest, StoreId) == 0x000038, "Member 'FAdminUpdateStoreItemsRequest::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetTitleDataRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminSetTitleDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Key;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminSetTitleDataRequest) == 0x000008, "Wrong alignment on FAdminSetTitleDataRequest");
static_assert(sizeof(FAdminSetTitleDataRequest) == 0x000028, "Wrong size on FAdminSetTitleDataRequest");
static_assert(offsetof(FAdminSetTitleDataRequest, Key) == 0x000008, "Member 'FAdminSetTitleDataRequest::Key' has a wrong offset!");
static_assert(offsetof(FAdminSetTitleDataRequest, Value) == 0x000018, "Member 'FAdminSetTitleDataRequest::Value' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumePS5EntitlementsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientConsumePS5EntitlementsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConsumePS5EntitlementsResult) == 0x000008, "Wrong alignment on FClientConsumePS5EntitlementsResult");
static_assert(sizeof(FClientConsumePS5EntitlementsResult) == 0x000018, "Wrong size on FClientConsumePS5EntitlementsResult");
static_assert(offsetof(FClientConsumePS5EntitlementsResult, Items) == 0x000008, "Member 'FClientConsumePS5EntitlementsResult::Items' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetTitleDataAndOverridesRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminSetTitleDataAndOverridesRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             KeyValues;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OverrideLabel;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminSetTitleDataAndOverridesRequest) == 0x000008, "Wrong alignment on FAdminSetTitleDataAndOverridesRequest");
static_assert(sizeof(FAdminSetTitleDataAndOverridesRequest) == 0x000028, "Wrong size on FAdminSetTitleDataAndOverridesRequest");
static_assert(offsetof(FAdminSetTitleDataAndOverridesRequest, KeyValues) == 0x000008, "Member 'FAdminSetTitleDataAndOverridesRequest::KeyValues' has a wrong offset!");
static_assert(offsetof(FAdminSetTitleDataAndOverridesRequest, OverrideLabel) == 0x000018, "Member 'FAdminSetTitleDataAndOverridesRequest::OverrideLabel' has a wrong offset!");

// ScriptStruct PlayFab.AdminSetupPushNotificationRequest
// 0x0038 (0x0040 - 0x0008)
struct FAdminSetupPushNotificationRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Credential;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverwriteOldARN;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPushSetupPlatform                            Platform;                                          // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2135[0x6];                                     // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminSetupPushNotificationRequest) == 0x000008, "Wrong alignment on FAdminSetupPushNotificationRequest");
static_assert(sizeof(FAdminSetupPushNotificationRequest) == 0x000040, "Wrong size on FAdminSetupPushNotificationRequest");
static_assert(offsetof(FAdminSetupPushNotificationRequest, Credential) == 0x000008, "Member 'FAdminSetupPushNotificationRequest::Credential' has a wrong offset!");
static_assert(offsetof(FAdminSetupPushNotificationRequest, Key) == 0x000018, "Member 'FAdminSetupPushNotificationRequest::Key' has a wrong offset!");
static_assert(offsetof(FAdminSetupPushNotificationRequest, Name) == 0x000028, "Member 'FAdminSetupPushNotificationRequest::Name' has a wrong offset!");
static_assert(offsetof(FAdminSetupPushNotificationRequest, OverwriteOldARN) == 0x000038, "Member 'FAdminSetupPushNotificationRequest::OverwriteOldARN' has a wrong offset!");
static_assert(offsetof(FAdminSetupPushNotificationRequest, Platform) == 0x000039, "Member 'FAdminSetupPushNotificationRequest::Platform' has a wrong offset!");

// ScriptStruct PlayFab.EconomyUpdateCatalogConfigRequest
// 0x0010 (0x0018 - 0x0008)
struct FEconomyUpdateCatalogConfigRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Config;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyUpdateCatalogConfigRequest) == 0x000008, "Wrong alignment on FEconomyUpdateCatalogConfigRequest");
static_assert(sizeof(FEconomyUpdateCatalogConfigRequest) == 0x000018, "Wrong size on FEconomyUpdateCatalogConfigRequest");
static_assert(offsetof(FEconomyUpdateCatalogConfigRequest, Config) == 0x000008, "Member 'FEconomyUpdateCatalogConfigRequest::Config' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateCatalogConfigRequest, CustomTags) == 0x000010, "Member 'FEconomyUpdateCatalogConfigRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateSharedGroupDataResult
// 0x0000 (0x0008 - 0x0008)
struct FServerUpdateSharedGroupDataResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerUpdateSharedGroupDataResult) == 0x000008, "Wrong alignment on FServerUpdateSharedGroupDataResult");
static_assert(sizeof(FServerUpdateSharedGroupDataResult) == 0x000008, "Wrong size on FServerUpdateSharedGroupDataResult");

// ScriptStruct PlayFab.AdminSubtractUserVirtualCurrencyRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminSubtractUserVirtualCurrencyRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2136[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminSubtractUserVirtualCurrencyRequest) == 0x000008, "Wrong alignment on FAdminSubtractUserVirtualCurrencyRequest");
static_assert(sizeof(FAdminSubtractUserVirtualCurrencyRequest) == 0x000038, "Wrong size on FAdminSubtractUserVirtualCurrencyRequest");
static_assert(offsetof(FAdminSubtractUserVirtualCurrencyRequest, Amount) == 0x000008, "Member 'FAdminSubtractUserVirtualCurrencyRequest::Amount' has a wrong offset!");
static_assert(offsetof(FAdminSubtractUserVirtualCurrencyRequest, CustomTags) == 0x000010, "Member 'FAdminSubtractUserVirtualCurrencyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminSubtractUserVirtualCurrencyRequest, PlayFabId) == 0x000018, "Member 'FAdminSubtractUserVirtualCurrencyRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminSubtractUserVirtualCurrencyRequest, VirtualCurrency) == 0x000028, "Member 'FAdminSubtractUserVirtualCurrencyRequest::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumeXboxEntitlementsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientConsumeXboxEntitlementsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConsumeXboxEntitlementsResult) == 0x000008, "Wrong alignment on FClientConsumeXboxEntitlementsResult");
static_assert(sizeof(FClientConsumeXboxEntitlementsResult) == 0x000018, "Wrong size on FClientConsumeXboxEntitlementsResult");
static_assert(offsetof(FClientConsumeXboxEntitlementsResult, Items) == 0x000008, "Member 'FClientConsumeXboxEntitlementsResult::Items' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateBansRequest
// 0x0010 (0x0018 - 0x0008)
struct FAdminUpdateBansRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Bans;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateBansRequest) == 0x000008, "Wrong alignment on FAdminUpdateBansRequest");
static_assert(sizeof(FAdminUpdateBansRequest) == 0x000018, "Wrong size on FAdminUpdateBansRequest");
static_assert(offsetof(FAdminUpdateBansRequest, Bans) == 0x000008, "Member 'FAdminUpdateBansRequest::Bans' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromSteamIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromSteamIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SteamStringIDs;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromSteamIDsRequest) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromSteamIDsRequest");
static_assert(sizeof(FServerGetPlayFabIDsFromSteamIDsRequest) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromSteamIDsRequest");
static_assert(offsetof(FServerGetPlayFabIDsFromSteamIDsRequest, SteamStringIDs) == 0x000008, "Member 'FServerGetPlayFabIDsFromSteamIDsRequest::SteamStringIDs' has a wrong offset!");

// ScriptStruct PlayFab.ClientRemoveFriendResult
// 0x0000 (0x0008 - 0x0008)
struct FClientRemoveFriendResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientRemoveFriendResult) == 0x000008, "Wrong alignment on FClientRemoveFriendResult");
static_assert(sizeof(FClientRemoveFriendResult) == 0x000008, "Wrong size on FClientRemoveFriendResult");

// ScriptStruct PlayFab.AdminUpdateCloudScriptRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminUpdateCloudScriptRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeveloperPlayFabId;                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Files;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Publish;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2137[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminUpdateCloudScriptRequest) == 0x000008, "Wrong alignment on FAdminUpdateCloudScriptRequest");
static_assert(sizeof(FAdminUpdateCloudScriptRequest) == 0x000038, "Wrong size on FAdminUpdateCloudScriptRequest");
static_assert(offsetof(FAdminUpdateCloudScriptRequest, CustomTags) == 0x000008, "Member 'FAdminUpdateCloudScriptRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminUpdateCloudScriptRequest, DeveloperPlayFabId) == 0x000010, "Member 'FAdminUpdateCloudScriptRequest::DeveloperPlayFabId' has a wrong offset!");
static_assert(offsetof(FAdminUpdateCloudScriptRequest, Files) == 0x000020, "Member 'FAdminUpdateCloudScriptRequest::Files' has a wrong offset!");
static_assert(offsetof(FAdminUpdateCloudScriptRequest, Publish) == 0x000030, "Member 'FAdminUpdateCloudScriptRequest::Publish' has a wrong offset!");

// ScriptStruct PlayFab.ClientRemoveSharedGroupMembersResult
// 0x0000 (0x0008 - 0x0008)
struct FClientRemoveSharedGroupMembersResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientRemoveSharedGroupMembersResult) == 0x000008, "Wrong alignment on FClientRemoveSharedGroupMembersResult");
static_assert(sizeof(FClientRemoveSharedGroupMembersResult) == 0x000008, "Wrong size on FClientRemoveSharedGroupMembersResult");

// ScriptStruct PlayFab.AdminUpdatePlayerSharedSecretRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminUpdatePlayerSharedSecretRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          Disabled;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2138[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FriendlyName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecretKey;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdatePlayerSharedSecretRequest) == 0x000008, "Wrong alignment on FAdminUpdatePlayerSharedSecretRequest");
static_assert(sizeof(FAdminUpdatePlayerSharedSecretRequest) == 0x000030, "Wrong size on FAdminUpdatePlayerSharedSecretRequest");
static_assert(offsetof(FAdminUpdatePlayerSharedSecretRequest, Disabled) == 0x000008, "Member 'FAdminUpdatePlayerSharedSecretRequest::Disabled' has a wrong offset!");
static_assert(offsetof(FAdminUpdatePlayerSharedSecretRequest, FriendlyName) == 0x000010, "Member 'FAdminUpdatePlayerSharedSecretRequest::FriendlyName' has a wrong offset!");
static_assert(offsetof(FAdminUpdatePlayerSharedSecretRequest, SecretKey) == 0x000020, "Member 'FAdminUpdatePlayerSharedSecretRequest::SecretKey' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdatePlayerStatisticDefinitionRequest
// 0x0020 (0x0028 - 0x0008)
struct FAdminUpdatePlayerStatisticDefinitionRequest final : public FPlayFabRequestCommon
{
public:
	EStatisticAggregationMethod                   AggregationMethod;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2139[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatisticName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatisticResetIntervalOption                 VersionChangeInterval;                             // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213A[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminUpdatePlayerStatisticDefinitionRequest) == 0x000008, "Wrong alignment on FAdminUpdatePlayerStatisticDefinitionRequest");
static_assert(sizeof(FAdminUpdatePlayerStatisticDefinitionRequest) == 0x000028, "Wrong size on FAdminUpdatePlayerStatisticDefinitionRequest");
static_assert(offsetof(FAdminUpdatePlayerStatisticDefinitionRequest, AggregationMethod) == 0x000008, "Member 'FAdminUpdatePlayerStatisticDefinitionRequest::AggregationMethod' has a wrong offset!");
static_assert(offsetof(FAdminUpdatePlayerStatisticDefinitionRequest, StatisticName) == 0x000010, "Member 'FAdminUpdatePlayerStatisticDefinitionRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FAdminUpdatePlayerStatisticDefinitionRequest, VersionChangeInterval) == 0x000020, "Member 'FAdminUpdatePlayerStatisticDefinitionRequest::VersionChangeInterval' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateRandomResultTablesRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminUpdateRandomResultTablesRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Tables;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateRandomResultTablesRequest) == 0x000008, "Wrong alignment on FAdminUpdateRandomResultTablesRequest");
static_assert(sizeof(FAdminUpdateRandomResultTablesRequest) == 0x000030, "Wrong size on FAdminUpdateRandomResultTablesRequest");
static_assert(offsetof(FAdminUpdateRandomResultTablesRequest, CatalogVersion) == 0x000008, "Member 'FAdminUpdateRandomResultTablesRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FAdminUpdateRandomResultTablesRequest, CustomTags) == 0x000018, "Member 'FAdminUpdateRandomResultTablesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminUpdateRandomResultTablesRequest, Tables) == 0x000020, "Member 'FAdminUpdateRandomResultTablesRequest::Tables' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateTaskRequest
// 0x0058 (0x0060 - 0x0008)
struct FAdminUpdateTaskRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Identifier;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Parameter;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Schedule;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScheduledTaskType                            Type;                                              // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213C[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdminUpdateTaskRequest) == 0x000008, "Wrong alignment on FAdminUpdateTaskRequest");
static_assert(sizeof(FAdminUpdateTaskRequest) == 0x000060, "Wrong size on FAdminUpdateTaskRequest");
static_assert(offsetof(FAdminUpdateTaskRequest, CustomTags) == 0x000008, "Member 'FAdminUpdateTaskRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminUpdateTaskRequest, Description) == 0x000010, "Member 'FAdminUpdateTaskRequest::Description' has a wrong offset!");
static_assert(offsetof(FAdminUpdateTaskRequest, Identifier) == 0x000020, "Member 'FAdminUpdateTaskRequest::Identifier' has a wrong offset!");
static_assert(offsetof(FAdminUpdateTaskRequest, IsActive) == 0x000028, "Member 'FAdminUpdateTaskRequest::IsActive' has a wrong offset!");
static_assert(offsetof(FAdminUpdateTaskRequest, Name) == 0x000030, "Member 'FAdminUpdateTaskRequest::Name' has a wrong offset!");
static_assert(offsetof(FAdminUpdateTaskRequest, Parameter) == 0x000040, "Member 'FAdminUpdateTaskRequest::Parameter' has a wrong offset!");
static_assert(offsetof(FAdminUpdateTaskRequest, Schedule) == 0x000048, "Member 'FAdminUpdateTaskRequest::Schedule' has a wrong offset!");
static_assert(offsetof(FAdminUpdateTaskRequest, Type) == 0x000058, "Member 'FAdminUpdateTaskRequest::Type' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateUserDataRequest
// 0x0038 (0x0040 - 0x0008)
struct FAdminUpdateUserDataRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserDataPermission                           Permission;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateUserDataRequest) == 0x000008, "Wrong alignment on FAdminUpdateUserDataRequest");
static_assert(sizeof(FAdminUpdateUserDataRequest) == 0x000040, "Wrong size on FAdminUpdateUserDataRequest");
static_assert(offsetof(FAdminUpdateUserDataRequest, CustomTags) == 0x000008, "Member 'FAdminUpdateUserDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminUpdateUserDataRequest, Data) == 0x000010, "Member 'FAdminUpdateUserDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FAdminUpdateUserDataRequest, KeysToRemove) == 0x000018, "Member 'FAdminUpdateUserDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FAdminUpdateUserDataRequest, Permission) == 0x000028, "Member 'FAdminUpdateUserDataRequest::Permission' has a wrong offset!");
static_assert(offsetof(FAdminUpdateUserDataRequest, PlayFabId) == 0x000030, "Member 'FAdminUpdateUserDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetCharacterStatisticsResult
// 0x0008 (0x0010 - 0x0008)
struct FClientGetCharacterStatisticsResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     CharacterStatistics;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetCharacterStatisticsResult) == 0x000008, "Wrong alignment on FClientGetCharacterStatisticsResult");
static_assert(sizeof(FClientGetCharacterStatisticsResult) == 0x000010, "Wrong size on FClientGetCharacterStatisticsResult");
static_assert(offsetof(FClientGetCharacterStatisticsResult, CharacterStatistics) == 0x000008, "Member 'FClientGetCharacterStatisticsResult::CharacterStatistics' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerSubscribeToLobbyResourceRequest
// 0x0038 (0x0040 - 0x0008)
struct FMultiplayerSubscribeToLobbyResourceRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     EntityKey;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PubSubConnectionHandle;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceId;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubscriptionVersion;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubscriptionType                             Type;                                              // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213E[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerSubscribeToLobbyResourceRequest) == 0x000008, "Wrong alignment on FMultiplayerSubscribeToLobbyResourceRequest");
static_assert(sizeof(FMultiplayerSubscribeToLobbyResourceRequest) == 0x000040, "Wrong size on FMultiplayerSubscribeToLobbyResourceRequest");
static_assert(offsetof(FMultiplayerSubscribeToLobbyResourceRequest, CustomTags) == 0x000008, "Member 'FMultiplayerSubscribeToLobbyResourceRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerSubscribeToLobbyResourceRequest, EntityKey) == 0x000010, "Member 'FMultiplayerSubscribeToLobbyResourceRequest::EntityKey' has a wrong offset!");
static_assert(offsetof(FMultiplayerSubscribeToLobbyResourceRequest, PubSubConnectionHandle) == 0x000018, "Member 'FMultiplayerSubscribeToLobbyResourceRequest::PubSubConnectionHandle' has a wrong offset!");
static_assert(offsetof(FMultiplayerSubscribeToLobbyResourceRequest, ResourceId) == 0x000028, "Member 'FMultiplayerSubscribeToLobbyResourceRequest::ResourceId' has a wrong offset!");
static_assert(offsetof(FMultiplayerSubscribeToLobbyResourceRequest, SubscriptionVersion) == 0x000038, "Member 'FMultiplayerSubscribeToLobbyResourceRequest::SubscriptionVersion' has a wrong offset!");
static_assert(offsetof(FMultiplayerSubscribeToLobbyResourceRequest, Type) == 0x00003C, "Member 'FMultiplayerSubscribeToLobbyResourceRequest::Type' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetQueueStatisticsResult
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerGetQueueStatisticsResult final : public FPlayFabResultCommon
{
public:
	int32                                         NumberOfPlayersMatching;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     TimeToMatchStatisticsInSeconds;                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetQueueStatisticsResult) == 0x000008, "Wrong alignment on FMultiplayerGetQueueStatisticsResult");
static_assert(sizeof(FMultiplayerGetQueueStatisticsResult) == 0x000018, "Wrong size on FMultiplayerGetQueueStatisticsResult");
static_assert(offsetof(FMultiplayerGetQueueStatisticsResult, NumberOfPlayersMatching) == 0x000008, "Member 'FMultiplayerGetQueueStatisticsResult::NumberOfPlayersMatching' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetQueueStatisticsResult, TimeToMatchStatisticsInSeconds) == 0x000010, "Member 'FMultiplayerGetQueueStatisticsResult::TimeToMatchStatisticsInSeconds' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateUserInternalDataRequest
// 0x0030 (0x0038 - 0x0008)
struct FAdminUpdateUserInternalDataRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateUserInternalDataRequest) == 0x000008, "Wrong alignment on FAdminUpdateUserInternalDataRequest");
static_assert(sizeof(FAdminUpdateUserInternalDataRequest) == 0x000038, "Wrong size on FAdminUpdateUserInternalDataRequest");
static_assert(offsetof(FAdminUpdateUserInternalDataRequest, CustomTags) == 0x000008, "Member 'FAdminUpdateUserInternalDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminUpdateUserInternalDataRequest, Data) == 0x000010, "Member 'FAdminUpdateUserInternalDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FAdminUpdateUserInternalDataRequest, KeysToRemove) == 0x000018, "Member 'FAdminUpdateUserInternalDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FAdminUpdateUserInternalDataRequest, PlayFabId) == 0x000028, "Member 'FAdminUpdateUserInternalDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AdminUpdateUserTitleDisplayNameRequest
// 0x0028 (0x0030 - 0x0008)
struct FAdminUpdateUserTitleDisplayNameRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdminUpdateUserTitleDisplayNameRequest) == 0x000008, "Wrong alignment on FAdminUpdateUserTitleDisplayNameRequest");
static_assert(sizeof(FAdminUpdateUserTitleDisplayNameRequest) == 0x000030, "Wrong size on FAdminUpdateUserTitleDisplayNameRequest");
static_assert(offsetof(FAdminUpdateUserTitleDisplayNameRequest, CustomTags) == 0x000008, "Member 'FAdminUpdateUserTitleDisplayNameRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAdminUpdateUserTitleDisplayNameRequest, DisplayName) == 0x000010, "Member 'FAdminUpdateUserTitleDisplayNameRequest::DisplayName' has a wrong offset!");
static_assert(offsetof(FAdminUpdateUserTitleDisplayNameRequest, PlayFabId) == 0x000020, "Member 'FAdminUpdateUserTitleDisplayNameRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.AuthenticationAuthenticateCustomIdResult
// 0x0010 (0x0018 - 0x0008)
struct FAuthenticationAuthenticateCustomIdResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     EntityToken;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewlyCreated;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2140[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAuthenticationAuthenticateCustomIdResult) == 0x000008, "Wrong alignment on FAuthenticationAuthenticateCustomIdResult");
static_assert(sizeof(FAuthenticationAuthenticateCustomIdResult) == 0x000018, "Wrong size on FAuthenticationAuthenticateCustomIdResult");
static_assert(offsetof(FAuthenticationAuthenticateCustomIdResult, EntityToken) == 0x000008, "Member 'FAuthenticationAuthenticateCustomIdResult::EntityToken' has a wrong offset!");
static_assert(offsetof(FAuthenticationAuthenticateCustomIdResult, NewlyCreated) == 0x000010, "Member 'FAuthenticationAuthenticateCustomIdResult::NewlyCreated' has a wrong offset!");

// ScriptStruct PlayFab.ServerGrantItemsToUserResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGrantItemsToUserResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             ItemGrantResults;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGrantItemsToUserResult) == 0x000008, "Wrong alignment on FServerGrantItemsToUserResult");
static_assert(sizeof(FServerGrantItemsToUserResult) == 0x000018, "Wrong size on FServerGrantItemsToUserResult");
static_assert(offsetof(FServerGrantItemsToUserResult, ItemGrantResults) == 0x000008, "Member 'FServerGrantItemsToUserResult::ItemGrantResults' has a wrong offset!");

// ScriptStruct PlayFab.AuthenticationEmptyResponse
// 0x0000 (0x0008 - 0x0008)
struct FAuthenticationEmptyResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FAuthenticationEmptyResponse) == 0x000008, "Wrong alignment on FAuthenticationEmptyResponse");
static_assert(sizeof(FAuthenticationEmptyResponse) == 0x000008, "Wrong size on FAuthenticationEmptyResponse");

// ScriptStruct PlayFab.ExperimentationUpdateExperimentRequest
// 0x00A0 (0x00A8 - 0x0008)
struct FExperimentationUpdateExperimentRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExclusionGroupId;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExclusionGroupTrafficAllocation;                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExperimentType                               ExperimentType;                                    // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2141[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SegmentId;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartDate;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitlePlayerAccountTestIds;                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Variants;                                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationUpdateExperimentRequest) == 0x000008, "Wrong alignment on FExperimentationUpdateExperimentRequest");
static_assert(sizeof(FExperimentationUpdateExperimentRequest) == 0x0000A8, "Wrong size on FExperimentationUpdateExperimentRequest");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, CustomTags) == 0x000008, "Member 'FExperimentationUpdateExperimentRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, Description) == 0x000010, "Member 'FExperimentationUpdateExperimentRequest::Description' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, EndDate) == 0x000020, "Member 'FExperimentationUpdateExperimentRequest::EndDate' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, ExclusionGroupId) == 0x000030, "Member 'FExperimentationUpdateExperimentRequest::ExclusionGroupId' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, ExclusionGroupTrafficAllocation) == 0x000040, "Member 'FExperimentationUpdateExperimentRequest::ExclusionGroupTrafficAllocation' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, ExperimentType) == 0x000044, "Member 'FExperimentationUpdateExperimentRequest::ExperimentType' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, ID) == 0x000048, "Member 'FExperimentationUpdateExperimentRequest::ID' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, Name) == 0x000058, "Member 'FExperimentationUpdateExperimentRequest::Name' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, SegmentId) == 0x000068, "Member 'FExperimentationUpdateExperimentRequest::SegmentId' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, StartDate) == 0x000078, "Member 'FExperimentationUpdateExperimentRequest::StartDate' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, TitlePlayerAccountTestIds) == 0x000088, "Member 'FExperimentationUpdateExperimentRequest::TitlePlayerAccountTestIds' has a wrong offset!");
static_assert(offsetof(FExperimentationUpdateExperimentRequest, Variants) == 0x000098, "Member 'FExperimentationUpdateExperimentRequest::Variants' has a wrong offset!");

// ScriptStruct PlayFab.AuthenticationGetEntityTokenRequest
// 0x0010 (0x0018 - 0x0008)
struct FAuthenticationGetEntityTokenRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuthenticationGetEntityTokenRequest) == 0x000008, "Wrong alignment on FAuthenticationGetEntityTokenRequest");
static_assert(sizeof(FAuthenticationGetEntityTokenRequest) == 0x000018, "Wrong size on FAuthenticationGetEntityTokenRequest");
static_assert(offsetof(FAuthenticationGetEntityTokenRequest, CustomTags) == 0x000008, "Member 'FAuthenticationGetEntityTokenRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FAuthenticationGetEntityTokenRequest, Entity) == 0x000010, "Member 'FAuthenticationGetEntityTokenRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.ClientAcceptTradeRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientAcceptTradeRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AcceptedInventoryInstanceIds;                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferingPlayerId;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TradeId;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAcceptTradeRequest) == 0x000008, "Wrong alignment on FClientAcceptTradeRequest");
static_assert(sizeof(FClientAcceptTradeRequest) == 0x000038, "Wrong size on FClientAcceptTradeRequest");
static_assert(offsetof(FClientAcceptTradeRequest, AcceptedInventoryInstanceIds) == 0x000008, "Member 'FClientAcceptTradeRequest::AcceptedInventoryInstanceIds' has a wrong offset!");
static_assert(offsetof(FClientAcceptTradeRequest, OfferingPlayerId) == 0x000018, "Member 'FClientAcceptTradeRequest::OfferingPlayerId' has a wrong offset!");
static_assert(offsetof(FClientAcceptTradeRequest, TradeId) == 0x000028, "Member 'FClientAcceptTradeRequest::TradeId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayersInSegmentRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerGetPlayersInSegmentRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetProfilesAsync;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2142[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBatchSize;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsToLive;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2143[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SegmentId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayersInSegmentRequest) == 0x000008, "Wrong alignment on FServerGetPlayersInSegmentRequest");
static_assert(sizeof(FServerGetPlayersInSegmentRequest) == 0x000040, "Wrong size on FServerGetPlayersInSegmentRequest");
static_assert(offsetof(FServerGetPlayersInSegmentRequest, ContinuationToken) == 0x000008, "Member 'FServerGetPlayersInSegmentRequest::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FServerGetPlayersInSegmentRequest, CustomTags) == 0x000018, "Member 'FServerGetPlayersInSegmentRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetPlayersInSegmentRequest, GetProfilesAsync) == 0x000020, "Member 'FServerGetPlayersInSegmentRequest::GetProfilesAsync' has a wrong offset!");
static_assert(offsetof(FServerGetPlayersInSegmentRequest, MaxBatchSize) == 0x000024, "Member 'FServerGetPlayersInSegmentRequest::MaxBatchSize' has a wrong offset!");
static_assert(offsetof(FServerGetPlayersInSegmentRequest, SecondsToLive) == 0x000028, "Member 'FServerGetPlayersInSegmentRequest::SecondsToLive' has a wrong offset!");
static_assert(offsetof(FServerGetPlayersInSegmentRequest, SegmentId) == 0x000030, "Member 'FServerGetPlayersInSegmentRequest::SegmentId' has a wrong offset!");

// ScriptStruct PlayFab.ClientAddFriendRequest
// 0x0040 (0x0048 - 0x0008)
struct FClientAddFriendRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FriendEmail;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendPlayFabId;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendTitleDisplayName;                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendUsername;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAddFriendRequest) == 0x000008, "Wrong alignment on FClientAddFriendRequest");
static_assert(sizeof(FClientAddFriendRequest) == 0x000048, "Wrong size on FClientAddFriendRequest");
static_assert(offsetof(FClientAddFriendRequest, FriendEmail) == 0x000008, "Member 'FClientAddFriendRequest::FriendEmail' has a wrong offset!");
static_assert(offsetof(FClientAddFriendRequest, FriendPlayFabId) == 0x000018, "Member 'FClientAddFriendRequest::FriendPlayFabId' has a wrong offset!");
static_assert(offsetof(FClientAddFriendRequest, FriendTitleDisplayName) == 0x000028, "Member 'FClientAddFriendRequest::FriendTitleDisplayName' has a wrong offset!");
static_assert(offsetof(FClientAddFriendRequest, FriendUsername) == 0x000038, "Member 'FClientAddFriendRequest::FriendUsername' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkOpenIdConnectRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientLinkOpenIdConnectRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ConnectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2144[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IdToken;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkOpenIdConnectRequest) == 0x000008, "Wrong alignment on FClientLinkOpenIdConnectRequest");
static_assert(sizeof(FClientLinkOpenIdConnectRequest) == 0x000038, "Wrong size on FClientLinkOpenIdConnectRequest");
static_assert(offsetof(FClientLinkOpenIdConnectRequest, ConnectionId) == 0x000008, "Member 'FClientLinkOpenIdConnectRequest::ConnectionId' has a wrong offset!");
static_assert(offsetof(FClientLinkOpenIdConnectRequest, CustomTags) == 0x000018, "Member 'FClientLinkOpenIdConnectRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkOpenIdConnectRequest, ForceLink) == 0x000020, "Member 'FClientLinkOpenIdConnectRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkOpenIdConnectRequest, IdToken) == 0x000028, "Member 'FClientLinkOpenIdConnectRequest::IdToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetAssetUploadUrlRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetAssetUploadUrlRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetAssetUploadUrlRequest) == 0x000008, "Wrong alignment on FMultiplayerGetAssetUploadUrlRequest");
static_assert(sizeof(FMultiplayerGetAssetUploadUrlRequest) == 0x000020, "Wrong size on FMultiplayerGetAssetUploadUrlRequest");
static_assert(offsetof(FMultiplayerGetAssetUploadUrlRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetAssetUploadUrlRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetAssetUploadUrlRequest, Filename) == 0x000010, "Member 'FMultiplayerGetAssetUploadUrlRequest::Filename' has a wrong offset!");

// ScriptStruct PlayFab.ClientAddGenericIDRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientAddGenericIDRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     GenericId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAddGenericIDRequest) == 0x000008, "Wrong alignment on FClientAddGenericIDRequest");
static_assert(sizeof(FClientAddGenericIDRequest) == 0x000010, "Wrong size on FClientAddGenericIDRequest");
static_assert(offsetof(FClientAddGenericIDRequest, GenericId) == 0x000008, "Member 'FClientAddGenericIDRequest::GenericId' has a wrong offset!");

// ScriptStruct PlayFab.ClientAddOrUpdateContactEmailRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientAddOrUpdateContactEmailRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailAddress;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAddOrUpdateContactEmailRequest) == 0x000008, "Wrong alignment on FClientAddOrUpdateContactEmailRequest");
static_assert(sizeof(FClientAddOrUpdateContactEmailRequest) == 0x000020, "Wrong size on FClientAddOrUpdateContactEmailRequest");
static_assert(offsetof(FClientAddOrUpdateContactEmailRequest, CustomTags) == 0x000008, "Member 'FClientAddOrUpdateContactEmailRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientAddOrUpdateContactEmailRequest, EmailAddress) == 0x000010, "Member 'FClientAddOrUpdateContactEmailRequest::EmailAddress' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateServerBackfillTicketRequest
// 0x0038 (0x0040 - 0x0008)
struct FMultiplayerCreateServerBackfillTicketRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiveUpAfterSeconds;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2145[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ServerDetails;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateServerBackfillTicketRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateServerBackfillTicketRequest");
static_assert(sizeof(FMultiplayerCreateServerBackfillTicketRequest) == 0x000040, "Wrong size on FMultiplayerCreateServerBackfillTicketRequest");
static_assert(offsetof(FMultiplayerCreateServerBackfillTicketRequest, CustomTags) == 0x000008, "Member 'FMultiplayerCreateServerBackfillTicketRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateServerBackfillTicketRequest, GiveUpAfterSeconds) == 0x000010, "Member 'FMultiplayerCreateServerBackfillTicketRequest::GiveUpAfterSeconds' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateServerBackfillTicketRequest, Members) == 0x000018, "Member 'FMultiplayerCreateServerBackfillTicketRequest::Members' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateServerBackfillTicketRequest, QueueName) == 0x000028, "Member 'FMultiplayerCreateServerBackfillTicketRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateServerBackfillTicketRequest, ServerDetails) == 0x000038, "Member 'FMultiplayerCreateServerBackfillTicketRequest::ServerDetails' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCancelAllServerBackfillTicketsForPlayerResult
// 0x0000 (0x0008 - 0x0008)
struct FMultiplayerCancelAllServerBackfillTicketsForPlayerResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FMultiplayerCancelAllServerBackfillTicketsForPlayerResult) == 0x000008, "Wrong alignment on FMultiplayerCancelAllServerBackfillTicketsForPlayerResult");
static_assert(sizeof(FMultiplayerCancelAllServerBackfillTicketsForPlayerResult) == 0x000008, "Wrong size on FMultiplayerCancelAllServerBackfillTicketsForPlayerResult");

// ScriptStruct PlayFab.ClientAddSharedGroupMembersResult
// 0x0000 (0x0008 - 0x0008)
struct FClientAddSharedGroupMembersResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientAddSharedGroupMembersResult) == 0x000008, "Wrong alignment on FClientAddSharedGroupMembersResult");
static_assert(sizeof(FClientAddSharedGroupMembersResult) == 0x000008, "Wrong size on FClientAddSharedGroupMembersResult");

// ScriptStruct PlayFab.ServerRegisterGameResponse
// 0x0010 (0x0018 - 0x0008)
struct FServerRegisterGameResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 LobbyId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRegisterGameResponse) == 0x000008, "Wrong alignment on FServerRegisterGameResponse");
static_assert(sizeof(FServerRegisterGameResponse) == 0x000018, "Wrong size on FServerRegisterGameResponse");
static_assert(offsetof(FServerRegisterGameResponse, LobbyId) == 0x000008, "Member 'FServerRegisterGameResponse::LobbyId' has a wrong offset!");

// ScriptStruct PlayFab.ClientAddSharedGroupMembersRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientAddSharedGroupMembersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabIds;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SharedGroupId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAddSharedGroupMembersRequest) == 0x000008, "Wrong alignment on FClientAddSharedGroupMembersRequest");
static_assert(sizeof(FClientAddSharedGroupMembersRequest) == 0x000028, "Wrong size on FClientAddSharedGroupMembersRequest");
static_assert(offsetof(FClientAddSharedGroupMembersRequest, PlayFabIds) == 0x000008, "Member 'FClientAddSharedGroupMembersRequest::PlayFabIds' has a wrong offset!");
static_assert(offsetof(FClientAddSharedGroupMembersRequest, SharedGroupId) == 0x000018, "Member 'FClientAddSharedGroupMembersRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromSteamIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromSteamIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromSteamIDsResult) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromSteamIDsResult");
static_assert(sizeof(FServerGetPlayFabIDsFromSteamIDsResult) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromSteamIDsResult");
static_assert(offsetof(FServerGetPlayFabIDsFromSteamIDsResult, Data) == 0x000008, "Member 'FServerGetPlayFabIDsFromSteamIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientAddUsernamePasswordResult
// 0x0010 (0x0018 - 0x0008)
struct FClientAddUsernamePasswordResult final : public FPlayFabResultCommon
{
public:
	class FString                                 Username;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAddUsernamePasswordResult) == 0x000008, "Wrong alignment on FClientAddUsernamePasswordResult");
static_assert(sizeof(FClientAddUsernamePasswordResult) == 0x000018, "Wrong size on FClientAddUsernamePasswordResult");
static_assert(offsetof(FClientAddUsernamePasswordResult, Username) == 0x000008, "Member 'FClientAddUsernamePasswordResult::Username' has a wrong offset!");

// ScriptStruct PlayFab.ClientAddUsernamePasswordRequest
// 0x0038 (0x0040 - 0x0008)
struct FClientAddUsernamePasswordRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAddUsernamePasswordRequest) == 0x000008, "Wrong alignment on FClientAddUsernamePasswordRequest");
static_assert(sizeof(FClientAddUsernamePasswordRequest) == 0x000040, "Wrong size on FClientAddUsernamePasswordRequest");
static_assert(offsetof(FClientAddUsernamePasswordRequest, CustomTags) == 0x000008, "Member 'FClientAddUsernamePasswordRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientAddUsernamePasswordRequest, Email) == 0x000010, "Member 'FClientAddUsernamePasswordRequest::Email' has a wrong offset!");
static_assert(offsetof(FClientAddUsernamePasswordRequest, Password) == 0x000020, "Member 'FClientAddUsernamePasswordRequest::Password' has a wrong offset!");
static_assert(offsetof(FClientAddUsernamePasswordRequest, Username) == 0x000030, "Member 'FClientAddUsernamePasswordRequest::Username' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkSteamAccountRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientLinkSteamAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2146[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SteamTicket;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TicketIsServiceSpecific;                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2147[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientLinkSteamAccountRequest) == 0x000008, "Wrong alignment on FClientLinkSteamAccountRequest");
static_assert(sizeof(FClientLinkSteamAccountRequest) == 0x000030, "Wrong size on FClientLinkSteamAccountRequest");
static_assert(offsetof(FClientLinkSteamAccountRequest, CustomTags) == 0x000008, "Member 'FClientLinkSteamAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkSteamAccountRequest, ForceLink) == 0x000010, "Member 'FClientLinkSteamAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkSteamAccountRequest, SteamTicket) == 0x000018, "Member 'FClientLinkSteamAccountRequest::SteamTicket' has a wrong offset!");
static_assert(offsetof(FClientLinkSteamAccountRequest, TicketIsServiceSpecific) == 0x000028, "Member 'FClientLinkSteamAccountRequest::TicketIsServiceSpecific' has a wrong offset!");

// ScriptStruct PlayFab.ClientAddUserVirtualCurrencyRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientAddUserVirtualCurrencyRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2148[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAddUserVirtualCurrencyRequest) == 0x000008, "Wrong alignment on FClientAddUserVirtualCurrencyRequest");
static_assert(sizeof(FClientAddUserVirtualCurrencyRequest) == 0x000028, "Wrong size on FClientAddUserVirtualCurrencyRequest");
static_assert(offsetof(FClientAddUserVirtualCurrencyRequest, Amount) == 0x000008, "Member 'FClientAddUserVirtualCurrencyRequest::Amount' has a wrong offset!");
static_assert(offsetof(FClientAddUserVirtualCurrencyRequest, CustomTags) == 0x000010, "Member 'FClientAddUserVirtualCurrencyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientAddUserVirtualCurrencyRequest, VirtualCurrency) == 0x000018, "Member 'FClientAddUserVirtualCurrencyRequest::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCharacterLeaderboardRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerGetCharacterLeaderboardRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         MaxResultsCount;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPosition;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCharacterLeaderboardRequest) == 0x000008, "Wrong alignment on FServerGetCharacterLeaderboardRequest");
static_assert(sizeof(FServerGetCharacterLeaderboardRequest) == 0x000020, "Wrong size on FServerGetCharacterLeaderboardRequest");
static_assert(offsetof(FServerGetCharacterLeaderboardRequest, MaxResultsCount) == 0x000008, "Member 'FServerGetCharacterLeaderboardRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterLeaderboardRequest, StartPosition) == 0x00000C, "Member 'FServerGetCharacterLeaderboardRequest::StartPosition' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterLeaderboardRequest, StatisticName) == 0x000010, "Member 'FServerGetCharacterLeaderboardRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.ClientAndroidDevicePushNotificationRegistrationResult
// 0x0000 (0x0008 - 0x0008)
struct FClientAndroidDevicePushNotificationRegistrationResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientAndroidDevicePushNotificationRegistrationResult) == 0x000008, "Wrong alignment on FClientAndroidDevicePushNotificationRegistrationResult");
static_assert(sizeof(FClientAndroidDevicePushNotificationRegistrationResult) == 0x000008, "Wrong size on FClientAndroidDevicePushNotificationRegistrationResult");

// ScriptStruct PlayFab.ClientAndroidDevicePushNotificationRegistrationRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientAndroidDevicePushNotificationRegistrationRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ConfirmationMessage;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceToken;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SendPushNotificationConfirmation;                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2149[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientAndroidDevicePushNotificationRegistrationRequest) == 0x000008, "Wrong alignment on FClientAndroidDevicePushNotificationRegistrationRequest");
static_assert(sizeof(FClientAndroidDevicePushNotificationRegistrationRequest) == 0x000030, "Wrong size on FClientAndroidDevicePushNotificationRegistrationRequest");
static_assert(offsetof(FClientAndroidDevicePushNotificationRegistrationRequest, ConfirmationMessage) == 0x000008, "Member 'FClientAndroidDevicePushNotificationRegistrationRequest::ConfirmationMessage' has a wrong offset!");
static_assert(offsetof(FClientAndroidDevicePushNotificationRegistrationRequest, DeviceToken) == 0x000018, "Member 'FClientAndroidDevicePushNotificationRegistrationRequest::DeviceToken' has a wrong offset!");
static_assert(offsetof(FClientAndroidDevicePushNotificationRegistrationRequest, SendPushNotificationConfirmation) == 0x000028, "Member 'FClientAndroidDevicePushNotificationRegistrationRequest::SendPushNotificationConfirmation' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithPSNRequest
// 0x0060 (0x0068 - 0x0008)
struct FClientLoginWithPSNRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AuthCode;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateAccount;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IssuerId;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214B[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerSecret;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUri;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithPSNRequest) == 0x000008, "Wrong alignment on FClientLoginWithPSNRequest");
static_assert(sizeof(FClientLoginWithPSNRequest) == 0x000068, "Wrong size on FClientLoginWithPSNRequest");
static_assert(offsetof(FClientLoginWithPSNRequest, AuthCode) == 0x000008, "Member 'FClientLoginWithPSNRequest::AuthCode' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPSNRequest, CreateAccount) == 0x000018, "Member 'FClientLoginWithPSNRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPSNRequest, CustomTags) == 0x000020, "Member 'FClientLoginWithPSNRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPSNRequest, EncryptedRequest) == 0x000028, "Member 'FClientLoginWithPSNRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPSNRequest, InfoRequestParameters) == 0x000038, "Member 'FClientLoginWithPSNRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPSNRequest, IssuerId) == 0x000040, "Member 'FClientLoginWithPSNRequest::IssuerId' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPSNRequest, PlayerSecret) == 0x000048, "Member 'FClientLoginWithPSNRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPSNRequest, RedirectUri) == 0x000058, "Member 'FClientLoginWithPSNRequest::RedirectUri' has a wrong offset!");

// ScriptStruct PlayFab.ClientAttributeInstallRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientAttributeInstallRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Adid;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Idfa;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientAttributeInstallRequest) == 0x000008, "Wrong alignment on FClientAttributeInstallRequest");
static_assert(sizeof(FClientAttributeInstallRequest) == 0x000028, "Wrong size on FClientAttributeInstallRequest");
static_assert(offsetof(FClientAttributeInstallRequest, Adid) == 0x000008, "Member 'FClientAttributeInstallRequest::Adid' has a wrong offset!");
static_assert(offsetof(FClientAttributeInstallRequest, Idfa) == 0x000018, "Member 'FClientAttributeInstallRequest::Idfa' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkGoogleAccountRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkGoogleAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerAuthCode;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkGoogleAccountRequest) == 0x000008, "Wrong alignment on FClientLinkGoogleAccountRequest");
static_assert(sizeof(FClientLinkGoogleAccountRequest) == 0x000028, "Wrong size on FClientLinkGoogleAccountRequest");
static_assert(offsetof(FClientLinkGoogleAccountRequest, CustomTags) == 0x000008, "Member 'FClientLinkGoogleAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkGoogleAccountRequest, ForceLink) == 0x000010, "Member 'FClientLinkGoogleAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkGoogleAccountRequest, ServerAuthCode) == 0x000018, "Member 'FClientLinkGoogleAccountRequest::ServerAuthCode' has a wrong offset!");

// ScriptStruct PlayFab.ClientCancelTradeRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientCancelTradeRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 TradeId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientCancelTradeRequest) == 0x000008, "Wrong alignment on FClientCancelTradeRequest");
static_assert(sizeof(FClientCancelTradeRequest) == 0x000018, "Wrong size on FClientCancelTradeRequest");
static_assert(offsetof(FClientCancelTradeRequest, TradeId) == 0x000008, "Member 'FClientCancelTradeRequest::TradeId' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumeMicrosoftStoreEntitlementsRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientConsumeMicrosoftStoreEntitlementsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MarketplaceSpecificData;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConsumeMicrosoftStoreEntitlementsRequest) == 0x000008, "Wrong alignment on FClientConsumeMicrosoftStoreEntitlementsRequest");
static_assert(sizeof(FClientConsumeMicrosoftStoreEntitlementsRequest) == 0x000028, "Wrong size on FClientConsumeMicrosoftStoreEntitlementsRequest");
static_assert(offsetof(FClientConsumeMicrosoftStoreEntitlementsRequest, CatalogVersion) == 0x000008, "Member 'FClientConsumeMicrosoftStoreEntitlementsRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientConsumeMicrosoftStoreEntitlementsRequest, CustomTags) == 0x000018, "Member 'FClientConsumeMicrosoftStoreEntitlementsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientConsumeMicrosoftStoreEntitlementsRequest, MarketplaceSpecificData) == 0x000020, "Member 'FClientConsumeMicrosoftStoreEntitlementsRequest::MarketplaceSpecificData' has a wrong offset!");

// ScriptStruct PlayFab.ClientSubtractUserVirtualCurrencyRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientSubtractUserVirtualCurrencyRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientSubtractUserVirtualCurrencyRequest) == 0x000008, "Wrong alignment on FClientSubtractUserVirtualCurrencyRequest");
static_assert(sizeof(FClientSubtractUserVirtualCurrencyRequest) == 0x000028, "Wrong size on FClientSubtractUserVirtualCurrencyRequest");
static_assert(offsetof(FClientSubtractUserVirtualCurrencyRequest, Amount) == 0x000008, "Member 'FClientSubtractUserVirtualCurrencyRequest::Amount' has a wrong offset!");
static_assert(offsetof(FClientSubtractUserVirtualCurrencyRequest, CustomTags) == 0x000010, "Member 'FClientSubtractUserVirtualCurrencyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientSubtractUserVirtualCurrencyRequest, VirtualCurrency) == 0x000018, "Member 'FClientSubtractUserVirtualCurrencyRequest::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCharacterInventoryRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerGetCharacterInventoryRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCharacterInventoryRequest) == 0x000008, "Wrong alignment on FServerGetCharacterInventoryRequest");
static_assert(sizeof(FServerGetCharacterInventoryRequest) == 0x000040, "Wrong size on FServerGetCharacterInventoryRequest");
static_assert(offsetof(FServerGetCharacterInventoryRequest, CatalogVersion) == 0x000008, "Member 'FServerGetCharacterInventoryRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterInventoryRequest, CharacterId) == 0x000018, "Member 'FServerGetCharacterInventoryRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterInventoryRequest, CustomTags) == 0x000028, "Member 'FServerGetCharacterInventoryRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterInventoryRequest, PlayFabId) == 0x000030, "Member 'FServerGetCharacterInventoryRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientConsumePSNEntitlementsRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientConsumePSNEntitlementsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServiceLabel;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214E[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientConsumePSNEntitlementsRequest) == 0x000008, "Wrong alignment on FClientConsumePSNEntitlementsRequest");
static_assert(sizeof(FClientConsumePSNEntitlementsRequest) == 0x000028, "Wrong size on FClientConsumePSNEntitlementsRequest");
static_assert(offsetof(FClientConsumePSNEntitlementsRequest, CatalogVersion) == 0x000008, "Member 'FClientConsumePSNEntitlementsRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientConsumePSNEntitlementsRequest, CustomTags) == 0x000018, "Member 'FClientConsumePSNEntitlementsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientConsumePSNEntitlementsRequest, ServiceLabel) == 0x000020, "Member 'FClientConsumePSNEntitlementsRequest::ServiceLabel' has a wrong offset!");

// ScriptStruct PlayFab.MatchmakerPlayerLeftRequest
// 0x0028 (0x0030 - 0x0008)
struct FMatchmakerPlayerLeftRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakerPlayerLeftRequest) == 0x000008, "Wrong alignment on FMatchmakerPlayerLeftRequest");
static_assert(sizeof(FMatchmakerPlayerLeftRequest) == 0x000030, "Wrong size on FMatchmakerPlayerLeftRequest");
static_assert(offsetof(FMatchmakerPlayerLeftRequest, CustomTags) == 0x000008, "Member 'FMatchmakerPlayerLeftRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMatchmakerPlayerLeftRequest, LobbyId) == 0x000010, "Member 'FMatchmakerPlayerLeftRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchmakerPlayerLeftRequest, PlayFabId) == 0x000020, "Member 'FMatchmakerPlayerLeftRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListMultiplayerServersRequest
// 0x0040 (0x0048 - 0x0008)
struct FMultiplayerListMultiplayerServersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkipToken;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListMultiplayerServersRequest) == 0x000008, "Wrong alignment on FMultiplayerListMultiplayerServersRequest");
static_assert(sizeof(FMultiplayerListMultiplayerServersRequest) == 0x000048, "Wrong size on FMultiplayerListMultiplayerServersRequest");
static_assert(offsetof(FMultiplayerListMultiplayerServersRequest, BuildId) == 0x000008, "Member 'FMultiplayerListMultiplayerServersRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerListMultiplayerServersRequest, CustomTags) == 0x000018, "Member 'FMultiplayerListMultiplayerServersRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListMultiplayerServersRequest, PageSize) == 0x000020, "Member 'FMultiplayerListMultiplayerServersRequest::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListMultiplayerServersRequest, Region) == 0x000028, "Member 'FMultiplayerListMultiplayerServersRequest::Region' has a wrong offset!");
static_assert(offsetof(FMultiplayerListMultiplayerServersRequest, SkipToken) == 0x000038, "Member 'FMultiplayerListMultiplayerServersRequest::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.ClientCreateSharedGroupRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientCreateSharedGroupRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SharedGroupId;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientCreateSharedGroupRequest) == 0x000008, "Wrong alignment on FClientCreateSharedGroupRequest");
static_assert(sizeof(FClientCreateSharedGroupRequest) == 0x000018, "Wrong size on FClientCreateSharedGroupRequest");
static_assert(offsetof(FClientCreateSharedGroupRequest, SharedGroupId) == 0x000008, "Member 'FClientCreateSharedGroupRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ClientRewardAdActivityRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientRewardAdActivityRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlacementId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRewardAdActivityRequest) == 0x000008, "Wrong alignment on FClientRewardAdActivityRequest");
static_assert(sizeof(FClientRewardAdActivityRequest) == 0x000030, "Wrong size on FClientRewardAdActivityRequest");
static_assert(offsetof(FClientRewardAdActivityRequest, CustomTags) == 0x000008, "Member 'FClientRewardAdActivityRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientRewardAdActivityRequest, PlacementId) == 0x000010, "Member 'FClientRewardAdActivityRequest::PlacementId' has a wrong offset!");
static_assert(offsetof(FClientRewardAdActivityRequest, RewardId) == 0x000020, "Member 'FClientRewardAdActivityRequest::RewardId' has a wrong offset!");

// ScriptStruct PlayFab.ClientExecuteCloudScriptResult
// 0x0058 (0x0060 - 0x0008)
struct FClientExecuteCloudScriptResult final : public FPlayFabResultCommon
{
public:
	int32                                         APIRequestsIssued;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2150[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Error;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExecutionTimeSeconds;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2151[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FunctionName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionResult;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FunctionResultTooLarge;                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2152[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HttpRequestsIssued;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Logs;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          LogsTooLarge;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2153[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MemoryConsumedBytes;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcessorTimeSeconds;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revision;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientExecuteCloudScriptResult) == 0x000008, "Wrong alignment on FClientExecuteCloudScriptResult");
static_assert(sizeof(FClientExecuteCloudScriptResult) == 0x000060, "Wrong size on FClientExecuteCloudScriptResult");
static_assert(offsetof(FClientExecuteCloudScriptResult, APIRequestsIssued) == 0x000008, "Member 'FClientExecuteCloudScriptResult::APIRequestsIssued' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, Error) == 0x000010, "Member 'FClientExecuteCloudScriptResult::Error' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, ExecutionTimeSeconds) == 0x000018, "Member 'FClientExecuteCloudScriptResult::ExecutionTimeSeconds' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, FunctionName) == 0x000020, "Member 'FClientExecuteCloudScriptResult::FunctionName' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, FunctionResult) == 0x000030, "Member 'FClientExecuteCloudScriptResult::FunctionResult' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, FunctionResultTooLarge) == 0x000038, "Member 'FClientExecuteCloudScriptResult::FunctionResultTooLarge' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, HttpRequestsIssued) == 0x00003C, "Member 'FClientExecuteCloudScriptResult::HttpRequestsIssued' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, Logs) == 0x000040, "Member 'FClientExecuteCloudScriptResult::Logs' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, LogsTooLarge) == 0x000050, "Member 'FClientExecuteCloudScriptResult::LogsTooLarge' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, MemoryConsumedBytes) == 0x000054, "Member 'FClientExecuteCloudScriptResult::MemoryConsumedBytes' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, ProcessorTimeSeconds) == 0x000058, "Member 'FClientExecuteCloudScriptResult::ProcessorTimeSeconds' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptResult, Revision) == 0x00005C, "Member 'FClientExecuteCloudScriptResult::Revision' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCancelServerBackfillTicketResult
// 0x0000 (0x0008 - 0x0008)
struct FMultiplayerCancelServerBackfillTicketResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FMultiplayerCancelServerBackfillTicketResult) == 0x000008, "Wrong alignment on FMultiplayerCancelServerBackfillTicketResult");
static_assert(sizeof(FMultiplayerCancelServerBackfillTicketResult) == 0x000008, "Wrong size on FMultiplayerCancelServerBackfillTicketResult");

// ScriptStruct PlayFab.MultiplayerListContainerImageTagsResponse
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerListContainerImageTagsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 Tags;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListContainerImageTagsResponse) == 0x000008, "Wrong alignment on FMultiplayerListContainerImageTagsResponse");
static_assert(sizeof(FMultiplayerListContainerImageTagsResponse) == 0x000018, "Wrong size on FMultiplayerListContainerImageTagsResponse");
static_assert(offsetof(FMultiplayerListContainerImageTagsResponse, Tags) == 0x000008, "Member 'FMultiplayerListContainerImageTagsResponse::Tags' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetAccountInfoResult
// 0x0008 (0x0010 - 0x0008)
struct FClientGetAccountInfoResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     AccountInfo;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetAccountInfoResult) == 0x000008, "Wrong alignment on FClientGetAccountInfoResult");
static_assert(sizeof(FClientGetAccountInfoResult) == 0x000010, "Wrong size on FClientGetAccountInfoResult");
static_assert(offsetof(FClientGetAccountInfoResult, AccountInfo) == 0x000008, "Member 'FClientGetAccountInfoResult::AccountInfo' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetAdPlacementsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetAdPlacementsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             AdPlacements;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetAdPlacementsResult) == 0x000008, "Wrong alignment on FClientGetAdPlacementsResult");
static_assert(sizeof(FClientGetAdPlacementsResult) == 0x000018, "Wrong size on FClientGetAdPlacementsResult");
static_assert(offsetof(FClientGetAdPlacementsResult, AdPlacements) == 0x000008, "Member 'FClientGetAdPlacementsResult::AdPlacements' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromTwitchIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromTwitchIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 TwitchIds;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromTwitchIDsRequest) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromTwitchIDsRequest");
static_assert(sizeof(FServerGetPlayFabIDsFromTwitchIDsRequest) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromTwitchIDsRequest");
static_assert(offsetof(FServerGetPlayFabIDsFromTwitchIDsRequest, TwitchIds) == 0x000008, "Member 'FServerGetPlayFabIDsFromTwitchIDsRequest::TwitchIds' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetCatalogItemsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetCatalogItemsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Catalog;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetCatalogItemsResult) == 0x000008, "Wrong alignment on FClientGetCatalogItemsResult");
static_assert(sizeof(FClientGetCatalogItemsResult) == 0x000018, "Wrong size on FClientGetCatalogItemsResult");
static_assert(offsetof(FClientGetCatalogItemsResult, Catalog) == 0x000008, "Member 'FClientGetCatalogItemsResult::Catalog' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetCharacterDataResult
// 0x0020 (0x0028 - 0x0008)
struct FClientGetCharacterDataResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataVersion;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2154[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGetCharacterDataResult) == 0x000008, "Wrong alignment on FClientGetCharacterDataResult");
static_assert(sizeof(FClientGetCharacterDataResult) == 0x000028, "Wrong size on FClientGetCharacterDataResult");
static_assert(offsetof(FClientGetCharacterDataResult, CharacterId) == 0x000008, "Member 'FClientGetCharacterDataResult::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterDataResult, Data) == 0x000018, "Member 'FClientGetCharacterDataResult::Data' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterDataResult, DataVersion) == 0x000020, "Member 'FClientGetCharacterDataResult::DataVersion' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetCharacterLeaderboardResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetCharacterLeaderboardResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetCharacterLeaderboardResult) == 0x000008, "Wrong alignment on FClientGetCharacterLeaderboardResult");
static_assert(sizeof(FClientGetCharacterLeaderboardResult) == 0x000018, "Wrong size on FClientGetCharacterLeaderboardResult");
static_assert(offsetof(FClientGetCharacterLeaderboardResult, Leaderboard) == 0x000008, "Member 'FClientGetCharacterLeaderboardResult::Leaderboard' has a wrong offset!");

// ScriptStruct PlayFab.ClientValidateGooglePlayPurchaseRequest
// 0x0050 (0x0058 - 0x0008)
struct FClientValidateGooglePlayPurchaseRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchasePrice;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2155[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReceiptJson;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Signature;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientValidateGooglePlayPurchaseRequest) == 0x000008, "Wrong alignment on FClientValidateGooglePlayPurchaseRequest");
static_assert(sizeof(FClientValidateGooglePlayPurchaseRequest) == 0x000058, "Wrong size on FClientValidateGooglePlayPurchaseRequest");
static_assert(offsetof(FClientValidateGooglePlayPurchaseRequest, CatalogVersion) == 0x000008, "Member 'FClientValidateGooglePlayPurchaseRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientValidateGooglePlayPurchaseRequest, CurrencyCode) == 0x000018, "Member 'FClientValidateGooglePlayPurchaseRequest::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FClientValidateGooglePlayPurchaseRequest, CustomTags) == 0x000028, "Member 'FClientValidateGooglePlayPurchaseRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientValidateGooglePlayPurchaseRequest, PurchasePrice) == 0x000030, "Member 'FClientValidateGooglePlayPurchaseRequest::PurchasePrice' has a wrong offset!");
static_assert(offsetof(FClientValidateGooglePlayPurchaseRequest, ReceiptJson) == 0x000038, "Member 'FClientValidateGooglePlayPurchaseRequest::ReceiptJson' has a wrong offset!");
static_assert(offsetof(FClientValidateGooglePlayPurchaseRequest, Signature) == 0x000048, "Member 'FClientValidateGooglePlayPurchaseRequest::Signature' has a wrong offset!");

// ScriptStruct PlayFab.ServerRemovePlayerTagResult
// 0x0000 (0x0008 - 0x0008)
struct FServerRemovePlayerTagResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerRemovePlayerTagResult) == 0x000008, "Wrong alignment on FServerRemovePlayerTagResult");
static_assert(sizeof(FServerRemovePlayerTagResult) == 0x000008, "Wrong size on FServerRemovePlayerTagResult");

// ScriptStruct PlayFab.ClientGetContentDownloadUrlResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetContentDownloadUrlResult final : public FPlayFabResultCommon
{
public:
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetContentDownloadUrlResult) == 0x000008, "Wrong alignment on FClientGetContentDownloadUrlResult");
static_assert(sizeof(FClientGetContentDownloadUrlResult) == 0x000018, "Wrong size on FClientGetContentDownloadUrlResult");
static_assert(offsetof(FClientGetContentDownloadUrlResult, URL) == 0x000008, "Member 'FClientGetContentDownloadUrlResult::URL' has a wrong offset!");

// ScriptStruct PlayFab.ClientCurrentGamesResult
// 0x0020 (0x0028 - 0x0008)
struct FClientCurrentGamesResult final : public FPlayFabResultCommon
{
public:
	int32                                         GameCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2156[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Games;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PlayerCount;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2157[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientCurrentGamesResult) == 0x000008, "Wrong alignment on FClientCurrentGamesResult");
static_assert(sizeof(FClientCurrentGamesResult) == 0x000028, "Wrong size on FClientCurrentGamesResult");
static_assert(offsetof(FClientCurrentGamesResult, GameCount) == 0x000008, "Member 'FClientCurrentGamesResult::GameCount' has a wrong offset!");
static_assert(offsetof(FClientCurrentGamesResult, Games) == 0x000010, "Member 'FClientCurrentGamesResult::Games' has a wrong offset!");
static_assert(offsetof(FClientCurrentGamesResult, PlayerCount) == 0x000020, "Member 'FClientCurrentGamesResult::PlayerCount' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithFacebookRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientLoginWithFacebookRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AccessToken;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateAccount;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2158[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithFacebookRequest) == 0x000008, "Wrong alignment on FClientLoginWithFacebookRequest");
static_assert(sizeof(FClientLoginWithFacebookRequest) == 0x000050, "Wrong size on FClientLoginWithFacebookRequest");
static_assert(offsetof(FClientLoginWithFacebookRequest, AccessToken) == 0x000008, "Member 'FClientLoginWithFacebookRequest::AccessToken' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookRequest, CreateAccount) == 0x000018, "Member 'FClientLoginWithFacebookRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookRequest, CustomTags) == 0x000020, "Member 'FClientLoginWithFacebookRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookRequest, EncryptedRequest) == 0x000028, "Member 'FClientLoginWithFacebookRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookRequest, InfoRequestParameters) == 0x000038, "Member 'FClientLoginWithFacebookRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookRequest, PlayerSecret) == 0x000040, "Member 'FClientLoginWithFacebookRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetLeaderboardResult
// 0x0028 (0x0030 - 0x0008)
struct FClientGetLeaderboardResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NextReset;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2159[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGetLeaderboardResult) == 0x000008, "Wrong alignment on FClientGetLeaderboardResult");
static_assert(sizeof(FClientGetLeaderboardResult) == 0x000030, "Wrong size on FClientGetLeaderboardResult");
static_assert(offsetof(FClientGetLeaderboardResult, Leaderboard) == 0x000008, "Member 'FClientGetLeaderboardResult::Leaderboard' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardResult, NextReset) == 0x000018, "Member 'FClientGetLeaderboardResult::NextReset' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardResult, Version) == 0x000028, "Member 'FClientGetLeaderboardResult::Version' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetFriendLeaderboardAroundPlayerResult
// 0x0028 (0x0030 - 0x0008)
struct FClientGetFriendLeaderboardAroundPlayerResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NextReset;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215A[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGetFriendLeaderboardAroundPlayerResult) == 0x000008, "Wrong alignment on FClientGetFriendLeaderboardAroundPlayerResult");
static_assert(sizeof(FClientGetFriendLeaderboardAroundPlayerResult) == 0x000030, "Wrong size on FClientGetFriendLeaderboardAroundPlayerResult");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerResult, Leaderboard) == 0x000008, "Member 'FClientGetFriendLeaderboardAroundPlayerResult::Leaderboard' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerResult, NextReset) == 0x000018, "Member 'FClientGetFriendLeaderboardAroundPlayerResult::NextReset' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardAroundPlayerResult, Version) == 0x000028, "Member 'FClientGetFriendLeaderboardAroundPlayerResult::Version' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetFriendsListResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetFriendsListResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Friends;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetFriendsListResult) == 0x000008, "Wrong alignment on FClientGetFriendsListResult");
static_assert(sizeof(FClientGetFriendsListResult) == 0x000018, "Wrong size on FClientGetFriendsListResult");
static_assert(offsetof(FClientGetFriendsListResult, Friends) == 0x000008, "Member 'FClientGetFriendsListResult::Friends' has a wrong offset!");

// ScriptStruct PlayFab.ClientGameServerRegionsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGameServerRegionsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Regions;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGameServerRegionsResult) == 0x000008, "Wrong alignment on FClientGameServerRegionsResult");
static_assert(sizeof(FClientGameServerRegionsResult) == 0x000018, "Wrong size on FClientGameServerRegionsResult");
static_assert(offsetof(FClientGameServerRegionsResult, Regions) == 0x000008, "Member 'FClientGameServerRegionsResult::Regions' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetLeaderboardAroundCharacterResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetLeaderboardAroundCharacterResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetLeaderboardAroundCharacterResult) == 0x000008, "Wrong alignment on FClientGetLeaderboardAroundCharacterResult");
static_assert(sizeof(FClientGetLeaderboardAroundCharacterResult) == 0x000018, "Wrong size on FClientGetLeaderboardAroundCharacterResult");
static_assert(offsetof(FClientGetLeaderboardAroundCharacterResult, Leaderboard) == 0x000008, "Member 'FClientGetLeaderboardAroundCharacterResult::Leaderboard' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetLeaderboardForUsersCharactersResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetLeaderboardForUsersCharactersResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetLeaderboardForUsersCharactersResult) == 0x000008, "Wrong alignment on FClientGetLeaderboardForUsersCharactersResult");
static_assert(sizeof(FClientGetLeaderboardForUsersCharactersResult) == 0x000018, "Wrong size on FClientGetLeaderboardForUsersCharactersResult");
static_assert(offsetof(FClientGetLeaderboardForUsersCharactersResult, Leaderboard) == 0x000008, "Member 'FClientGetLeaderboardForUsersCharactersResult::Leaderboard' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPhotonAuthenticationTokenResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPhotonAuthenticationTokenResult final : public FPlayFabResultCommon
{
public:
	class FString                                 PhotonCustomAuthenticationToken;                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPhotonAuthenticationTokenResult) == 0x000008, "Wrong alignment on FClientGetPhotonAuthenticationTokenResult");
static_assert(sizeof(FClientGetPhotonAuthenticationTokenResult) == 0x000018, "Wrong size on FClientGetPhotonAuthenticationTokenResult");
static_assert(offsetof(FClientGetPhotonAuthenticationTokenResult, PhotonCustomAuthenticationToken) == 0x000008, "Member 'FClientGetPhotonAuthenticationTokenResult::PhotonCustomAuthenticationToken' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptListFunctionsResult
// 0x0010 (0x0018 - 0x0008)
struct FCloudScriptListFunctionsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Functions;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptListFunctionsResult) == 0x000008, "Wrong alignment on FCloudScriptListFunctionsResult");
static_assert(sizeof(FCloudScriptListFunctionsResult) == 0x000018, "Wrong size on FCloudScriptListFunctionsResult");
static_assert(offsetof(FCloudScriptListFunctionsResult, Functions) == 0x000008, "Member 'FCloudScriptListFunctionsResult::Functions' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetMatchResult
// 0x0048 (0x0050 - 0x0008)
struct FMultiplayerGetMatchResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ArrangementString;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RegionPreferences;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ServerDetails;                                     // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetMatchResult) == 0x000008, "Wrong alignment on FMultiplayerGetMatchResult");
static_assert(sizeof(FMultiplayerGetMatchResult) == 0x000050, "Wrong size on FMultiplayerGetMatchResult");
static_assert(offsetof(FMultiplayerGetMatchResult, ArrangementString) == 0x000008, "Member 'FMultiplayerGetMatchResult::ArrangementString' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchResult, MatchID) == 0x000018, "Member 'FMultiplayerGetMatchResult::MatchID' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchResult, Members) == 0x000028, "Member 'FMultiplayerGetMatchResult::Members' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchResult, RegionPreferences) == 0x000038, "Member 'FMultiplayerGetMatchResult::RegionPreferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchResult, ServerDetails) == 0x000048, "Member 'FMultiplayerGetMatchResult::ServerDetails' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerCombinedInfoResult
// 0x0018 (0x0020 - 0x0008)
struct FClientGetPlayerCombinedInfoResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     InfoResultPayload;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerCombinedInfoResult) == 0x000008, "Wrong alignment on FClientGetPlayerCombinedInfoResult");
static_assert(sizeof(FClientGetPlayerCombinedInfoResult) == 0x000020, "Wrong size on FClientGetPlayerCombinedInfoResult");
static_assert(offsetof(FClientGetPlayerCombinedInfoResult, InfoResultPayload) == 0x000008, "Member 'FClientGetPlayerCombinedInfoResult::InfoResultPayload' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerCombinedInfoResult, PlayFabId) == 0x000010, "Member 'FClientGetPlayerCombinedInfoResult::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlockContainerItemRequest
// 0x0048 (0x0050 - 0x0008)
struct FServerUnlockContainerItemRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainerItemId;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUnlockContainerItemRequest) == 0x000008, "Wrong alignment on FServerUnlockContainerItemRequest");
static_assert(sizeof(FServerUnlockContainerItemRequest) == 0x000050, "Wrong size on FServerUnlockContainerItemRequest");
static_assert(offsetof(FServerUnlockContainerItemRequest, CatalogVersion) == 0x000008, "Member 'FServerUnlockContainerItemRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerItemRequest, CharacterId) == 0x000018, "Member 'FServerUnlockContainerItemRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerItemRequest, ContainerItemId) == 0x000028, "Member 'FServerUnlockContainerItemRequest::ContainerItemId' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerItemRequest, CustomTags) == 0x000038, "Member 'FServerUnlockContainerItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerItemRequest, PlayFabId) == 0x000040, "Member 'FServerUnlockContainerItemRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerProfileResult
// 0x0008 (0x0010 - 0x0008)
struct FClientGetPlayerProfileResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     PlayerProfile;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerProfileResult) == 0x000008, "Wrong alignment on FClientGetPlayerProfileResult");
static_assert(sizeof(FClientGetPlayerProfileResult) == 0x000010, "Wrong size on FClientGetPlayerProfileResult");
static_assert(offsetof(FClientGetPlayerProfileResult, PlayerProfile) == 0x000008, "Member 'FClientGetPlayerProfileResult::PlayerProfile' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetInventoryItemsRequest
// 0x0048 (0x0050 - 0x0008)
struct FEconomyGetInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContinuationToken;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215B[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyGetInventoryItemsRequest");
static_assert(sizeof(FEconomyGetInventoryItemsRequest) == 0x000050, "Wrong size on FEconomyGetInventoryItemsRequest");
static_assert(offsetof(FEconomyGetInventoryItemsRequest, CollectionId) == 0x000008, "Member 'FEconomyGetInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryItemsRequest, ContinuationToken) == 0x000018, "Member 'FEconomyGetInventoryItemsRequest::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryItemsRequest, Count) == 0x000028, "Member 'FEconomyGetInventoryItemsRequest::Count' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryItemsRequest, CustomTags) == 0x000030, "Member 'FEconomyGetInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryItemsRequest, Entity) == 0x000038, "Member 'FEconomyGetInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryItemsRequest, Filter) == 0x000040, "Member 'FEconomyGetInventoryItemsRequest::Filter' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListAssetSummariesRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerListAssetSummariesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListAssetSummariesRequest) == 0x000008, "Wrong alignment on FMultiplayerListAssetSummariesRequest");
static_assert(sizeof(FMultiplayerListAssetSummariesRequest) == 0x000028, "Wrong size on FMultiplayerListAssetSummariesRequest");
static_assert(offsetof(FMultiplayerListAssetSummariesRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListAssetSummariesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListAssetSummariesRequest, PageSize) == 0x000010, "Member 'FMultiplayerListAssetSummariesRequest::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListAssetSummariesRequest, SkipToken) == 0x000018, "Member 'FMultiplayerListAssetSummariesRequest::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerSegmentsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayerSegmentsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Segments;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerSegmentsResult) == 0x000008, "Wrong alignment on FClientGetPlayerSegmentsResult");
static_assert(sizeof(FClientGetPlayerSegmentsResult) == 0x000018, "Wrong size on FClientGetPlayerSegmentsResult");
static_assert(offsetof(FClientGetPlayerSegmentsResult, Segments) == 0x000008, "Member 'FClientGetPlayerSegmentsResult::Segments' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerStatisticsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayerStatisticsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Statistics;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerStatisticsResult) == 0x000008, "Wrong alignment on FClientGetPlayerStatisticsResult");
static_assert(sizeof(FClientGetPlayerStatisticsResult) == 0x000018, "Wrong size on FClientGetPlayerStatisticsResult");
static_assert(offsetof(FClientGetPlayerStatisticsResult, Statistics) == 0x000008, "Member 'FClientGetPlayerStatisticsResult::Statistics' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerStatisticVersionsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayerStatisticVersionsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             StatisticVersions;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerStatisticVersionsResult) == 0x000008, "Wrong alignment on FClientGetPlayerStatisticVersionsResult");
static_assert(sizeof(FClientGetPlayerStatisticVersionsResult) == 0x000018, "Wrong size on FClientGetPlayerStatisticVersionsResult");
static_assert(offsetof(FClientGetPlayerStatisticVersionsResult, StatisticVersions) == 0x000008, "Member 'FClientGetPlayerStatisticVersionsResult::StatisticVersions' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerTagsResult
// 0x0020 (0x0028 - 0x0008)
struct FClientGetPlayerTagsResult final : public FPlayFabResultCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tags;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerTagsResult) == 0x000008, "Wrong alignment on FClientGetPlayerTagsResult");
static_assert(sizeof(FClientGetPlayerTagsResult) == 0x000028, "Wrong size on FClientGetPlayerTagsResult");
static_assert(offsetof(FClientGetPlayerTagsResult, PlayFabId) == 0x000008, "Member 'FClientGetPlayerTagsResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerTagsResult, Tags) == 0x000018, "Member 'FClientGetPlayerTagsResult::Tags' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerTradesResponse
// 0x0020 (0x0028 - 0x0008)
struct FClientGetPlayerTradesResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             AcceptedTrades;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             OpenedTrades;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerTradesResponse) == 0x000008, "Wrong alignment on FClientGetPlayerTradesResponse");
static_assert(sizeof(FClientGetPlayerTradesResponse) == 0x000028, "Wrong size on FClientGetPlayerTradesResponse");
static_assert(offsetof(FClientGetPlayerTradesResponse, AcceptedTrades) == 0x000008, "Member 'FClientGetPlayerTradesResponse::AcceptedTrades' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerTradesResponse, OpenedTrades) == 0x000018, "Member 'FClientGetPlayerTradesResponse::OpenedTrades' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerEmptyResponse
// 0x0000 (0x0008 - 0x0008)
struct FMultiplayerEmptyResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FMultiplayerEmptyResponse) == 0x000008, "Wrong alignment on FMultiplayerEmptyResponse");
static_assert(sizeof(FMultiplayerEmptyResponse) == 0x000008, "Wrong size on FMultiplayerEmptyResponse");

// ScriptStruct PlayFab.ProfilesGetTitlePlayersFromProviderIDsResponse
// 0x0008 (0x0010 - 0x0008)
struct FProfilesGetTitlePlayersFromProviderIDsResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     TitlePlayerAccounts;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetTitlePlayersFromProviderIDsResponse) == 0x000008, "Wrong alignment on FProfilesGetTitlePlayersFromProviderIDsResponse");
static_assert(sizeof(FProfilesGetTitlePlayersFromProviderIDsResponse) == 0x000010, "Wrong size on FProfilesGetTitlePlayersFromProviderIDsResponse");
static_assert(offsetof(FProfilesGetTitlePlayersFromProviderIDsResponse, TitlePlayerAccounts) == 0x000008, "Member 'FProfilesGetTitlePlayersFromProviderIDsResponse::TitlePlayerAccounts' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromFacebookIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromFacebookIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromFacebookIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromFacebookIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromFacebookIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromFacebookIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromFacebookIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromFacebookIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGameCenterIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromGameCenterIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromGameCenterIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromGameCenterIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromGameCenterIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromGameCenterIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromGameCenterIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromGameCenterIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerStatisticsResult
// 0x0020 (0x0028 - 0x0008)
struct FServerGetPlayerStatisticsResult final : public FPlayFabResultCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Statistics;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerStatisticsResult) == 0x000008, "Wrong alignment on FServerGetPlayerStatisticsResult");
static_assert(sizeof(FServerGetPlayerStatisticsResult) == 0x000028, "Wrong size on FServerGetPlayerStatisticsResult");
static_assert(offsetof(FServerGetPlayerStatisticsResult, PlayFabId) == 0x000008, "Member 'FServerGetPlayerStatisticsResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerStatisticsResult, Statistics) == 0x000018, "Member 'FServerGetPlayerStatisticsResult::Statistics' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGenericIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromGenericIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromGenericIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromGenericIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromGenericIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromGenericIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromGenericIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromGenericIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGoogleIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromGoogleIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromGoogleIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromGoogleIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromGoogleIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromGoogleIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromGoogleIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromGoogleIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromNintendoServiceAccountIdsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromNintendoServiceAccountIdsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromNintendoServiceAccountIdsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromNintendoServiceAccountIdsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromNintendoServiceAccountIdsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromNintendoServiceAccountIdsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromNintendoServiceAccountIdsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromNintendoServiceAccountIdsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromPSNAccountIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromPSNAccountIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromPSNAccountIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromPSNAccountIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromPSNAccountIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromPSNAccountIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromPSNAccountIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromPSNAccountIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdateCharacterDataRequest
// 0x0038 (0x0040 - 0x0008)
struct FClientUpdateCharacterDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserDataPermission                           Permission;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215D[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientUpdateCharacterDataRequest) == 0x000008, "Wrong alignment on FClientUpdateCharacterDataRequest");
static_assert(sizeof(FClientUpdateCharacterDataRequest) == 0x000040, "Wrong size on FClientUpdateCharacterDataRequest");
static_assert(offsetof(FClientUpdateCharacterDataRequest, CharacterId) == 0x000008, "Member 'FClientUpdateCharacterDataRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientUpdateCharacterDataRequest, CustomTags) == 0x000018, "Member 'FClientUpdateCharacterDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientUpdateCharacterDataRequest, Data) == 0x000020, "Member 'FClientUpdateCharacterDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FClientUpdateCharacterDataRequest, KeysToRemove) == 0x000028, "Member 'FClientUpdateCharacterDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FClientUpdateCharacterDataRequest, Permission) == 0x000038, "Member 'FClientUpdateCharacterDataRequest::Permission' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListMatchmakingTicketsForPlayerResult
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerListMatchmakingTicketsForPlayerResult final : public FPlayFabResultCommon
{
public:
	class FString                                 TicketIds;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListMatchmakingTicketsForPlayerResult) == 0x000008, "Wrong alignment on FMultiplayerListMatchmakingTicketsForPlayerResult");
static_assert(sizeof(FMultiplayerListMatchmakingTicketsForPlayerResult) == 0x000018, "Wrong size on FMultiplayerListMatchmakingTicketsForPlayerResult");
static_assert(offsetof(FMultiplayerListMatchmakingTicketsForPlayerResult, TicketIds) == 0x000008, "Member 'FMultiplayerListMatchmakingTicketsForPlayerResult::TicketIds' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromSteamIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromSteamIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromSteamIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromSteamIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromSteamIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromSteamIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromSteamIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromSteamIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdateAvatarUrlRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientUpdateAvatarUrlRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ImageUrl;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUpdateAvatarUrlRequest) == 0x000008, "Wrong alignment on FClientUpdateAvatarUrlRequest");
static_assert(sizeof(FClientUpdateAvatarUrlRequest) == 0x000018, "Wrong size on FClientUpdateAvatarUrlRequest");
static_assert(offsetof(FClientUpdateAvatarUrlRequest, ImageUrl) == 0x000008, "Member 'FClientUpdateAvatarUrlRequest::ImageUrl' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromTwitchIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromTwitchIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromTwitchIDsResult) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromTwitchIDsResult");
static_assert(sizeof(FClientGetPlayFabIDsFromTwitchIDsResult) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromTwitchIDsResult");
static_assert(offsetof(FClientGetPlayFabIDsFromTwitchIDsResult, Data) == 0x000008, "Member 'FClientGetPlayFabIDsFromTwitchIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateLobbyResult
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerCreateLobbyResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ConnectionString;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateLobbyResult) == 0x000008, "Wrong alignment on FMultiplayerCreateLobbyResult");
static_assert(sizeof(FMultiplayerCreateLobbyResult) == 0x000028, "Wrong size on FMultiplayerCreateLobbyResult");
static_assert(offsetof(FMultiplayerCreateLobbyResult, ConnectionString) == 0x000008, "Member 'FMultiplayerCreateLobbyResult::ConnectionString' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateLobbyResult, LobbyId) == 0x000018, "Member 'FMultiplayerCreateLobbyResult::LobbyId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCharacterStatisticsResult
// 0x0028 (0x0030 - 0x0008)
struct FServerGetCharacterStatisticsResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CharacterStatistics;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCharacterStatisticsResult) == 0x000008, "Wrong alignment on FServerGetCharacterStatisticsResult");
static_assert(sizeof(FServerGetCharacterStatisticsResult) == 0x000030, "Wrong size on FServerGetCharacterStatisticsResult");
static_assert(offsetof(FServerGetCharacterStatisticsResult, CharacterId) == 0x000008, "Member 'FServerGetCharacterStatisticsResult::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterStatisticsResult, CharacterStatistics) == 0x000018, "Member 'FServerGetCharacterStatisticsResult::CharacterStatistics' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterStatisticsResult, PlayFabId) == 0x000020, "Member 'FServerGetCharacterStatisticsResult::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetSharedGroupDataResult
// 0x0018 (0x0020 - 0x0008)
struct FClientGetSharedGroupDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Members;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetSharedGroupDataResult) == 0x000008, "Wrong alignment on FClientGetSharedGroupDataResult");
static_assert(sizeof(FClientGetSharedGroupDataResult) == 0x000020, "Wrong size on FClientGetSharedGroupDataResult");
static_assert(offsetof(FClientGetSharedGroupDataResult, Data) == 0x000008, "Member 'FClientGetSharedGroupDataResult::Data' has a wrong offset!");
static_assert(offsetof(FClientGetSharedGroupDataResult, Members) == 0x000010, "Member 'FClientGetSharedGroupDataResult::Members' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkSteamAccountRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkSteamAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkSteamAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkSteamAccountRequest");
static_assert(sizeof(FClientUnlinkSteamAccountRequest) == 0x000010, "Wrong size on FClientUnlinkSteamAccountRequest");
static_assert(offsetof(FClientUnlinkSteamAccountRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkSteamAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetStoreItemsResult
// 0x0040 (0x0048 - 0x0008)
struct FClientGetStoreItemsResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MarketingData;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPfSourceType                                 Source;                                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Store;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetStoreItemsResult) == 0x000008, "Wrong alignment on FClientGetStoreItemsResult");
static_assert(sizeof(FClientGetStoreItemsResult) == 0x000048, "Wrong size on FClientGetStoreItemsResult");
static_assert(offsetof(FClientGetStoreItemsResult, CatalogVersion) == 0x000008, "Member 'FClientGetStoreItemsResult::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientGetStoreItemsResult, MarketingData) == 0x000018, "Member 'FClientGetStoreItemsResult::MarketingData' has a wrong offset!");
static_assert(offsetof(FClientGetStoreItemsResult, Source) == 0x000020, "Member 'FClientGetStoreItemsResult::Source' has a wrong offset!");
static_assert(offsetof(FClientGetStoreItemsResult, Store) == 0x000028, "Member 'FClientGetStoreItemsResult::Store' has a wrong offset!");
static_assert(offsetof(FClientGetStoreItemsResult, StoreId) == 0x000038, "Member 'FClientGetStoreItemsResult::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateServerMatchmakingTicketRequest
// 0x0030 (0x0038 - 0x0008)
struct FMultiplayerCreateServerMatchmakingTicketRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiveUpAfterSeconds;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateServerMatchmakingTicketRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateServerMatchmakingTicketRequest");
static_assert(sizeof(FMultiplayerCreateServerMatchmakingTicketRequest) == 0x000038, "Wrong size on FMultiplayerCreateServerMatchmakingTicketRequest");
static_assert(offsetof(FMultiplayerCreateServerMatchmakingTicketRequest, CustomTags) == 0x000008, "Member 'FMultiplayerCreateServerMatchmakingTicketRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateServerMatchmakingTicketRequest, GiveUpAfterSeconds) == 0x000010, "Member 'FMultiplayerCreateServerMatchmakingTicketRequest::GiveUpAfterSeconds' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateServerMatchmakingTicketRequest, Members) == 0x000018, "Member 'FMultiplayerCreateServerMatchmakingTicketRequest::Members' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateServerMatchmakingTicketRequest, QueueName) == 0x000028, "Member 'FMultiplayerCreateServerMatchmakingTicketRequest::QueueName' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetServerCustomIDsFromPlayFabIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetServerCustomIDsFromPlayFabIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetServerCustomIDsFromPlayFabIDsResult) == 0x000008, "Wrong alignment on FServerGetServerCustomIDsFromPlayFabIDsResult");
static_assert(sizeof(FServerGetServerCustomIDsFromPlayFabIDsResult) == 0x000018, "Wrong size on FServerGetServerCustomIDsFromPlayFabIDsResult");
static_assert(offsetof(FServerGetServerCustomIDsFromPlayFabIDsResult, Data) == 0x000008, "Member 'FServerGetServerCustomIDsFromPlayFabIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetTimeResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetTimeResult final : public FPlayFabResultCommon
{
public:
	class FString                                 Time;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetTimeResult) == 0x000008, "Wrong alignment on FClientGetTimeResult");
static_assert(sizeof(FClientGetTimeResult) == 0x000018, "Wrong size on FClientGetTimeResult");
static_assert(offsetof(FClientGetTimeResult, Time) == 0x000008, "Member 'FClientGetTimeResult::Time' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetTradeStatusResponse
// 0x0008 (0x0010 - 0x0008)
struct FClientGetTradeStatusResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Trade;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetTradeStatusResponse) == 0x000008, "Wrong alignment on FClientGetTradeStatusResponse");
static_assert(sizeof(FClientGetTradeStatusResponse) == 0x000010, "Wrong size on FClientGetTradeStatusResponse");
static_assert(offsetof(FClientGetTradeStatusResponse, Trade) == 0x000008, "Member 'FClientGetTradeStatusResponse::Trade' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetUserDataResult
// 0x0010 (0x0018 - 0x0008)
struct FClientGetUserDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataVersion;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2160[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGetUserDataResult) == 0x000008, "Wrong alignment on FClientGetUserDataResult");
static_assert(sizeof(FClientGetUserDataResult) == 0x000018, "Wrong size on FClientGetUserDataResult");
static_assert(offsetof(FClientGetUserDataResult, Data) == 0x000008, "Member 'FClientGetUserDataResult::Data' has a wrong offset!");
static_assert(offsetof(FClientGetUserDataResult, DataVersion) == 0x000010, "Member 'FClientGetUserDataResult::DataVersion' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPublisherDataResult
// 0x0008 (0x0010 - 0x0008)
struct FServerGetPublisherDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPublisherDataResult) == 0x000008, "Wrong alignment on FServerGetPublisherDataResult");
static_assert(sizeof(FServerGetPublisherDataResult) == 0x000010, "Wrong size on FServerGetPublisherDataResult");
static_assert(offsetof(FServerGetPublisherDataResult, Data) == 0x000008, "Member 'FServerGetPublisherDataResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetUserInventoryResult
// 0x0020 (0x0028 - 0x0008)
struct FClientGetUserInventoryResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Inventory;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrency;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrencyRechargeTimes;                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetUserInventoryResult) == 0x000008, "Wrong alignment on FClientGetUserInventoryResult");
static_assert(sizeof(FClientGetUserInventoryResult) == 0x000028, "Wrong size on FClientGetUserInventoryResult");
static_assert(offsetof(FClientGetUserInventoryResult, Inventory) == 0x000008, "Member 'FClientGetUserInventoryResult::Inventory' has a wrong offset!");
static_assert(offsetof(FClientGetUserInventoryResult, VirtualCurrency) == 0x000018, "Member 'FClientGetUserInventoryResult::VirtualCurrency' has a wrong offset!");
static_assert(offsetof(FClientGetUserInventoryResult, VirtualCurrencyRechargeTimes) == 0x000020, "Member 'FClientGetUserInventoryResult::VirtualCurrencyRechargeTimes' has a wrong offset!");

// ScriptStruct PlayFab.ClientGrantCharacterToUserResult
// 0x0028 (0x0030 - 0x0008)
struct FClientGrantCharacterToUserResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterType;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2161[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGrantCharacterToUserResult) == 0x000008, "Wrong alignment on FClientGrantCharacterToUserResult");
static_assert(sizeof(FClientGrantCharacterToUserResult) == 0x000030, "Wrong size on FClientGrantCharacterToUserResult");
static_assert(offsetof(FClientGrantCharacterToUserResult, CharacterId) == 0x000008, "Member 'FClientGrantCharacterToUserResult::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientGrantCharacterToUserResult, CharacterType) == 0x000018, "Member 'FClientGrantCharacterToUserResult::CharacterType' has a wrong offset!");
static_assert(offsetof(FClientGrantCharacterToUserResult, Result) == 0x000028, "Member 'FClientGrantCharacterToUserResult::Result' has a wrong offset!");

// ScriptStruct PlayFab.InsightsInsightsSetStorageRetentionRequest
// 0x0010 (0x0018 - 0x0008)
struct FInsightsInsightsSetStorageRetentionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RetentionDays;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2162[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInsightsInsightsSetStorageRetentionRequest) == 0x000008, "Wrong alignment on FInsightsInsightsSetStorageRetentionRequest");
static_assert(sizeof(FInsightsInsightsSetStorageRetentionRequest) == 0x000018, "Wrong size on FInsightsInsightsSetStorageRetentionRequest");
static_assert(offsetof(FInsightsInsightsSetStorageRetentionRequest, CustomTags) == 0x000008, "Member 'FInsightsInsightsSetStorageRetentionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsSetStorageRetentionRequest, RetentionDays) == 0x000010, "Member 'FInsightsInsightsSetStorageRetentionRequest::RetentionDays' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetContentDownloadUrlRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientGetContentDownloadUrlRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 HttpMethod;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ThruCDN;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2163[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGetContentDownloadUrlRequest) == 0x000008, "Wrong alignment on FClientGetContentDownloadUrlRequest");
static_assert(sizeof(FClientGetContentDownloadUrlRequest) == 0x000030, "Wrong size on FClientGetContentDownloadUrlRequest");
static_assert(offsetof(FClientGetContentDownloadUrlRequest, HttpMethod) == 0x000008, "Member 'FClientGetContentDownloadUrlRequest::HttpMethod' has a wrong offset!");
static_assert(offsetof(FClientGetContentDownloadUrlRequest, Key) == 0x000018, "Member 'FClientGetContentDownloadUrlRequest::Key' has a wrong offset!");
static_assert(offsetof(FClientGetContentDownloadUrlRequest, ThruCDN) == 0x000028, "Member 'FClientGetContentDownloadUrlRequest::ThruCDN' has a wrong offset!");

// ScriptStruct PlayFab.ClientRefreshPSNAuthTokenRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientRefreshPSNAuthTokenRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AuthCode;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IssuerId;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2164[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RedirectUri;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRefreshPSNAuthTokenRequest) == 0x000008, "Wrong alignment on FClientRefreshPSNAuthTokenRequest");
static_assert(sizeof(FClientRefreshPSNAuthTokenRequest) == 0x000030, "Wrong size on FClientRefreshPSNAuthTokenRequest");
static_assert(offsetof(FClientRefreshPSNAuthTokenRequest, AuthCode) == 0x000008, "Member 'FClientRefreshPSNAuthTokenRequest::AuthCode' has a wrong offset!");
static_assert(offsetof(FClientRefreshPSNAuthTokenRequest, IssuerId) == 0x000018, "Member 'FClientRefreshPSNAuthTokenRequest::IssuerId' has a wrong offset!");
static_assert(offsetof(FClientRefreshPSNAuthTokenRequest, RedirectUri) == 0x000020, "Member 'FClientRefreshPSNAuthTokenRequest::RedirectUri' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkAndroidDeviceIDResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkAndroidDeviceIDResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkAndroidDeviceIDResult) == 0x000008, "Wrong alignment on FClientLinkAndroidDeviceIDResult");
static_assert(sizeof(FClientLinkAndroidDeviceIDResult) == 0x000008, "Wrong size on FClientLinkAndroidDeviceIDResult");

// ScriptStruct PlayFab.ClientEmptyResult
// 0x0000 (0x0008 - 0x0008)
struct FClientEmptyResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientEmptyResult) == 0x000008, "Wrong alignment on FClientEmptyResult");
static_assert(sizeof(FClientEmptyResult) == 0x000008, "Wrong size on FClientEmptyResult");

// ScriptStruct PlayFab.ClientLinkCustomIDResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkCustomIDResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkCustomIDResult) == 0x000008, "Wrong alignment on FClientLinkCustomIDResult");
static_assert(sizeof(FClientLinkCustomIDResult) == 0x000008, "Wrong size on FClientLinkCustomIDResult");

// ScriptStruct PlayFab.ClientPayForPurchaseRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientPayForPurchaseRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Currency;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderID;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProviderName;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProviderTransactionId;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientPayForPurchaseRequest) == 0x000008, "Wrong alignment on FClientPayForPurchaseRequest");
static_assert(sizeof(FClientPayForPurchaseRequest) == 0x000050, "Wrong size on FClientPayForPurchaseRequest");
static_assert(offsetof(FClientPayForPurchaseRequest, Currency) == 0x000008, "Member 'FClientPayForPurchaseRequest::Currency' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseRequest, CustomTags) == 0x000018, "Member 'FClientPayForPurchaseRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseRequest, OrderID) == 0x000020, "Member 'FClientPayForPurchaseRequest::OrderID' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseRequest, ProviderName) == 0x000030, "Member 'FClientPayForPurchaseRequest::ProviderName' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseRequest, ProviderTransactionId) == 0x000040, "Member 'FClientPayForPurchaseRequest::ProviderTransactionId' has a wrong offset!");

// ScriptStruct PlayFab.DataGetObjectsResponse
// 0x0018 (0x0020 - 0x0008)
struct FDataGetObjectsResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Entity;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Objects;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2165[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataGetObjectsResponse) == 0x000008, "Wrong alignment on FDataGetObjectsResponse");
static_assert(sizeof(FDataGetObjectsResponse) == 0x000020, "Wrong size on FDataGetObjectsResponse");
static_assert(offsetof(FDataGetObjectsResponse, Entity) == 0x000008, "Member 'FDataGetObjectsResponse::Entity' has a wrong offset!");
static_assert(offsetof(FDataGetObjectsResponse, Objects) == 0x000010, "Member 'FDataGetObjectsResponse::Objects' has a wrong offset!");
static_assert(offsetof(FDataGetObjectsResponse, ProfileVersion) == 0x000018, "Member 'FDataGetObjectsResponse::ProfileVersion' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkFacebookAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkFacebookAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkFacebookAccountResult) == 0x000008, "Wrong alignment on FClientLinkFacebookAccountResult");
static_assert(sizeof(FClientLinkFacebookAccountResult) == 0x000008, "Wrong size on FClientLinkFacebookAccountResult");

// ScriptStruct PlayFab.ClientLinkFacebookInstantGamesIdResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkFacebookInstantGamesIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkFacebookInstantGamesIdResult) == 0x000008, "Wrong alignment on FClientLinkFacebookInstantGamesIdResult");
static_assert(sizeof(FClientLinkFacebookInstantGamesIdResult) == 0x000008, "Wrong size on FClientLinkFacebookInstantGamesIdResult");

// ScriptStruct PlayFab.ClientLinkGameCenterAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkGameCenterAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkGameCenterAccountResult) == 0x000008, "Wrong alignment on FClientLinkGameCenterAccountResult");
static_assert(sizeof(FClientLinkGameCenterAccountResult) == 0x000008, "Wrong size on FClientLinkGameCenterAccountResult");

// ScriptStruct PlayFab.ClientLinkGoogleAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkGoogleAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkGoogleAccountResult) == 0x000008, "Wrong alignment on FClientLinkGoogleAccountResult");
static_assert(sizeof(FClientLinkGoogleAccountResult) == 0x000008, "Wrong size on FClientLinkGoogleAccountResult");

// ScriptStruct PlayFab.ServerSetGameServerInstanceDataResult
// 0x0000 (0x0008 - 0x0008)
struct FServerSetGameServerInstanceDataResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerSetGameServerInstanceDataResult) == 0x000008, "Wrong alignment on FServerSetGameServerInstanceDataResult");
static_assert(sizeof(FServerSetGameServerInstanceDataResult) == 0x000008, "Wrong size on FServerSetGameServerInstanceDataResult");

// ScriptStruct PlayFab.ServerGetTitleNewsRequest
// 0x0008 (0x0010 - 0x0008)
struct FServerGetTitleNewsRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2166[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerGetTitleNewsRequest) == 0x000008, "Wrong alignment on FServerGetTitleNewsRequest");
static_assert(sizeof(FServerGetTitleNewsRequest) == 0x000010, "Wrong size on FServerGetTitleNewsRequest");
static_assert(offsetof(FServerGetTitleNewsRequest, Count) == 0x000008, "Member 'FServerGetTitleNewsRequest::Count' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkGooglePlayGamesServicesAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkGooglePlayGamesServicesAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkGooglePlayGamesServicesAccountResult) == 0x000008, "Wrong alignment on FClientLinkGooglePlayGamesServicesAccountResult");
static_assert(sizeof(FClientLinkGooglePlayGamesServicesAccountResult) == 0x000008, "Wrong size on FClientLinkGooglePlayGamesServicesAccountResult");

// ScriptStruct PlayFab.ClientLinkIOSDeviceIDResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkIOSDeviceIDResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkIOSDeviceIDResult) == 0x000008, "Wrong alignment on FClientLinkIOSDeviceIDResult");
static_assert(sizeof(FClientLinkIOSDeviceIDResult) == 0x000008, "Wrong size on FClientLinkIOSDeviceIDResult");

// ScriptStruct PlayFab.ClientLinkKongregateAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkKongregateAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkKongregateAccountResult) == 0x000008, "Wrong alignment on FClientLinkKongregateAccountResult");
static_assert(sizeof(FClientLinkKongregateAccountResult) == 0x000008, "Wrong size on FClientLinkKongregateAccountResult");

// ScriptStruct PlayFab.ClientLinkPSNAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkPSNAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkPSNAccountResult) == 0x000008, "Wrong alignment on FClientLinkPSNAccountResult");
static_assert(sizeof(FClientLinkPSNAccountResult) == 0x000008, "Wrong size on FClientLinkPSNAccountResult");

// ScriptStruct PlayFab.ServerConsumeItemRequest
// 0x0040 (0x0048 - 0x0008)
struct FServerConsumeItemRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumeCount;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2167[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemInstanceId;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerConsumeItemRequest) == 0x000008, "Wrong alignment on FServerConsumeItemRequest");
static_assert(sizeof(FServerConsumeItemRequest) == 0x000048, "Wrong size on FServerConsumeItemRequest");
static_assert(offsetof(FServerConsumeItemRequest, CharacterId) == 0x000008, "Member 'FServerConsumeItemRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerConsumeItemRequest, ConsumeCount) == 0x000018, "Member 'FServerConsumeItemRequest::ConsumeCount' has a wrong offset!");
static_assert(offsetof(FServerConsumeItemRequest, CustomTags) == 0x000020, "Member 'FServerConsumeItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerConsumeItemRequest, ItemInstanceId) == 0x000028, "Member 'FServerConsumeItemRequest::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerConsumeItemRequest, PlayFabId) == 0x000038, "Member 'FServerConsumeItemRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdateUserTitleDisplayNameRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientUpdateUserTitleDisplayNameRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUpdateUserTitleDisplayNameRequest) == 0x000008, "Wrong alignment on FClientUpdateUserTitleDisplayNameRequest");
static_assert(sizeof(FClientUpdateUserTitleDisplayNameRequest) == 0x000020, "Wrong size on FClientUpdateUserTitleDisplayNameRequest");
static_assert(offsetof(FClientUpdateUserTitleDisplayNameRequest, CustomTags) == 0x000008, "Member 'FClientUpdateUserTitleDisplayNameRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientUpdateUserTitleDisplayNameRequest, DisplayName) == 0x000010, "Member 'FClientUpdateUserTitleDisplayNameRequest::DisplayName' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkSteamAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkSteamAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkSteamAccountResult) == 0x000008, "Wrong alignment on FClientLinkSteamAccountResult");
static_assert(sizeof(FClientLinkSteamAccountResult) == 0x000008, "Wrong size on FClientLinkSteamAccountResult");

// ScriptStruct PlayFab.ClientLoginWithCustomIDRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientLoginWithCustomIDRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2168[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithCustomIDRequest) == 0x000008, "Wrong alignment on FClientLoginWithCustomIDRequest");
static_assert(sizeof(FClientLoginWithCustomIDRequest) == 0x000050, "Wrong size on FClientLoginWithCustomIDRequest");
static_assert(offsetof(FClientLoginWithCustomIDRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithCustomIDRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithCustomIDRequest, CustomId) == 0x000010, "Member 'FClientLoginWithCustomIDRequest::CustomId' has a wrong offset!");
static_assert(offsetof(FClientLoginWithCustomIDRequest, CustomTags) == 0x000020, "Member 'FClientLoginWithCustomIDRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithCustomIDRequest, EncryptedRequest) == 0x000028, "Member 'FClientLoginWithCustomIDRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithCustomIDRequest, InfoRequestParameters) == 0x000038, "Member 'FClientLoginWithCustomIDRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithCustomIDRequest, PlayerSecret) == 0x000040, "Member 'FClientLoginWithCustomIDRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkTwitchAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkTwitchAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkTwitchAccountResult) == 0x000008, "Wrong alignment on FClientLinkTwitchAccountResult");
static_assert(sizeof(FClientLinkTwitchAccountResult) == 0x000008, "Wrong size on FClientLinkTwitchAccountResult");

// ScriptStruct PlayFab.MultiplayerGetTitleMultiplayerServersQuotaChangeResponse
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Change;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse) == 0x000008, "Wrong alignment on FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse");
static_assert(sizeof(FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse) == 0x000010, "Wrong size on FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse");
static_assert(offsetof(FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse, Change) == 0x000008, "Member 'FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse::Change' has a wrong offset!");

// ScriptStruct PlayFab.ClientExecuteCloudScriptRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientExecuteCloudScriptRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionParameter;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GeneratePlayStreamEvent;                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudScriptRevisionOption                    RevisionSelection;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2169[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpecificRevision;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientExecuteCloudScriptRequest) == 0x000008, "Wrong alignment on FClientExecuteCloudScriptRequest");
static_assert(sizeof(FClientExecuteCloudScriptRequest) == 0x000030, "Wrong size on FClientExecuteCloudScriptRequest");
static_assert(offsetof(FClientExecuteCloudScriptRequest, CustomTags) == 0x000008, "Member 'FClientExecuteCloudScriptRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptRequest, FunctionName) == 0x000010, "Member 'FClientExecuteCloudScriptRequest::FunctionName' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptRequest, FunctionParameter) == 0x000020, "Member 'FClientExecuteCloudScriptRequest::FunctionParameter' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptRequest, GeneratePlayStreamEvent) == 0x000028, "Member 'FClientExecuteCloudScriptRequest::GeneratePlayStreamEvent' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptRequest, RevisionSelection) == 0x000029, "Member 'FClientExecuteCloudScriptRequest::RevisionSelection' has a wrong offset!");
static_assert(offsetof(FClientExecuteCloudScriptRequest, SpecificRevision) == 0x00002C, "Member 'FClientExecuteCloudScriptRequest::SpecificRevision' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkXboxAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientLinkXboxAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientLinkXboxAccountResult) == 0x000008, "Wrong alignment on FClientLinkXboxAccountResult");
static_assert(sizeof(FClientLinkXboxAccountResult) == 0x000008, "Wrong size on FClientLinkXboxAccountResult");

// ScriptStruct PlayFab.ClientLoginWithIOSDeviceIDRequest
// 0x0068 (0x0070 - 0x0008)
struct FClientLoginWithIOSDeviceIDRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216A[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceID;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceModel;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OS;                                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithIOSDeviceIDRequest) == 0x000008, "Wrong alignment on FClientLoginWithIOSDeviceIDRequest");
static_assert(sizeof(FClientLoginWithIOSDeviceIDRequest) == 0x000070, "Wrong size on FClientLoginWithIOSDeviceIDRequest");
static_assert(offsetof(FClientLoginWithIOSDeviceIDRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithIOSDeviceIDRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithIOSDeviceIDRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithIOSDeviceIDRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithIOSDeviceIDRequest, DeviceID) == 0x000018, "Member 'FClientLoginWithIOSDeviceIDRequest::DeviceID' has a wrong offset!");
static_assert(offsetof(FClientLoginWithIOSDeviceIDRequest, DeviceModel) == 0x000028, "Member 'FClientLoginWithIOSDeviceIDRequest::DeviceModel' has a wrong offset!");
static_assert(offsetof(FClientLoginWithIOSDeviceIDRequest, EncryptedRequest) == 0x000038, "Member 'FClientLoginWithIOSDeviceIDRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithIOSDeviceIDRequest, InfoRequestParameters) == 0x000048, "Member 'FClientLoginWithIOSDeviceIDRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithIOSDeviceIDRequest, OS) == 0x000050, "Member 'FClientLoginWithIOSDeviceIDRequest::OS' has a wrong offset!");
static_assert(offsetof(FClientLoginWithIOSDeviceIDRequest, PlayerSecret) == 0x000060, "Member 'FClientLoginWithIOSDeviceIDRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.ServerGrantItemsToUserRequest
// 0x0048 (0x0050 - 0x0008)
struct FServerGrantItemsToUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Annotation;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CatalogVersion;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemIds;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGrantItemsToUserRequest) == 0x000008, "Wrong alignment on FServerGrantItemsToUserRequest");
static_assert(sizeof(FServerGrantItemsToUserRequest) == 0x000050, "Wrong size on FServerGrantItemsToUserRequest");
static_assert(offsetof(FServerGrantItemsToUserRequest, Annotation) == 0x000008, "Member 'FServerGrantItemsToUserRequest::Annotation' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToUserRequest, CatalogVersion) == 0x000018, "Member 'FServerGrantItemsToUserRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToUserRequest, CustomTags) == 0x000028, "Member 'FServerGrantItemsToUserRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToUserRequest, ItemIds) == 0x000030, "Member 'FServerGrantItemsToUserRequest::ItemIds' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToUserRequest, PlayFabId) == 0x000040, "Member 'FServerGrantItemsToUserRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginResult
// 0x0058 (0x0068 - 0x0010)
struct FClientLoginResult final : public FPlayFabLoginResultCommon
{
public:
	class UPlayFabJsonObject*                     EntityToken;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoResultPayload;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastLoginTime;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewlyCreated;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216B[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionTicket;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     SettingsForUser;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     TreatmentAssignment;                               // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginResult) == 0x000008, "Wrong alignment on FClientLoginResult");
static_assert(sizeof(FClientLoginResult) == 0x000068, "Wrong size on FClientLoginResult");
static_assert(offsetof(FClientLoginResult, EntityToken) == 0x000010, "Member 'FClientLoginResult::EntityToken' has a wrong offset!");
static_assert(offsetof(FClientLoginResult, InfoResultPayload) == 0x000018, "Member 'FClientLoginResult::InfoResultPayload' has a wrong offset!");
static_assert(offsetof(FClientLoginResult, LastLoginTime) == 0x000020, "Member 'FClientLoginResult::LastLoginTime' has a wrong offset!");
static_assert(offsetof(FClientLoginResult, NewlyCreated) == 0x000030, "Member 'FClientLoginResult::NewlyCreated' has a wrong offset!");
static_assert(offsetof(FClientLoginResult, PlayFabId) == 0x000038, "Member 'FClientLoginResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FClientLoginResult, SessionTicket) == 0x000048, "Member 'FClientLoginResult::SessionTicket' has a wrong offset!");
static_assert(offsetof(FClientLoginResult, SettingsForUser) == 0x000058, "Member 'FClientLoginResult::SettingsForUser' has a wrong offset!");
static_assert(offsetof(FClientLoginResult, TreatmentAssignment) == 0x000060, "Member 'FClientLoginResult::TreatmentAssignment' has a wrong offset!");

// ScriptStruct PlayFab.ServerSubtractCharacterVirtualCurrencyRequest
// 0x0040 (0x0048 - 0x0008)
struct FServerSubtractCharacterVirtualCurrencyRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSubtractCharacterVirtualCurrencyRequest) == 0x000008, "Wrong alignment on FServerSubtractCharacterVirtualCurrencyRequest");
static_assert(sizeof(FServerSubtractCharacterVirtualCurrencyRequest) == 0x000048, "Wrong size on FServerSubtractCharacterVirtualCurrencyRequest");
static_assert(offsetof(FServerSubtractCharacterVirtualCurrencyRequest, Amount) == 0x000008, "Member 'FServerSubtractCharacterVirtualCurrencyRequest::Amount' has a wrong offset!");
static_assert(offsetof(FServerSubtractCharacterVirtualCurrencyRequest, CharacterId) == 0x000010, "Member 'FServerSubtractCharacterVirtualCurrencyRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerSubtractCharacterVirtualCurrencyRequest, CustomTags) == 0x000020, "Member 'FServerSubtractCharacterVirtualCurrencyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerSubtractCharacterVirtualCurrencyRequest, PlayFabId) == 0x000028, "Member 'FServerSubtractCharacterVirtualCurrencyRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerSubtractCharacterVirtualCurrencyRequest, VirtualCurrency) == 0x000038, "Member 'FServerSubtractCharacterVirtualCurrencyRequest::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ClientMatchmakeResult
// 0x0078 (0x0080 - 0x0008)
struct FClientMatchmakeResult final : public FPlayFabResultCommon
{
public:
	class FString                                 Expires;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PollWaitTimeMS;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216D[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerIPV4Address;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerIPV6Address;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216E[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerPublicDNSName;                               // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakeStatus                              Status;                                            // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216F[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ticket;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchmakeResult) == 0x000008, "Wrong alignment on FClientMatchmakeResult");
static_assert(sizeof(FClientMatchmakeResult) == 0x000080, "Wrong size on FClientMatchmakeResult");
static_assert(offsetof(FClientMatchmakeResult, Expires) == 0x000008, "Member 'FClientMatchmakeResult::Expires' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeResult, LobbyId) == 0x000018, "Member 'FClientMatchmakeResult::LobbyId' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeResult, PollWaitTimeMS) == 0x000028, "Member 'FClientMatchmakeResult::PollWaitTimeMS' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeResult, ServerIPV4Address) == 0x000030, "Member 'FClientMatchmakeResult::ServerIPV4Address' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeResult, ServerIPV6Address) == 0x000040, "Member 'FClientMatchmakeResult::ServerIPV6Address' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeResult, ServerPort) == 0x000050, "Member 'FClientMatchmakeResult::ServerPort' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeResult, ServerPublicDNSName) == 0x000058, "Member 'FClientMatchmakeResult::ServerPublicDNSName' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeResult, Status) == 0x000068, "Member 'FClientMatchmakeResult::Status' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeResult, Ticket) == 0x000070, "Member 'FClientMatchmakeResult::Ticket' has a wrong offset!");

// ScriptStruct PlayFab.ClientOpenTradeResponse
// 0x0008 (0x0010 - 0x0008)
struct FClientOpenTradeResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Trade;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientOpenTradeResponse) == 0x000008, "Wrong alignment on FClientOpenTradeResponse");
static_assert(sizeof(FClientOpenTradeResponse) == 0x000010, "Wrong size on FClientOpenTradeResponse");
static_assert(offsetof(FClientOpenTradeResponse, Trade) == 0x000008, "Member 'FClientOpenTradeResponse::Trade' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPublisherDataRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPublisherDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Keys;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPublisherDataRequest) == 0x000008, "Wrong alignment on FClientGetPublisherDataRequest");
static_assert(sizeof(FClientGetPublisherDataRequest) == 0x000018, "Wrong size on FClientGetPublisherDataRequest");
static_assert(offsetof(FClientGetPublisherDataRequest, Keys) == 0x000008, "Member 'FClientGetPublisherDataRequest::Keys' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkFacebookInstantGamesIdRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkFacebookInstantGamesIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FacebookInstantGamesSignature;                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2170[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientLinkFacebookInstantGamesIdRequest) == 0x000008, "Wrong alignment on FClientLinkFacebookInstantGamesIdRequest");
static_assert(sizeof(FClientLinkFacebookInstantGamesIdRequest) == 0x000028, "Wrong size on FClientLinkFacebookInstantGamesIdRequest");
static_assert(offsetof(FClientLinkFacebookInstantGamesIdRequest, CustomTags) == 0x000008, "Member 'FClientLinkFacebookInstantGamesIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkFacebookInstantGamesIdRequest, FacebookInstantGamesSignature) == 0x000010, "Member 'FClientLinkFacebookInstantGamesIdRequest::FacebookInstantGamesSignature' has a wrong offset!");
static_assert(offsetof(FClientLinkFacebookInstantGamesIdRequest, ForceLink) == 0x000020, "Member 'FClientLinkFacebookInstantGamesIdRequest::ForceLink' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerDeleteCertificateRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerDeleteCertificateRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerDeleteCertificateRequest) == 0x000008, "Wrong alignment on FMultiplayerDeleteCertificateRequest");
static_assert(sizeof(FMultiplayerDeleteCertificateRequest) == 0x000020, "Wrong size on FMultiplayerDeleteCertificateRequest");
static_assert(offsetof(FMultiplayerDeleteCertificateRequest, CustomTags) == 0x000008, "Member 'FMultiplayerDeleteCertificateRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteCertificateRequest, Name) == 0x000010, "Member 'FMultiplayerDeleteCertificateRequest::Name' has a wrong offset!");

// ScriptStruct PlayFab.ClientPayForPurchaseResult
// 0x0070 (0x0078 - 0x0008)
struct FClientPayForPurchaseResult final : public FPlayFabResultCommon
{
public:
	int32                                         CreditApplied;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2171[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderID;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProviderData;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProviderToken;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseConfirmationPageURL;                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PurchaseCurrency;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchasePrice;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransactionStatus                            Status;                                            // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2172[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     VCAmount;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrency;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientPayForPurchaseResult) == 0x000008, "Wrong alignment on FClientPayForPurchaseResult");
static_assert(sizeof(FClientPayForPurchaseResult) == 0x000078, "Wrong size on FClientPayForPurchaseResult");
static_assert(offsetof(FClientPayForPurchaseResult, CreditApplied) == 0x000008, "Member 'FClientPayForPurchaseResult::CreditApplied' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseResult, OrderID) == 0x000010, "Member 'FClientPayForPurchaseResult::OrderID' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseResult, ProviderData) == 0x000020, "Member 'FClientPayForPurchaseResult::ProviderData' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseResult, ProviderToken) == 0x000030, "Member 'FClientPayForPurchaseResult::ProviderToken' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseResult, PurchaseConfirmationPageURL) == 0x000040, "Member 'FClientPayForPurchaseResult::PurchaseConfirmationPageURL' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseResult, PurchaseCurrency) == 0x000050, "Member 'FClientPayForPurchaseResult::PurchaseCurrency' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseResult, PurchasePrice) == 0x000060, "Member 'FClientPayForPurchaseResult::PurchasePrice' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseResult, Status) == 0x000064, "Member 'FClientPayForPurchaseResult::Status' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseResult, VCAmount) == 0x000068, "Member 'FClientPayForPurchaseResult::VCAmount' has a wrong offset!");
static_assert(offsetof(FClientPayForPurchaseResult, VirtualCurrency) == 0x000070, "Member 'FClientPayForPurchaseResult::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ClientPurchaseItemResult
// 0x0010 (0x0018 - 0x0008)
struct FClientPurchaseItemResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientPurchaseItemResult) == 0x000008, "Wrong alignment on FClientPurchaseItemResult");
static_assert(sizeof(FClientPurchaseItemResult) == 0x000018, "Wrong size on FClientPurchaseItemResult");
static_assert(offsetof(FClientPurchaseItemResult, Items) == 0x000008, "Member 'FClientPurchaseItemResult::Items' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptGetFunctionResult
// 0x0040 (0x0048 - 0x0008)
struct FCloudScriptGetFunctionResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ConnectionString;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionUrl;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TriggerType;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptGetFunctionResult) == 0x000008, "Wrong alignment on FCloudScriptGetFunctionResult");
static_assert(sizeof(FCloudScriptGetFunctionResult) == 0x000048, "Wrong size on FCloudScriptGetFunctionResult");
static_assert(offsetof(FCloudScriptGetFunctionResult, ConnectionString) == 0x000008, "Member 'FCloudScriptGetFunctionResult::ConnectionString' has a wrong offset!");
static_assert(offsetof(FCloudScriptGetFunctionResult, FunctionUrl) == 0x000018, "Member 'FCloudScriptGetFunctionResult::FunctionUrl' has a wrong offset!");
static_assert(offsetof(FCloudScriptGetFunctionResult, QueueName) == 0x000028, "Member 'FCloudScriptGetFunctionResult::QueueName' has a wrong offset!");
static_assert(offsetof(FCloudScriptGetFunctionResult, TriggerType) == 0x000038, "Member 'FCloudScriptGetFunctionResult::TriggerType' has a wrong offset!");

// ScriptStruct PlayFab.ClientRedeemCouponResult
// 0x0010 (0x0018 - 0x0008)
struct FClientRedeemCouponResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             GrantedItems;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRedeemCouponResult) == 0x000008, "Wrong alignment on FClientRedeemCouponResult");
static_assert(sizeof(FClientRedeemCouponResult) == 0x000018, "Wrong size on FClientRedeemCouponResult");
static_assert(offsetof(FClientRedeemCouponResult, GrantedItems) == 0x000008, "Member 'FClientRedeemCouponResult::GrantedItems' has a wrong offset!");

// ScriptStruct PlayFab.ServerBanUsersResult
// 0x0010 (0x0018 - 0x0008)
struct FServerBanUsersResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerBanUsersResult) == 0x000008, "Wrong alignment on FServerBanUsersResult");
static_assert(sizeof(FServerBanUsersResult) == 0x000018, "Wrong size on FServerBanUsersResult");
static_assert(offsetof(FServerBanUsersResult, BanData) == 0x000008, "Member 'FServerBanUsersResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlinkSteamIdRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerUnlinkSteamIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUnlinkSteamIdRequest) == 0x000008, "Wrong alignment on FServerUnlinkSteamIdRequest");
static_assert(sizeof(FServerUnlinkSteamIdRequest) == 0x000020, "Wrong size on FServerUnlinkSteamIdRequest");
static_assert(offsetof(FServerUnlinkSteamIdRequest, CustomTags) == 0x000008, "Member 'FServerUnlinkSteamIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUnlinkSteamIdRequest, PlayFabId) == 0x000010, "Member 'FServerUnlinkSteamIdRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientEmptyResponse
// 0x0000 (0x0008 - 0x0008)
struct FClientEmptyResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientEmptyResponse) == 0x000008, "Wrong alignment on FClientEmptyResponse");
static_assert(sizeof(FClientEmptyResponse) == 0x000008, "Wrong size on FClientEmptyResponse");

// ScriptStruct PlayFab.CloudScriptExecuteFunctionResult
// 0x0030 (0x0038 - 0x0008)
struct FCloudScriptExecuteFunctionResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Error;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExecutionTimeMilliseconds;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2173[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FunctionName;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionResult;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FunctionResultTooLarge;                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2174[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCloudScriptExecuteFunctionResult) == 0x000008, "Wrong alignment on FCloudScriptExecuteFunctionResult");
static_assert(sizeof(FCloudScriptExecuteFunctionResult) == 0x000038, "Wrong size on FCloudScriptExecuteFunctionResult");
static_assert(offsetof(FCloudScriptExecuteFunctionResult, Error) == 0x000008, "Member 'FCloudScriptExecuteFunctionResult::Error' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteFunctionResult, ExecutionTimeMilliseconds) == 0x000010, "Member 'FCloudScriptExecuteFunctionResult::ExecutionTimeMilliseconds' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteFunctionResult, FunctionName) == 0x000018, "Member 'FCloudScriptExecuteFunctionResult::FunctionName' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteFunctionResult, FunctionResult) == 0x000028, "Member 'FCloudScriptExecuteFunctionResult::FunctionResult' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteFunctionResult, FunctionResultTooLarge) == 0x000030, "Member 'FCloudScriptExecuteFunctionResult::FunctionResultTooLarge' has a wrong offset!");

// ScriptStruct PlayFab.ClientRegisterForIOSPushNotificationResult
// 0x0000 (0x0008 - 0x0008)
struct FClientRegisterForIOSPushNotificationResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientRegisterForIOSPushNotificationResult) == 0x000008, "Wrong alignment on FClientRegisterForIOSPushNotificationResult");
static_assert(sizeof(FClientRegisterForIOSPushNotificationResult) == 0x000008, "Wrong size on FClientRegisterForIOSPushNotificationResult");

// ScriptStruct PlayFab.ClientRegisterPlayFabUserResult
// 0x0040 (0x0048 - 0x0008)
struct FClientRegisterPlayFabUserResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     EntityToken;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionTicket;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     SettingsForUser;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRegisterPlayFabUserResult) == 0x000008, "Wrong alignment on FClientRegisterPlayFabUserResult");
static_assert(sizeof(FClientRegisterPlayFabUserResult) == 0x000048, "Wrong size on FClientRegisterPlayFabUserResult");
static_assert(offsetof(FClientRegisterPlayFabUserResult, EntityToken) == 0x000008, "Member 'FClientRegisterPlayFabUserResult::EntityToken' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserResult, PlayFabId) == 0x000010, "Member 'FClientRegisterPlayFabUserResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserResult, SessionTicket) == 0x000020, "Member 'FClientRegisterPlayFabUserResult::SessionTicket' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserResult, SettingsForUser) == 0x000030, "Member 'FClientRegisterPlayFabUserResult::SettingsForUser' has a wrong offset!");
static_assert(offsetof(FClientRegisterPlayFabUserResult, Username) == 0x000038, "Member 'FClientRegisterPlayFabUserResult::Username' has a wrong offset!");

// ScriptStruct PlayFab.ClientRemoveContactEmailResult
// 0x0000 (0x0008 - 0x0008)
struct FClientRemoveContactEmailResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientRemoveContactEmailResult) == 0x000008, "Wrong alignment on FClientRemoveContactEmailResult");
static_assert(sizeof(FClientRemoveContactEmailResult) == 0x000008, "Wrong size on FClientRemoveContactEmailResult");

// ScriptStruct PlayFab.ClientRemoveGenericIDResult
// 0x0000 (0x0008 - 0x0008)
struct FClientRemoveGenericIDResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientRemoveGenericIDResult) == 0x000008, "Wrong alignment on FClientRemoveGenericIDResult");
static_assert(sizeof(FClientRemoveGenericIDResult) == 0x000008, "Wrong size on FClientRemoveGenericIDResult");

// ScriptStruct PlayFab.ProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse
// 0x0018 (0x0020 - 0x0008)
struct FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 TitleId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     TitlePlayerAccounts;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse) == 0x000008, "Wrong alignment on FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse");
static_assert(sizeof(FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse) == 0x000020, "Wrong size on FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse");
static_assert(offsetof(FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse, TitleId) == 0x000008, "Member 'FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse::TitleId' has a wrong offset!");
static_assert(offsetof(FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse, TitlePlayerAccounts) == 0x000018, "Member 'FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse::TitlePlayerAccounts' has a wrong offset!");

// ScriptStruct PlayFab.ClientReportAdActivityResult
// 0x0000 (0x0008 - 0x0008)
struct FClientReportAdActivityResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientReportAdActivityResult) == 0x000008, "Wrong alignment on FClientReportAdActivityResult");
static_assert(sizeof(FClientReportAdActivityResult) == 0x000008, "Wrong size on FClientReportAdActivityResult");

// ScriptStruct PlayFab.ClientValidateWindowsReceiptRequest
// 0x0040 (0x0048 - 0x0008)
struct FClientValidateWindowsReceiptRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchasePrice;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2175[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Receipt;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientValidateWindowsReceiptRequest) == 0x000008, "Wrong alignment on FClientValidateWindowsReceiptRequest");
static_assert(sizeof(FClientValidateWindowsReceiptRequest) == 0x000048, "Wrong size on FClientValidateWindowsReceiptRequest");
static_assert(offsetof(FClientValidateWindowsReceiptRequest, CatalogVersion) == 0x000008, "Member 'FClientValidateWindowsReceiptRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientValidateWindowsReceiptRequest, CurrencyCode) == 0x000018, "Member 'FClientValidateWindowsReceiptRequest::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FClientValidateWindowsReceiptRequest, CustomTags) == 0x000028, "Member 'FClientValidateWindowsReceiptRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientValidateWindowsReceiptRequest, PurchasePrice) == 0x000030, "Member 'FClientValidateWindowsReceiptRequest::PurchasePrice' has a wrong offset!");
static_assert(offsetof(FClientValidateWindowsReceiptRequest, Receipt) == 0x000038, "Member 'FClientValidateWindowsReceiptRequest::Receipt' has a wrong offset!");

// ScriptStruct PlayFab.ClientReportPlayerClientResult
// 0x0008 (0x0010 - 0x0008)
struct FClientReportPlayerClientResult final : public FPlayFabResultCommon
{
public:
	int32                                         SubmissionsRemaining;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2176[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientReportPlayerClientResult) == 0x000008, "Wrong alignment on FClientReportPlayerClientResult");
static_assert(sizeof(FClientReportPlayerClientResult) == 0x000010, "Wrong size on FClientReportPlayerClientResult");
static_assert(offsetof(FClientReportPlayerClientResult, SubmissionsRemaining) == 0x000008, "Member 'FClientReportPlayerClientResult::SubmissionsRemaining' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetDraftItemsResponse
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetDraftItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetDraftItemsResponse) == 0x000008, "Wrong alignment on FEconomyGetDraftItemsResponse");
static_assert(sizeof(FEconomyGetDraftItemsResponse) == 0x000028, "Wrong size on FEconomyGetDraftItemsResponse");
static_assert(offsetof(FEconomyGetDraftItemsResponse, ContinuationToken) == 0x000008, "Member 'FEconomyGetDraftItemsResponse::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetDraftItemsResponse, Items) == 0x000018, "Member 'FEconomyGetDraftItemsResponse::Items' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithOpenIdConnectRequest
// 0x0058 (0x0060 - 0x0008)
struct FClientLoginWithOpenIdConnectRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ConnectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateAccount;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2177[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdToken;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithOpenIdConnectRequest) == 0x000008, "Wrong alignment on FClientLoginWithOpenIdConnectRequest");
static_assert(sizeof(FClientLoginWithOpenIdConnectRequest) == 0x000060, "Wrong size on FClientLoginWithOpenIdConnectRequest");
static_assert(offsetof(FClientLoginWithOpenIdConnectRequest, ConnectionId) == 0x000008, "Member 'FClientLoginWithOpenIdConnectRequest::ConnectionId' has a wrong offset!");
static_assert(offsetof(FClientLoginWithOpenIdConnectRequest, CreateAccount) == 0x000018, "Member 'FClientLoginWithOpenIdConnectRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithOpenIdConnectRequest, CustomTags) == 0x000020, "Member 'FClientLoginWithOpenIdConnectRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithOpenIdConnectRequest, EncryptedRequest) == 0x000028, "Member 'FClientLoginWithOpenIdConnectRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithOpenIdConnectRequest, IdToken) == 0x000038, "Member 'FClientLoginWithOpenIdConnectRequest::IdToken' has a wrong offset!");
static_assert(offsetof(FClientLoginWithOpenIdConnectRequest, InfoRequestParameters) == 0x000048, "Member 'FClientLoginWithOpenIdConnectRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithOpenIdConnectRequest, PlayerSecret) == 0x000050, "Member 'FClientLoginWithOpenIdConnectRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.ClientRewardAdActivityResult
// 0x0050 (0x0058 - 0x0008)
struct FClientRewardAdActivityResult final : public FPlayFabResultCommon
{
public:
	class FString                                 AdActivityEventId;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugResults;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlacementId;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlacementName;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementViewsRemaining;                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementViewsResetMinutes;                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     RewardResults;                                     // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRewardAdActivityResult) == 0x000008, "Wrong alignment on FClientRewardAdActivityResult");
static_assert(sizeof(FClientRewardAdActivityResult) == 0x000058, "Wrong size on FClientRewardAdActivityResult");
static_assert(offsetof(FClientRewardAdActivityResult, AdActivityEventId) == 0x000008, "Member 'FClientRewardAdActivityResult::AdActivityEventId' has a wrong offset!");
static_assert(offsetof(FClientRewardAdActivityResult, DebugResults) == 0x000018, "Member 'FClientRewardAdActivityResult::DebugResults' has a wrong offset!");
static_assert(offsetof(FClientRewardAdActivityResult, PlacementId) == 0x000028, "Member 'FClientRewardAdActivityResult::PlacementId' has a wrong offset!");
static_assert(offsetof(FClientRewardAdActivityResult, PlacementName) == 0x000038, "Member 'FClientRewardAdActivityResult::PlacementName' has a wrong offset!");
static_assert(offsetof(FClientRewardAdActivityResult, PlacementViewsRemaining) == 0x000048, "Member 'FClientRewardAdActivityResult::PlacementViewsRemaining' has a wrong offset!");
static_assert(offsetof(FClientRewardAdActivityResult, PlacementViewsResetMinutes) == 0x00004C, "Member 'FClientRewardAdActivityResult::PlacementViewsResetMinutes' has a wrong offset!");
static_assert(offsetof(FClientRewardAdActivityResult, RewardResults) == 0x000050, "Member 'FClientRewardAdActivityResult::RewardResults' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetQueueStatisticsRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetQueueStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetQueueStatisticsRequest) == 0x000008, "Wrong alignment on FMultiplayerGetQueueStatisticsRequest");
static_assert(sizeof(FMultiplayerGetQueueStatisticsRequest) == 0x000020, "Wrong size on FMultiplayerGetQueueStatisticsRequest");
static_assert(offsetof(FMultiplayerGetQueueStatisticsRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetQueueStatisticsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetQueueStatisticsRequest, QueueName) == 0x000010, "Member 'FMultiplayerGetQueueStatisticsRequest::QueueName' has a wrong offset!");

// ScriptStruct PlayFab.ClientValidateGooglePlayPurchaseResult
// 0x0010 (0x0018 - 0x0008)
struct FClientValidateGooglePlayPurchaseResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Fulfillments;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientValidateGooglePlayPurchaseResult) == 0x000008, "Wrong alignment on FClientValidateGooglePlayPurchaseResult");
static_assert(sizeof(FClientValidateGooglePlayPurchaseResult) == 0x000018, "Wrong size on FClientValidateGooglePlayPurchaseResult");
static_assert(offsetof(FClientValidateGooglePlayPurchaseResult, Fulfillments) == 0x000008, "Member 'FClientValidateGooglePlayPurchaseResult::Fulfillments' has a wrong offset!");

// ScriptStruct PlayFab.ClientSetFriendTagsResult
// 0x0000 (0x0008 - 0x0008)
struct FClientSetFriendTagsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientSetFriendTagsResult) == 0x000008, "Wrong alignment on FClientSetFriendTagsResult");
static_assert(sizeof(FClientSetFriendTagsResult) == 0x000008, "Wrong size on FClientSetFriendTagsResult");

// ScriptStruct PlayFab.ServerAddGenericIDRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerAddGenericIDRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     GenericId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAddGenericIDRequest) == 0x000008, "Wrong alignment on FServerAddGenericIDRequest");
static_assert(sizeof(FServerAddGenericIDRequest) == 0x000020, "Wrong size on FServerAddGenericIDRequest");
static_assert(offsetof(FServerAddGenericIDRequest, GenericId) == 0x000008, "Member 'FServerAddGenericIDRequest::GenericId' has a wrong offset!");
static_assert(offsetof(FServerAddGenericIDRequest, PlayFabId) == 0x000010, "Member 'FServerAddGenericIDRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGameCenterIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromGameCenterIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 GameCenterIDs;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromGameCenterIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromGameCenterIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromGameCenterIDsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromGameCenterIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromGameCenterIDsRequest, GameCenterIDs) == 0x000008, "Member 'FClientGetPlayFabIDsFromGameCenterIDsRequest::GameCenterIDs' has a wrong offset!");

// ScriptStruct PlayFab.ClientSetPlayerSecretResult
// 0x0000 (0x0008 - 0x0008)
struct FClientSetPlayerSecretResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientSetPlayerSecretResult) == 0x000008, "Wrong alignment on FClientSetPlayerSecretResult");
static_assert(sizeof(FClientSetPlayerSecretResult) == 0x000008, "Wrong size on FClientSetPlayerSecretResult");

// ScriptStruct PlayFab.MultiplayerDeleteContainerImageRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerDeleteContainerImageRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerDeleteContainerImageRequest) == 0x000008, "Wrong alignment on FMultiplayerDeleteContainerImageRequest");
static_assert(sizeof(FMultiplayerDeleteContainerImageRequest) == 0x000020, "Wrong size on FMultiplayerDeleteContainerImageRequest");
static_assert(offsetof(FMultiplayerDeleteContainerImageRequest, CustomTags) == 0x000008, "Member 'FMultiplayerDeleteContainerImageRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteContainerImageRequest, ImageName) == 0x000010, "Member 'FMultiplayerDeleteContainerImageRequest::ImageName' has a wrong offset!");

// ScriptStruct PlayFab.ClientValidateWindowsReceiptResult
// 0x0010 (0x0018 - 0x0008)
struct FClientValidateWindowsReceiptResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Fulfillments;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientValidateWindowsReceiptResult) == 0x000008, "Wrong alignment on FClientValidateWindowsReceiptResult");
static_assert(sizeof(FClientValidateWindowsReceiptResult) == 0x000018, "Wrong size on FClientValidateWindowsReceiptResult");
static_assert(offsetof(FClientValidateWindowsReceiptResult, Fulfillments) == 0x000008, "Member 'FClientValidateWindowsReceiptResult::Fulfillments' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetUserBansResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetUserBansResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetUserBansResult) == 0x000008, "Wrong alignment on FServerGetUserBansResult");
static_assert(sizeof(FServerGetUserBansResult) == 0x000018, "Wrong size on FServerGetUserBansResult");
static_assert(offsetof(FServerGetUserBansResult, BanData) == 0x000008, "Member 'FServerGetUserBansResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.ClientStartPurchaseResult
// 0x0038 (0x0040 - 0x0008)
struct FClientStartPurchaseResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Contents;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OrderID;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             PaymentOptions;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrencyBalances;                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientStartPurchaseResult) == 0x000008, "Wrong alignment on FClientStartPurchaseResult");
static_assert(sizeof(FClientStartPurchaseResult) == 0x000040, "Wrong size on FClientStartPurchaseResult");
static_assert(offsetof(FClientStartPurchaseResult, Contents) == 0x000008, "Member 'FClientStartPurchaseResult::Contents' has a wrong offset!");
static_assert(offsetof(FClientStartPurchaseResult, OrderID) == 0x000018, "Member 'FClientStartPurchaseResult::OrderID' has a wrong offset!");
static_assert(offsetof(FClientStartPurchaseResult, PaymentOptions) == 0x000028, "Member 'FClientStartPurchaseResult::PaymentOptions' has a wrong offset!");
static_assert(offsetof(FClientStartPurchaseResult, VirtualCurrencyBalances) == 0x000038, "Member 'FClientStartPurchaseResult::VirtualCurrencyBalances' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromKongregateIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromKongregateIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 KongregateIDs;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromKongregateIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromKongregateIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromKongregateIDsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromKongregateIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromKongregateIDsRequest, KongregateIDs) == 0x000008, "Member 'FClientGetPlayFabIDsFromKongregateIDsRequest::KongregateIDs' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetUserDataRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerGetUserDataRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         IfChangedFromDataVersion;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2178[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keys;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetUserDataRequest) == 0x000008, "Wrong alignment on FServerGetUserDataRequest");
static_assert(sizeof(FServerGetUserDataRequest) == 0x000030, "Wrong size on FServerGetUserDataRequest");
static_assert(offsetof(FServerGetUserDataRequest, IfChangedFromDataVersion) == 0x000008, "Member 'FServerGetUserDataRequest::IfChangedFromDataVersion' has a wrong offset!");
static_assert(offsetof(FServerGetUserDataRequest, Keys) == 0x000010, "Member 'FServerGetUserDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FServerGetUserDataRequest, PlayFabId) == 0x000020, "Member 'FServerGetUserDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkCustomIDResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkCustomIDResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkCustomIDResult) == 0x000008, "Wrong alignment on FClientUnlinkCustomIDResult");
static_assert(sizeof(FClientUnlinkCustomIDResult) == 0x000008, "Wrong size on FClientUnlinkCustomIDResult");

// ScriptStruct PlayFab.GroupsListMembershipOpportunitiesResponse
// 0x0020 (0x0028 - 0x0008)
struct FGroupsListMembershipOpportunitiesResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Applications;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Invitations;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListMembershipOpportunitiesResponse) == 0x000008, "Wrong alignment on FGroupsListMembershipOpportunitiesResponse");
static_assert(sizeof(FGroupsListMembershipOpportunitiesResponse) == 0x000028, "Wrong size on FGroupsListMembershipOpportunitiesResponse");
static_assert(offsetof(FGroupsListMembershipOpportunitiesResponse, Applications) == 0x000008, "Member 'FGroupsListMembershipOpportunitiesResponse::Applications' has a wrong offset!");
static_assert(offsetof(FGroupsListMembershipOpportunitiesResponse, Invitations) == 0x000018, "Member 'FGroupsListMembershipOpportunitiesResponse::Invitations' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGenericIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromGenericIDsRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             GenericIDs;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromGenericIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromGenericIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromGenericIDsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromGenericIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromGenericIDsRequest, GenericIDs) == 0x000008, "Member 'FClientGetPlayFabIDsFromGenericIDsRequest::GenericIDs' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkFacebookAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkFacebookAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkFacebookAccountResult) == 0x000008, "Wrong alignment on FClientUnlinkFacebookAccountResult");
static_assert(sizeof(FClientUnlinkFacebookAccountResult) == 0x000008, "Wrong size on FClientUnlinkFacebookAccountResult");

// ScriptStruct PlayFab.EconomyDeleteEntityItemReviewsResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomyDeleteEntityItemReviewsResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomyDeleteEntityItemReviewsResponse) == 0x000008, "Wrong alignment on FEconomyDeleteEntityItemReviewsResponse");
static_assert(sizeof(FEconomyDeleteEntityItemReviewsResponse) == 0x000008, "Wrong size on FEconomyDeleteEntityItemReviewsResponse");

// ScriptStruct PlayFab.ServerAddUserVirtualCurrencyRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerAddUserVirtualCurrencyRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2179[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAddUserVirtualCurrencyRequest) == 0x000008, "Wrong alignment on FServerAddUserVirtualCurrencyRequest");
static_assert(sizeof(FServerAddUserVirtualCurrencyRequest) == 0x000038, "Wrong size on FServerAddUserVirtualCurrencyRequest");
static_assert(offsetof(FServerAddUserVirtualCurrencyRequest, Amount) == 0x000008, "Member 'FServerAddUserVirtualCurrencyRequest::Amount' has a wrong offset!");
static_assert(offsetof(FServerAddUserVirtualCurrencyRequest, CustomTags) == 0x000010, "Member 'FServerAddUserVirtualCurrencyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerAddUserVirtualCurrencyRequest, PlayFabId) == 0x000018, "Member 'FServerAddUserVirtualCurrencyRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerAddUserVirtualCurrencyRequest, VirtualCurrency) == 0x000028, "Member 'FServerAddUserVirtualCurrencyRequest::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromFacebookIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromFacebookIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FacebookIDs;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromFacebookIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromFacebookIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromFacebookIDsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromFacebookIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromFacebookIDsRequest, FacebookIDs) == 0x000008, "Member 'FClientGetPlayFabIDsFromFacebookIDsRequest::FacebookIDs' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkFacebookInstantGamesIdResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkFacebookInstantGamesIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkFacebookInstantGamesIdResult) == 0x000008, "Wrong alignment on FClientUnlinkFacebookInstantGamesIdResult");
static_assert(sizeof(FClientUnlinkFacebookInstantGamesIdResult) == 0x000008, "Wrong size on FClientUnlinkFacebookInstantGamesIdResult");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 GooglePlayGamesPlayerIDs;                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsRequest, GooglePlayGamesPlayerIDs) == 0x000008, "Member 'FClientGetPlayFabIDsFromGooglePlayGamesPlayerIDsRequest::GooglePlayGamesPlayerIDs' has a wrong offset!");

// ScriptStruct PlayFab.ServerReportPlayerServerResult
// 0x0008 (0x0010 - 0x0008)
struct FServerReportPlayerServerResult final : public FPlayFabResultCommon
{
public:
	int32                                         SubmissionsRemaining;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217A[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerReportPlayerServerResult) == 0x000008, "Wrong alignment on FServerReportPlayerServerResult");
static_assert(sizeof(FServerReportPlayerServerResult) == 0x000010, "Wrong size on FServerReportPlayerServerResult");
static_assert(offsetof(FServerReportPlayerServerResult, SubmissionsRemaining) == 0x000008, "Member 'FServerReportPlayerServerResult::SubmissionsRemaining' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkGameCenterAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkGameCenterAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkGameCenterAccountResult) == 0x000008, "Wrong alignment on FClientUnlinkGameCenterAccountResult");
static_assert(sizeof(FClientUnlinkGameCenterAccountResult) == 0x000008, "Wrong size on FClientUnlinkGameCenterAccountResult");

// ScriptStruct PlayFab.EconomyAddInventoryItemsRequest
// 0x0060 (0x0068 - 0x0008)
struct FEconomyAddInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CollectionId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DurationInSeconds;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Entity;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ETag;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Item;                                              // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     NewStackValues;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyAddInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyAddInventoryItemsRequest");
static_assert(sizeof(FEconomyAddInventoryItemsRequest) == 0x000068, "Wrong size on FEconomyAddInventoryItemsRequest");
static_assert(offsetof(FEconomyAddInventoryItemsRequest, Amount) == 0x000008, "Member 'FEconomyAddInventoryItemsRequest::Amount' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsRequest, CollectionId) == 0x000010, "Member 'FEconomyAddInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsRequest, CustomTags) == 0x000020, "Member 'FEconomyAddInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsRequest, DurationInSeconds) == 0x000028, "Member 'FEconomyAddInventoryItemsRequest::DurationInSeconds' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsRequest, Entity) == 0x000030, "Member 'FEconomyAddInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsRequest, ETag) == 0x000038, "Member 'FEconomyAddInventoryItemsRequest::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsRequest, IdempotencyId) == 0x000048, "Member 'FEconomyAddInventoryItemsRequest::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsRequest, Item) == 0x000058, "Member 'FEconomyAddInventoryItemsRequest::Item' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsRequest, NewStackValues) == 0x000060, "Member 'FEconomyAddInventoryItemsRequest::NewStackValues' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromSteamIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromSteamIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SteamStringIDs;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromSteamIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromSteamIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromSteamIDsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromSteamIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromSteamIDsRequest, SteamStringIDs) == 0x000008, "Member 'FClientGetPlayFabIDsFromSteamIDsRequest::SteamStringIDs' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkGoogleAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkGoogleAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkGoogleAccountResult) == 0x000008, "Wrong alignment on FClientUnlinkGoogleAccountResult");
static_assert(sizeof(FClientUnlinkGoogleAccountResult) == 0x000008, "Wrong size on FClientUnlinkGoogleAccountResult");

// ScriptStruct PlayFab.MultiplayerCreateBuildWithCustomContainerRequest
// 0x00B8 (0x00C0 - 0x0008)
struct FMultiplayerCreateBuildWithCustomContainerRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          AreAssetsReadonly;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContainerFlavor                              ContainerFlavor;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     ContainerImageReference;                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainerRunCommand;                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameAssetReferences;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameCertificateReferences;                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     LinuxInstrumentationConfiguration;                 // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MetaData;                                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MonitoringApplicationConfiguration;                // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiplayerServerCountPerVm;                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217F[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Ports;                                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             RegionConfigurations;                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ServerResourceConstraints;                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStreamingForAssetDownloads;                     // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzureVmSize                                  VmSize;                                            // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2180[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     VmStartupScriptConfiguration;                      // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateBuildWithCustomContainerRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateBuildWithCustomContainerRequest");
static_assert(sizeof(FMultiplayerCreateBuildWithCustomContainerRequest) == 0x0000C0, "Wrong size on FMultiplayerCreateBuildWithCustomContainerRequest");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, AreAssetsReadonly) == 0x000008, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::AreAssetsReadonly' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, BuildName) == 0x000010, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::BuildName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, ContainerFlavor) == 0x000020, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::ContainerFlavor' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, ContainerImageReference) == 0x000028, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::ContainerImageReference' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, ContainerRunCommand) == 0x000030, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::ContainerRunCommand' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, CustomTags) == 0x000040, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, GameAssetReferences) == 0x000048, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::GameAssetReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, GameCertificateReferences) == 0x000058, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::GameCertificateReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, LinuxInstrumentationConfiguration) == 0x000068, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::LinuxInstrumentationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, MetaData) == 0x000070, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::MetaData' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, MonitoringApplicationConfiguration) == 0x000078, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::MonitoringApplicationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, MultiplayerServerCountPerVm) == 0x000080, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::MultiplayerServerCountPerVm' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, Ports) == 0x000088, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::Ports' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, RegionConfigurations) == 0x000098, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::RegionConfigurations' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, ServerResourceConstraints) == 0x0000A8, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::ServerResourceConstraints' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, UseStreamingForAssetDownloads) == 0x0000B0, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::UseStreamingForAssetDownloads' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, VmSize) == 0x0000B1, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::VmSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerRequest, VmStartupScriptConfiguration) == 0x0000B8, "Member 'FMultiplayerCreateBuildWithCustomContainerRequest::VmStartupScriptConfiguration' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithAppleRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientLoginWithAppleRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2181[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdentityToken;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithAppleRequest) == 0x000008, "Wrong alignment on FClientLoginWithAppleRequest");
static_assert(sizeof(FClientLoginWithAppleRequest) == 0x000050, "Wrong size on FClientLoginWithAppleRequest");
static_assert(offsetof(FClientLoginWithAppleRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithAppleRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAppleRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithAppleRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAppleRequest, EncryptedRequest) == 0x000018, "Member 'FClientLoginWithAppleRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAppleRequest, IdentityToken) == 0x000028, "Member 'FClientLoginWithAppleRequest::IdentityToken' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAppleRequest, InfoRequestParameters) == 0x000038, "Member 'FClientLoginWithAppleRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAppleRequest, PlayerSecret) == 0x000040, "Member 'FClientLoginWithAppleRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromNintendoServiceAccountIdsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromNintendoServiceAccountIdsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 NintendoAccountIds;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromNintendoServiceAccountIdsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromNintendoServiceAccountIdsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromNintendoServiceAccountIdsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromNintendoServiceAccountIdsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromNintendoServiceAccountIdsRequest, NintendoAccountIds) == 0x000008, "Member 'FClientGetPlayFabIDsFromNintendoServiceAccountIdsRequest::NintendoAccountIds' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkGooglePlayGamesServicesAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkGooglePlayGamesServicesAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkGooglePlayGamesServicesAccountResult) == 0x000008, "Wrong alignment on FClientUnlinkGooglePlayGamesServicesAccountResult");
static_assert(sizeof(FClientUnlinkGooglePlayGamesServicesAccountResult) == 0x000008, "Wrong size on FClientUnlinkGooglePlayGamesServicesAccountResult");

// ScriptStruct PlayFab.MultiplayerFindLobbiesRequest
// 0x0030 (0x0038 - 0x0008)
struct FMultiplayerFindLobbiesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderBy;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Pagination;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerFindLobbiesRequest) == 0x000008, "Wrong alignment on FMultiplayerFindLobbiesRequest");
static_assert(sizeof(FMultiplayerFindLobbiesRequest) == 0x000038, "Wrong size on FMultiplayerFindLobbiesRequest");
static_assert(offsetof(FMultiplayerFindLobbiesRequest, CustomTags) == 0x000008, "Member 'FMultiplayerFindLobbiesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindLobbiesRequest, Filter) == 0x000010, "Member 'FMultiplayerFindLobbiesRequest::Filter' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindLobbiesRequest, OrderBy) == 0x000020, "Member 'FMultiplayerFindLobbiesRequest::OrderBy' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindLobbiesRequest, Pagination) == 0x000030, "Member 'FMultiplayerFindLobbiesRequest::Pagination' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGoogleIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromGoogleIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 GoogleIDs;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromGoogleIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromGoogleIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromGoogleIDsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromGoogleIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromGoogleIDsRequest, GoogleIDs) == 0x000008, "Member 'FClientGetPlayFabIDsFromGoogleIDsRequest::GoogleIDs' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetExclusionGroupTrafficResult
// 0x0010 (0x0018 - 0x0008)
struct FExperimentationGetExclusionGroupTrafficResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             TrafficAllocations;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetExclusionGroupTrafficResult) == 0x000008, "Wrong alignment on FExperimentationGetExclusionGroupTrafficResult");
static_assert(sizeof(FExperimentationGetExclusionGroupTrafficResult) == 0x000018, "Wrong size on FExperimentationGetExclusionGroupTrafficResult");
static_assert(offsetof(FExperimentationGetExclusionGroupTrafficResult, TrafficAllocations) == 0x000008, "Member 'FExperimentationGetExclusionGroupTrafficResult::TrafficAllocations' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerTagsRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerGetPlayerTagsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerTagsRequest) == 0x000008, "Wrong alignment on FServerGetPlayerTagsRequest");
static_assert(sizeof(FServerGetPlayerTagsRequest) == 0x000030, "Wrong size on FServerGetPlayerTagsRequest");
static_assert(offsetof(FServerGetPlayerTagsRequest, CustomTags) == 0x000008, "Member 'FServerGetPlayerTagsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerTagsRequest, Namespace) == 0x000010, "Member 'FServerGetPlayerTagsRequest::Namespace' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerTagsRequest, PlayFabId) == 0x000020, "Member 'FServerGetPlayerTagsRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkIOSDeviceIDResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkIOSDeviceIDResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkIOSDeviceIDResult) == 0x000008, "Wrong alignment on FClientUnlinkIOSDeviceIDResult");
static_assert(sizeof(FClientUnlinkIOSDeviceIDResult) == 0x000008, "Wrong size on FClientUnlinkIOSDeviceIDResult");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromPSNAccountIDsRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientGetPlayFabIDsFromPSNAccountIDsRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         IssuerId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2182[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PSNAccountIDs;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromPSNAccountIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromPSNAccountIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromPSNAccountIDsRequest) == 0x000020, "Wrong size on FClientGetPlayFabIDsFromPSNAccountIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromPSNAccountIDsRequest, IssuerId) == 0x000008, "Member 'FClientGetPlayFabIDsFromPSNAccountIDsRequest::IssuerId' has a wrong offset!");
static_assert(offsetof(FClientGetPlayFabIDsFromPSNAccountIDsRequest, PSNAccountIDs) == 0x000010, "Member 'FClientGetPlayFabIDsFromPSNAccountIDsRequest::PSNAccountIDs' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetExclusionGroupTrafficRequest
// 0x0018 (0x0020 - 0x0008)
struct FExperimentationGetExclusionGroupTrafficRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExclusionGroupId;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetExclusionGroupTrafficRequest) == 0x000008, "Wrong alignment on FExperimentationGetExclusionGroupTrafficRequest");
static_assert(sizeof(FExperimentationGetExclusionGroupTrafficRequest) == 0x000020, "Wrong size on FExperimentationGetExclusionGroupTrafficRequest");
static_assert(offsetof(FExperimentationGetExclusionGroupTrafficRequest, CustomTags) == 0x000008, "Member 'FExperimentationGetExclusionGroupTrafficRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationGetExclusionGroupTrafficRequest, ExclusionGroupId) == 0x000010, "Member 'FExperimentationGetExclusionGroupTrafficRequest::ExclusionGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerProfileRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerGetPlayerProfileRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerProfileRequest) == 0x000008, "Wrong alignment on FServerGetPlayerProfileRequest");
static_assert(sizeof(FServerGetPlayerProfileRequest) == 0x000028, "Wrong size on FServerGetPlayerProfileRequest");
static_assert(offsetof(FServerGetPlayerProfileRequest, CustomTags) == 0x000008, "Member 'FServerGetPlayerProfileRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerProfileRequest, PlayFabId) == 0x000010, "Member 'FServerGetPlayerProfileRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerProfileRequest, ProfileConstraints) == 0x000020, "Member 'FServerGetPlayerProfileRequest::ProfileConstraints' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkKongregateAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkKongregateAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkKongregateAccountResult) == 0x000008, "Wrong alignment on FClientUnlinkKongregateAccountResult");
static_assert(sizeof(FClientUnlinkKongregateAccountResult) == 0x000008, "Wrong size on FClientUnlinkKongregateAccountResult");

// ScriptStruct PlayFab.ClientUnlinkKongregateAccountRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkKongregateAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkKongregateAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkKongregateAccountRequest");
static_assert(sizeof(FClientUnlinkKongregateAccountRequest) == 0x000010, "Wrong size on FClientUnlinkKongregateAccountRequest");
static_assert(offsetof(FClientUnlinkKongregateAccountRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkKongregateAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkNintendoSwitchDeviceIdResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkNintendoSwitchDeviceIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkNintendoSwitchDeviceIdResult) == 0x000008, "Wrong alignment on FClientUnlinkNintendoSwitchDeviceIdResult");
static_assert(sizeof(FClientUnlinkNintendoSwitchDeviceIdResult) == 0x000008, "Wrong size on FClientUnlinkNintendoSwitchDeviceIdResult");

// ScriptStruct PlayFab.ClientUnlinkPSNAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkPSNAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkPSNAccountResult) == 0x000008, "Wrong alignment on FClientUnlinkPSNAccountResult");
static_assert(sizeof(FClientUnlinkPSNAccountResult) == 0x000008, "Wrong size on FClientUnlinkPSNAccountResult");

// ScriptStruct PlayFab.ClientLinkPSNAccountRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientLinkPSNAccountRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AuthCode;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2183[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IssuerId;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUri;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkPSNAccountRequest) == 0x000008, "Wrong alignment on FClientLinkPSNAccountRequest");
static_assert(sizeof(FClientLinkPSNAccountRequest) == 0x000038, "Wrong size on FClientLinkPSNAccountRequest");
static_assert(offsetof(FClientLinkPSNAccountRequest, AuthCode) == 0x000008, "Member 'FClientLinkPSNAccountRequest::AuthCode' has a wrong offset!");
static_assert(offsetof(FClientLinkPSNAccountRequest, CustomTags) == 0x000018, "Member 'FClientLinkPSNAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkPSNAccountRequest, ForceLink) == 0x000020, "Member 'FClientLinkPSNAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkPSNAccountRequest, IssuerId) == 0x000024, "Member 'FClientLinkPSNAccountRequest::IssuerId' has a wrong offset!");
static_assert(offsetof(FClientLinkPSNAccountRequest, RedirectUri) == 0x000028, "Member 'FClientLinkPSNAccountRequest::RedirectUri' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 NintendoSwitchDeviceIds;                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, NintendoSwitchDeviceIds) == 0x000008, "Member 'FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest::NintendoSwitchDeviceIds' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkTwitchAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUnlinkTwitchAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUnlinkTwitchAccountResult) == 0x000008, "Wrong alignment on FClientUnlinkTwitchAccountResult");
static_assert(sizeof(FClientUnlinkTwitchAccountResult) == 0x000008, "Wrong size on FClientUnlinkTwitchAccountResult");

// ScriptStruct PlayFab.ClientUpdateCharacterDataResult
// 0x0008 (0x0010 - 0x0008)
struct FClientUpdateCharacterDataResult final : public FPlayFabResultCommon
{
public:
	int32                                         DataVersion;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2184[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientUpdateCharacterDataResult) == 0x000008, "Wrong alignment on FClientUpdateCharacterDataResult");
static_assert(sizeof(FClientUpdateCharacterDataResult) == 0x000010, "Wrong size on FClientUpdateCharacterDataResult");
static_assert(offsetof(FClientUpdateCharacterDataResult, DataVersion) == 0x000008, "Member 'FClientUpdateCharacterDataResult::DataVersion' has a wrong offset!");

// ScriptStruct PlayFab.EconomyTakedownItemReviewsRequest
// 0x0018 (0x0020 - 0x0008)
struct FEconomyTakedownItemReviewsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Reviews;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyTakedownItemReviewsRequest) == 0x000008, "Wrong alignment on FEconomyTakedownItemReviewsRequest");
static_assert(sizeof(FEconomyTakedownItemReviewsRequest) == 0x000020, "Wrong size on FEconomyTakedownItemReviewsRequest");
static_assert(offsetof(FEconomyTakedownItemReviewsRequest, CustomTags) == 0x000008, "Member 'FEconomyTakedownItemReviewsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyTakedownItemReviewsRequest, Reviews) == 0x000010, "Member 'FEconomyTakedownItemReviewsRequest::Reviews' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkGooglePlayGamesServicesAccountRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkGooglePlayGamesServicesAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkGooglePlayGamesServicesAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkGooglePlayGamesServicesAccountRequest");
static_assert(sizeof(FClientUnlinkGooglePlayGamesServicesAccountRequest) == 0x000010, "Wrong size on FClientUnlinkGooglePlayGamesServicesAccountRequest");
static_assert(offsetof(FClientUnlinkGooglePlayGamesServicesAccountRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkGooglePlayGamesServicesAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdatePlayerStatisticsResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUpdatePlayerStatisticsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUpdatePlayerStatisticsResult) == 0x000008, "Wrong alignment on FClientUpdatePlayerStatisticsResult");
static_assert(sizeof(FClientUpdatePlayerStatisticsResult) == 0x000008, "Wrong size on FClientUpdatePlayerStatisticsResult");

// ScriptStruct PlayFab.ClientUnlinkCustomIDRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientUnlinkCustomIDRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CustomId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkCustomIDRequest) == 0x000008, "Wrong alignment on FClientUnlinkCustomIDRequest");
static_assert(sizeof(FClientUnlinkCustomIDRequest) == 0x000020, "Wrong size on FClientUnlinkCustomIDRequest");
static_assert(offsetof(FClientUnlinkCustomIDRequest, CustomId) == 0x000008, "Member 'FClientUnlinkCustomIDRequest::CustomId' has a wrong offset!");
static_assert(offsetof(FClientUnlinkCustomIDRequest, CustomTags) == 0x000018, "Member 'FClientUnlinkCustomIDRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateBansRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerUpdateBansRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Bans;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdateBansRequest) == 0x000008, "Wrong alignment on FServerUpdateBansRequest");
static_assert(sizeof(FServerUpdateBansRequest) == 0x000018, "Wrong size on FServerUpdateBansRequest");
static_assert(offsetof(FServerUpdateBansRequest, Bans) == 0x000008, "Member 'FServerUpdateBansRequest::Bans' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListBuildSummariesRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerListBuildSummariesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2185[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListBuildSummariesRequest) == 0x000008, "Wrong alignment on FMultiplayerListBuildSummariesRequest");
static_assert(sizeof(FMultiplayerListBuildSummariesRequest) == 0x000028, "Wrong size on FMultiplayerListBuildSummariesRequest");
static_assert(offsetof(FMultiplayerListBuildSummariesRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListBuildSummariesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListBuildSummariesRequest, PageSize) == 0x000010, "Member 'FMultiplayerListBuildSummariesRequest::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListBuildSummariesRequest, SkipToken) == 0x000018, "Member 'FMultiplayerListBuildSummariesRequest::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdateSharedGroupDataResult
// 0x0000 (0x0008 - 0x0008)
struct FClientUpdateSharedGroupDataResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FClientUpdateSharedGroupDataResult) == 0x000008, "Wrong alignment on FClientUpdateSharedGroupDataResult");
static_assert(sizeof(FClientUpdateSharedGroupDataResult) == 0x000008, "Wrong size on FClientUpdateSharedGroupDataResult");

// ScriptStruct PlayFab.ClientUpdateUserDataResult
// 0x0008 (0x0010 - 0x0008)
struct FClientUpdateUserDataResult final : public FPlayFabResultCommon
{
public:
	int32                                         DataVersion;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2186[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientUpdateUserDataResult) == 0x000008, "Wrong alignment on FClientUpdateUserDataResult");
static_assert(sizeof(FClientUpdateUserDataResult) == 0x000010, "Wrong size on FClientUpdateUserDataResult");
static_assert(offsetof(FClientUpdateUserDataResult, DataVersion) == 0x000008, "Member 'FClientUpdateUserDataResult::DataVersion' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerSegmentsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayerSegmentsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Segments;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerSegmentsResult) == 0x000008, "Wrong alignment on FServerGetPlayerSegmentsResult");
static_assert(sizeof(FServerGetPlayerSegmentsResult) == 0x000018, "Wrong size on FServerGetPlayerSegmentsResult");
static_assert(offsetof(FServerGetPlayerSegmentsResult, Segments) == 0x000008, "Member 'FServerGetPlayerSegmentsResult::Segments' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdateUserTitleDisplayNameResult
// 0x0010 (0x0018 - 0x0008)
struct FClientUpdateUserTitleDisplayNameResult final : public FPlayFabResultCommon
{
public:
	class FString                                 DisplayName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUpdateUserTitleDisplayNameResult) == 0x000008, "Wrong alignment on FClientUpdateUserTitleDisplayNameResult");
static_assert(sizeof(FClientUpdateUserTitleDisplayNameResult) == 0x000018, "Wrong size on FClientUpdateUserTitleDisplayNameResult");
static_assert(offsetof(FClientUpdateUserTitleDisplayNameResult, DisplayName) == 0x000008, "Member 'FClientUpdateUserTitleDisplayNameResult::DisplayName' has a wrong offset!");

// ScriptStruct PlayFab.ClientValidateAmazonReceiptResult
// 0x0010 (0x0018 - 0x0008)
struct FClientValidateAmazonReceiptResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Fulfillments;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientValidateAmazonReceiptResult) == 0x000008, "Wrong alignment on FClientValidateAmazonReceiptResult");
static_assert(sizeof(FClientValidateAmazonReceiptResult) == 0x000018, "Wrong size on FClientValidateAmazonReceiptResult");
static_assert(offsetof(FClientValidateAmazonReceiptResult, Fulfillments) == 0x000008, "Member 'FClientValidateAmazonReceiptResult::Fulfillments' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListGroupInvitationsRequest
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListGroupInvitationsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListGroupInvitationsRequest) == 0x000008, "Wrong alignment on FGroupsListGroupInvitationsRequest");
static_assert(sizeof(FGroupsListGroupInvitationsRequest) == 0x000018, "Wrong size on FGroupsListGroupInvitationsRequest");
static_assert(offsetof(FGroupsListGroupInvitationsRequest, CustomTags) == 0x000008, "Member 'FGroupsListGroupInvitationsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsListGroupInvitationsRequest, Group) == 0x000010, "Member 'FGroupsListGroupInvitationsRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListMembershipResponse
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListMembershipResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Groups;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListMembershipResponse) == 0x000008, "Wrong alignment on FGroupsListMembershipResponse");
static_assert(sizeof(FGroupsListMembershipResponse) == 0x000018, "Wrong size on FGroupsListMembershipResponse");
static_assert(offsetof(FGroupsListMembershipResponse, Groups) == 0x000008, "Member 'FGroupsListMembershipResponse::Groups' has a wrong offset!");

// ScriptStruct PlayFab.ClientValidateIOSReceiptResult
// 0x0010 (0x0018 - 0x0008)
struct FClientValidateIOSReceiptResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Fulfillments;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientValidateIOSReceiptResult) == 0x000008, "Wrong alignment on FClientValidateIOSReceiptResult");
static_assert(sizeof(FClientValidateIOSReceiptResult) == 0x000018, "Wrong size on FClientValidateIOSReceiptResult");
static_assert(offsetof(FClientValidateIOSReceiptResult, Fulfillments) == 0x000008, "Member 'FClientValidateIOSReceiptResult::Fulfillments' has a wrong offset!");

// ScriptStruct PlayFab.ClientValidateAmazonReceiptRequest
// 0x0050 (0x0058 - 0x0008)
struct FClientValidateAmazonReceiptRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchasePrice;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2187[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReceiptId;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientValidateAmazonReceiptRequest) == 0x000008, "Wrong alignment on FClientValidateAmazonReceiptRequest");
static_assert(sizeof(FClientValidateAmazonReceiptRequest) == 0x000058, "Wrong size on FClientValidateAmazonReceiptRequest");
static_assert(offsetof(FClientValidateAmazonReceiptRequest, CatalogVersion) == 0x000008, "Member 'FClientValidateAmazonReceiptRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientValidateAmazonReceiptRequest, CurrencyCode) == 0x000018, "Member 'FClientValidateAmazonReceiptRequest::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FClientValidateAmazonReceiptRequest, CustomTags) == 0x000028, "Member 'FClientValidateAmazonReceiptRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientValidateAmazonReceiptRequest, PurchasePrice) == 0x000030, "Member 'FClientValidateAmazonReceiptRequest::PurchasePrice' has a wrong offset!");
static_assert(offsetof(FClientValidateAmazonReceiptRequest, ReceiptId) == 0x000038, "Member 'FClientValidateAmazonReceiptRequest::ReceiptId' has a wrong offset!");
static_assert(offsetof(FClientValidateAmazonReceiptRequest, UserId) == 0x000048, "Member 'FClientValidateAmazonReceiptRequest::UserId' has a wrong offset!");

// ScriptStruct PlayFab.ClientWriteEventResponse
// 0x0010 (0x0018 - 0x0008)
struct FClientWriteEventResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 EventId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientWriteEventResponse) == 0x000008, "Wrong alignment on FClientWriteEventResponse");
static_assert(sizeof(FClientWriteEventResponse) == 0x000018, "Wrong size on FClientWriteEventResponse");
static_assert(offsetof(FClientWriteEventResponse, EventId) == 0x000008, "Member 'FClientWriteEventResponse::EventId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetAccountInfoRequest
// 0x0040 (0x0048 - 0x0008)
struct FClientGetAccountInfoRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Email;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleDisplayName;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetAccountInfoRequest) == 0x000008, "Wrong alignment on FClientGetAccountInfoRequest");
static_assert(sizeof(FClientGetAccountInfoRequest) == 0x000048, "Wrong size on FClientGetAccountInfoRequest");
static_assert(offsetof(FClientGetAccountInfoRequest, Email) == 0x000008, "Member 'FClientGetAccountInfoRequest::Email' has a wrong offset!");
static_assert(offsetof(FClientGetAccountInfoRequest, PlayFabId) == 0x000018, "Member 'FClientGetAccountInfoRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FClientGetAccountInfoRequest, TitleDisplayName) == 0x000028, "Member 'FClientGetAccountInfoRequest::TitleDisplayName' has a wrong offset!");
static_assert(offsetof(FClientGetAccountInfoRequest, Username) == 0x000038, "Member 'FClientGetAccountInfoRequest::Username' has a wrong offset!");

// ScriptStruct PlayFab.GroupsCreateGroupRoleResponse
// 0x0028 (0x0030 - 0x0008)
struct FGroupsCreateGroupRoleResponse final : public FPlayFabResultCommon
{
public:
	int32                                         ProfileVersion;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2188[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoleId;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsCreateGroupRoleResponse) == 0x000008, "Wrong alignment on FGroupsCreateGroupRoleResponse");
static_assert(sizeof(FGroupsCreateGroupRoleResponse) == 0x000030, "Wrong size on FGroupsCreateGroupRoleResponse");
static_assert(offsetof(FGroupsCreateGroupRoleResponse, ProfileVersion) == 0x000008, "Member 'FGroupsCreateGroupRoleResponse::ProfileVersion' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupRoleResponse, RoleId) == 0x000010, "Member 'FGroupsCreateGroupRoleResponse::RoleId' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupRoleResponse, RoleName) == 0x000020, "Member 'FGroupsCreateGroupRoleResponse::RoleName' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetCharacterDataRequest
// 0x0038 (0x0040 - 0x0008)
struct FClientGetCharacterDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IfChangedFromDataVersion;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2189[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keys;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetCharacterDataRequest) == 0x000008, "Wrong alignment on FClientGetCharacterDataRequest");
static_assert(sizeof(FClientGetCharacterDataRequest) == 0x000040, "Wrong size on FClientGetCharacterDataRequest");
static_assert(offsetof(FClientGetCharacterDataRequest, CharacterId) == 0x000008, "Member 'FClientGetCharacterDataRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterDataRequest, IfChangedFromDataVersion) == 0x000018, "Member 'FClientGetCharacterDataRequest::IfChangedFromDataVersion' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterDataRequest, Keys) == 0x000020, "Member 'FClientGetCharacterDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterDataRequest, PlayFabId) == 0x000030, "Member 'FClientGetCharacterDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetCharacterInventoryRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientGetCharacterInventoryRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetCharacterInventoryRequest) == 0x000008, "Wrong alignment on FClientGetCharacterInventoryRequest");
static_assert(sizeof(FClientGetCharacterInventoryRequest) == 0x000030, "Wrong size on FClientGetCharacterInventoryRequest");
static_assert(offsetof(FClientGetCharacterInventoryRequest, CatalogVersion) == 0x000008, "Member 'FClientGetCharacterInventoryRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterInventoryRequest, CharacterId) == 0x000018, "Member 'FClientGetCharacterInventoryRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterInventoryRequest, CustomTags) == 0x000028, "Member 'FClientGetCharacterInventoryRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetLeaderboardForUsersCharactersResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetLeaderboardForUsersCharactersResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetLeaderboardForUsersCharactersResult) == 0x000008, "Wrong alignment on FServerGetLeaderboardForUsersCharactersResult");
static_assert(sizeof(FServerGetLeaderboardForUsersCharactersResult) == 0x000018, "Wrong size on FServerGetLeaderboardForUsersCharactersResult");
static_assert(offsetof(FServerGetLeaderboardForUsersCharactersResult, Leaderboard) == 0x000008, "Member 'FServerGetLeaderboardForUsersCharactersResult::Leaderboard' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetCharacterLeaderboardRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientGetCharacterLeaderboardRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         MaxResultsCount;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPosition;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetCharacterLeaderboardRequest) == 0x000008, "Wrong alignment on FClientGetCharacterLeaderboardRequest");
static_assert(sizeof(FClientGetCharacterLeaderboardRequest) == 0x000020, "Wrong size on FClientGetCharacterLeaderboardRequest");
static_assert(offsetof(FClientGetCharacterLeaderboardRequest, MaxResultsCount) == 0x000008, "Member 'FClientGetCharacterLeaderboardRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterLeaderboardRequest, StartPosition) == 0x00000C, "Member 'FClientGetCharacterLeaderboardRequest::StartPosition' has a wrong offset!");
static_assert(offsetof(FClientGetCharacterLeaderboardRequest, StatisticName) == 0x000010, "Member 'FClientGetCharacterLeaderboardRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetCharacterStatisticsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetCharacterStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetCharacterStatisticsRequest) == 0x000008, "Wrong alignment on FClientGetCharacterStatisticsRequest");
static_assert(sizeof(FClientGetCharacterStatisticsRequest) == 0x000018, "Wrong size on FClientGetCharacterStatisticsRequest");
static_assert(offsetof(FClientGetCharacterStatisticsRequest, CharacterId) == 0x000008, "Member 'FClientGetCharacterStatisticsRequest::CharacterId' has a wrong offset!");

// ScriptStruct PlayFab.ServerDeletePushNotificationTemplateResult
// 0x0000 (0x0008 - 0x0008)
struct FServerDeletePushNotificationTemplateResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerDeletePushNotificationTemplateResult) == 0x000008, "Wrong alignment on FServerDeletePushNotificationTemplateResult");
static_assert(sizeof(FServerDeletePushNotificationTemplateResult) == 0x000008, "Wrong size on FServerDeletePushNotificationTemplateResult");

// ScriptStruct PlayFab.CloudScriptExecuteEntityCloudScriptRequest
// 0x0030 (0x0038 - 0x0008)
struct FCloudScriptExecuteEntityCloudScriptRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionParameter;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GeneratePlayStreamEvent;                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudScriptRevisionOption                    RevisionSelection;                                 // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218A[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpecificRevision;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptExecuteEntityCloudScriptRequest) == 0x000008, "Wrong alignment on FCloudScriptExecuteEntityCloudScriptRequest");
static_assert(sizeof(FCloudScriptExecuteEntityCloudScriptRequest) == 0x000038, "Wrong size on FCloudScriptExecuteEntityCloudScriptRequest");
static_assert(offsetof(FCloudScriptExecuteEntityCloudScriptRequest, CustomTags) == 0x000008, "Member 'FCloudScriptExecuteEntityCloudScriptRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteEntityCloudScriptRequest, Entity) == 0x000010, "Member 'FCloudScriptExecuteEntityCloudScriptRequest::Entity' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteEntityCloudScriptRequest, FunctionName) == 0x000018, "Member 'FCloudScriptExecuteEntityCloudScriptRequest::FunctionName' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteEntityCloudScriptRequest, FunctionParameter) == 0x000028, "Member 'FCloudScriptExecuteEntityCloudScriptRequest::FunctionParameter' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteEntityCloudScriptRequest, GeneratePlayStreamEvent) == 0x000030, "Member 'FCloudScriptExecuteEntityCloudScriptRequest::GeneratePlayStreamEvent' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteEntityCloudScriptRequest, RevisionSelection) == 0x000031, "Member 'FCloudScriptExecuteEntityCloudScriptRequest::RevisionSelection' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteEntityCloudScriptRequest, SpecificRevision) == 0x000034, "Member 'FCloudScriptExecuteEntityCloudScriptRequest::SpecificRevision' has a wrong offset!");

// ScriptStruct PlayFab.ClientRemoveGenericIDRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientRemoveGenericIDRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     GenericId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRemoveGenericIDRequest) == 0x000008, "Wrong alignment on FClientRemoveGenericIDRequest");
static_assert(sizeof(FClientRemoveGenericIDRequest) == 0x000010, "Wrong size on FClientRemoveGenericIDRequest");
static_assert(offsetof(FClientRemoveGenericIDRequest, GenericId) == 0x000008, "Member 'FClientRemoveGenericIDRequest::GenericId' has a wrong offset!");

// ScriptStruct PlayFab.ClientCurrentGamesRequest
// 0x0040 (0x0048 - 0x0008)
struct FClientCurrentGamesRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildVersion;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERegion                                       Region;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218B[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatisticName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     TagFilter;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientCurrentGamesRequest) == 0x000008, "Wrong alignment on FClientCurrentGamesRequest");
static_assert(sizeof(FClientCurrentGamesRequest) == 0x000048, "Wrong size on FClientCurrentGamesRequest");
static_assert(offsetof(FClientCurrentGamesRequest, BuildVersion) == 0x000008, "Member 'FClientCurrentGamesRequest::BuildVersion' has a wrong offset!");
static_assert(offsetof(FClientCurrentGamesRequest, GameMode) == 0x000018, "Member 'FClientCurrentGamesRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FClientCurrentGamesRequest, Region) == 0x000028, "Member 'FClientCurrentGamesRequest::Region' has a wrong offset!");
static_assert(offsetof(FClientCurrentGamesRequest, StatisticName) == 0x000030, "Member 'FClientCurrentGamesRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FClientCurrentGamesRequest, TagFilter) == 0x000040, "Member 'FClientCurrentGamesRequest::TagFilter' has a wrong offset!");

// ScriptStruct PlayFab.ClientPurchaseItemRequest
// 0x0060 (0x0068 - 0x0008)
struct FClientPurchaseItemRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218C[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StoreId;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientPurchaseItemRequest) == 0x000008, "Wrong alignment on FClientPurchaseItemRequest");
static_assert(sizeof(FClientPurchaseItemRequest) == 0x000068, "Wrong size on FClientPurchaseItemRequest");
static_assert(offsetof(FClientPurchaseItemRequest, CatalogVersion) == 0x000008, "Member 'FClientPurchaseItemRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientPurchaseItemRequest, CharacterId) == 0x000018, "Member 'FClientPurchaseItemRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientPurchaseItemRequest, CustomTags) == 0x000028, "Member 'FClientPurchaseItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientPurchaseItemRequest, ItemId) == 0x000030, "Member 'FClientPurchaseItemRequest::ItemId' has a wrong offset!");
static_assert(offsetof(FClientPurchaseItemRequest, Price) == 0x000040, "Member 'FClientPurchaseItemRequest::Price' has a wrong offset!");
static_assert(offsetof(FClientPurchaseItemRequest, StoreId) == 0x000048, "Member 'FClientPurchaseItemRequest::StoreId' has a wrong offset!");
static_assert(offsetof(FClientPurchaseItemRequest, VirtualCurrency) == 0x000058, "Member 'FClientPurchaseItemRequest::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetFriendLeaderboardRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientGetFriendLeaderboardRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExternalFriendSources                        ExternalPlatformFriends;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxResultsCount;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPosition;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218E[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatisticName;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpecificVersion;                                // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218F[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetFriendLeaderboardRequest) == 0x000008, "Wrong alignment on FClientGetFriendLeaderboardRequest");
static_assert(sizeof(FClientGetFriendLeaderboardRequest) == 0x000050, "Wrong size on FClientGetFriendLeaderboardRequest");
static_assert(offsetof(FClientGetFriendLeaderboardRequest, CustomTags) == 0x000008, "Member 'FClientGetFriendLeaderboardRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardRequest, ExternalPlatformFriends) == 0x000010, "Member 'FClientGetFriendLeaderboardRequest::ExternalPlatformFriends' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardRequest, MaxResultsCount) == 0x000014, "Member 'FClientGetFriendLeaderboardRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardRequest, ProfileConstraints) == 0x000018, "Member 'FClientGetFriendLeaderboardRequest::ProfileConstraints' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardRequest, StartPosition) == 0x000020, "Member 'FClientGetFriendLeaderboardRequest::StartPosition' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardRequest, StatisticName) == 0x000028, "Member 'FClientGetFriendLeaderboardRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardRequest, UseSpecificVersion) == 0x000038, "Member 'FClientGetFriendLeaderboardRequest::UseSpecificVersion' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardRequest, Version) == 0x00003C, "Member 'FClientGetFriendLeaderboardRequest::Version' has a wrong offset!");
static_assert(offsetof(FClientGetFriendLeaderboardRequest, XboxToken) == 0x000040, "Member 'FClientGetFriendLeaderboardRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetFriendsListRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientGetFriendsListRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExternalFriendSources                        ExternalPlatformFriends;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2190[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetFriendsListRequest) == 0x000008, "Wrong alignment on FClientGetFriendsListRequest");
static_assert(sizeof(FClientGetFriendsListRequest) == 0x000030, "Wrong size on FClientGetFriendsListRequest");
static_assert(offsetof(FClientGetFriendsListRequest, CustomTags) == 0x000008, "Member 'FClientGetFriendsListRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetFriendsListRequest, ExternalPlatformFriends) == 0x000010, "Member 'FClientGetFriendsListRequest::ExternalPlatformFriends' has a wrong offset!");
static_assert(offsetof(FClientGetFriendsListRequest, ProfileConstraints) == 0x000018, "Member 'FClientGetFriendsListRequest::ProfileConstraints' has a wrong offset!");
static_assert(offsetof(FClientGetFriendsListRequest, XboxToken) == 0x000020, "Member 'FClientGetFriendsListRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.ClientGameServerRegionsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGameServerRegionsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildVersion;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGameServerRegionsRequest) == 0x000008, "Wrong alignment on FClientGameServerRegionsRequest");
static_assert(sizeof(FClientGameServerRegionsRequest) == 0x000018, "Wrong size on FClientGameServerRegionsRequest");
static_assert(offsetof(FClientGameServerRegionsRequest, BuildVersion) == 0x000008, "Member 'FClientGameServerRegionsRequest::BuildVersion' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkIOSDeviceIDRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientUnlinkIOSDeviceIDRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceID;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkIOSDeviceIDRequest) == 0x000008, "Wrong alignment on FClientUnlinkIOSDeviceIDRequest");
static_assert(sizeof(FClientUnlinkIOSDeviceIDRequest) == 0x000020, "Wrong size on FClientUnlinkIOSDeviceIDRequest");
static_assert(offsetof(FClientUnlinkIOSDeviceIDRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkIOSDeviceIDRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientUnlinkIOSDeviceIDRequest, DeviceID) == 0x000010, "Member 'FClientUnlinkIOSDeviceIDRequest::DeviceID' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateMatchmakingTicketResult
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerCreateMatchmakingTicketResult final : public FPlayFabResultCommon
{
public:
	class FString                                 TicketId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateMatchmakingTicketResult) == 0x000008, "Wrong alignment on FMultiplayerCreateMatchmakingTicketResult");
static_assert(sizeof(FMultiplayerCreateMatchmakingTicketResult) == 0x000018, "Wrong size on FMultiplayerCreateMatchmakingTicketResult");
static_assert(offsetof(FMultiplayerCreateMatchmakingTicketResult, TicketId) == 0x000008, "Member 'FMultiplayerCreateMatchmakingTicketResult::TicketId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetUserInventoryRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerGetUserInventoryRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetUserInventoryRequest) == 0x000008, "Wrong alignment on FServerGetUserInventoryRequest");
static_assert(sizeof(FServerGetUserInventoryRequest) == 0x000020, "Wrong size on FServerGetUserInventoryRequest");
static_assert(offsetof(FServerGetUserInventoryRequest, CustomTags) == 0x000008, "Member 'FServerGetUserInventoryRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetUserInventoryRequest, PlayFabId) == 0x000010, "Member 'FServerGetUserInventoryRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerCreateSharedGroupResult
// 0x0010 (0x0018 - 0x0008)
struct FServerCreateSharedGroupResult final : public FPlayFabResultCommon
{
public:
	class FString                                 SharedGroupId;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerCreateSharedGroupResult) == 0x000008, "Wrong alignment on FServerCreateSharedGroupResult");
static_assert(sizeof(FServerCreateSharedGroupResult) == 0x000018, "Wrong size on FServerCreateSharedGroupResult");
static_assert(offsetof(FServerCreateSharedGroupResult, SharedGroupId) == 0x000008, "Member 'FServerCreateSharedGroupResult::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetLeaderboardRequest
// 0x0038 (0x0040 - 0x0008)
struct FClientGetLeaderboardRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResultsCount;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2191[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPosition;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2192[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatisticName;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpecificVersion;                                // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2193[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetLeaderboardRequest) == 0x000008, "Wrong alignment on FClientGetLeaderboardRequest");
static_assert(sizeof(FClientGetLeaderboardRequest) == 0x000040, "Wrong size on FClientGetLeaderboardRequest");
static_assert(offsetof(FClientGetLeaderboardRequest, CustomTags) == 0x000008, "Member 'FClientGetLeaderboardRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardRequest, MaxResultsCount) == 0x000010, "Member 'FClientGetLeaderboardRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardRequest, ProfileConstraints) == 0x000018, "Member 'FClientGetLeaderboardRequest::ProfileConstraints' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardRequest, StartPosition) == 0x000020, "Member 'FClientGetLeaderboardRequest::StartPosition' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardRequest, StatisticName) == 0x000028, "Member 'FClientGetLeaderboardRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardRequest, UseSpecificVersion) == 0x000038, "Member 'FClientGetLeaderboardRequest::UseSpecificVersion' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardRequest, Version) == 0x00003C, "Member 'FClientGetLeaderboardRequest::Version' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetLeaderboardAroundCharacterRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientGetLeaderboardAroundCharacterRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResultsCount;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2194[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatisticName;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetLeaderboardAroundCharacterRequest) == 0x000008, "Wrong alignment on FClientGetLeaderboardAroundCharacterRequest");
static_assert(sizeof(FClientGetLeaderboardAroundCharacterRequest) == 0x000030, "Wrong size on FClientGetLeaderboardAroundCharacterRequest");
static_assert(offsetof(FClientGetLeaderboardAroundCharacterRequest, CharacterId) == 0x000008, "Member 'FClientGetLeaderboardAroundCharacterRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundCharacterRequest, MaxResultsCount) == 0x000018, "Member 'FClientGetLeaderboardAroundCharacterRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundCharacterRequest, StatisticName) == 0x000020, "Member 'FClientGetLeaderboardAroundCharacterRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetLeaderboardAroundPlayerRequest
// 0x0040 (0x0048 - 0x0008)
struct FClientGetLeaderboardAroundPlayerRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResultsCount;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2195[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpecificVersion;                                // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2196[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetLeaderboardAroundPlayerRequest) == 0x000008, "Wrong alignment on FClientGetLeaderboardAroundPlayerRequest");
static_assert(sizeof(FClientGetLeaderboardAroundPlayerRequest) == 0x000048, "Wrong size on FClientGetLeaderboardAroundPlayerRequest");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerRequest, CustomTags) == 0x000008, "Member 'FClientGetLeaderboardAroundPlayerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerRequest, MaxResultsCount) == 0x000010, "Member 'FClientGetLeaderboardAroundPlayerRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerRequest, PlayFabId) == 0x000018, "Member 'FClientGetLeaderboardAroundPlayerRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerRequest, ProfileConstraints) == 0x000028, "Member 'FClientGetLeaderboardAroundPlayerRequest::ProfileConstraints' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerRequest, StatisticName) == 0x000030, "Member 'FClientGetLeaderboardAroundPlayerRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerRequest, UseSpecificVersion) == 0x000040, "Member 'FClientGetLeaderboardAroundPlayerRequest::UseSpecificVersion' has a wrong offset!");
static_assert(offsetof(FClientGetLeaderboardAroundPlayerRequest, Version) == 0x000044, "Member 'FClientGetLeaderboardAroundPlayerRequest::Version' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetLeaderboardForUsersCharactersRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetLeaderboardForUsersCharactersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 StatisticName;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetLeaderboardForUsersCharactersRequest) == 0x000008, "Wrong alignment on FClientGetLeaderboardForUsersCharactersRequest");
static_assert(sizeof(FClientGetLeaderboardForUsersCharactersRequest) == 0x000018, "Wrong size on FClientGetLeaderboardForUsersCharactersRequest");
static_assert(offsetof(FClientGetLeaderboardForUsersCharactersRequest, StatisticName) == 0x000008, "Member 'FClientGetLeaderboardForUsersCharactersRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPaymentTokenRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPaymentTokenRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 TokenProvider;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPaymentTokenRequest) == 0x000008, "Wrong alignment on FClientGetPaymentTokenRequest");
static_assert(sizeof(FClientGetPaymentTokenRequest) == 0x000018, "Wrong size on FClientGetPaymentTokenRequest");
static_assert(offsetof(FClientGetPaymentTokenRequest, TokenProvider) == 0x000008, "Member 'FClientGetPaymentTokenRequest::TokenProvider' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptListQueuedFunctionsResult
// 0x0010 (0x0018 - 0x0008)
struct FCloudScriptListQueuedFunctionsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Functions;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptListQueuedFunctionsResult) == 0x000008, "Wrong alignment on FCloudScriptListQueuedFunctionsResult");
static_assert(sizeof(FCloudScriptListQueuedFunctionsResult) == 0x000018, "Wrong size on FCloudScriptListQueuedFunctionsResult");
static_assert(offsetof(FCloudScriptListQueuedFunctionsResult, Functions) == 0x000008, "Member 'FCloudScriptListQueuedFunctionsResult::Functions' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPhotonAuthenticationTokenRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPhotonAuthenticationTokenRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PhotonApplicationId;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPhotonAuthenticationTokenRequest) == 0x000008, "Wrong alignment on FClientGetPhotonAuthenticationTokenRequest");
static_assert(sizeof(FClientGetPhotonAuthenticationTokenRequest) == 0x000018, "Wrong size on FClientGetPhotonAuthenticationTokenRequest");
static_assert(offsetof(FClientGetPhotonAuthenticationTokenRequest, PhotonApplicationId) == 0x000008, "Member 'FClientGetPhotonAuthenticationTokenRequest::PhotonApplicationId' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptExecuteCloudScriptResult
// 0x0058 (0x0060 - 0x0008)
struct FCloudScriptExecuteCloudScriptResult final : public FPlayFabResultCommon
{
public:
	int32                                         APIRequestsIssued;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2197[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Error;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExecutionTimeSeconds;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2198[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FunctionName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionResult;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FunctionResultTooLarge;                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2199[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HttpRequestsIssued;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Logs;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          LogsTooLarge;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219A[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MemoryConsumedBytes;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcessorTimeSeconds;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revision;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptExecuteCloudScriptResult) == 0x000008, "Wrong alignment on FCloudScriptExecuteCloudScriptResult");
static_assert(sizeof(FCloudScriptExecuteCloudScriptResult) == 0x000060, "Wrong size on FCloudScriptExecuteCloudScriptResult");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, APIRequestsIssued) == 0x000008, "Member 'FCloudScriptExecuteCloudScriptResult::APIRequestsIssued' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, Error) == 0x000010, "Member 'FCloudScriptExecuteCloudScriptResult::Error' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, ExecutionTimeSeconds) == 0x000018, "Member 'FCloudScriptExecuteCloudScriptResult::ExecutionTimeSeconds' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, FunctionName) == 0x000020, "Member 'FCloudScriptExecuteCloudScriptResult::FunctionName' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, FunctionResult) == 0x000030, "Member 'FCloudScriptExecuteCloudScriptResult::FunctionResult' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, FunctionResultTooLarge) == 0x000038, "Member 'FCloudScriptExecuteCloudScriptResult::FunctionResultTooLarge' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, HttpRequestsIssued) == 0x00003C, "Member 'FCloudScriptExecuteCloudScriptResult::HttpRequestsIssued' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, Logs) == 0x000040, "Member 'FCloudScriptExecuteCloudScriptResult::Logs' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, LogsTooLarge) == 0x000050, "Member 'FCloudScriptExecuteCloudScriptResult::LogsTooLarge' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, MemoryConsumedBytes) == 0x000054, "Member 'FCloudScriptExecuteCloudScriptResult::MemoryConsumedBytes' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, ProcessorTimeSeconds) == 0x000058, "Member 'FCloudScriptExecuteCloudScriptResult::ProcessorTimeSeconds' has a wrong offset!");
static_assert(offsetof(FCloudScriptExecuteCloudScriptResult, Revision) == 0x00005C, "Member 'FCloudScriptExecuteCloudScriptResult::Revision' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesSetEntityProfilePolicyResponse
// 0x0010 (0x0018 - 0x0008)
struct FProfilesSetEntityProfilePolicyResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Permissions;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesSetEntityProfilePolicyResponse) == 0x000008, "Wrong alignment on FProfilesSetEntityProfilePolicyResponse");
static_assert(sizeof(FProfilesSetEntityProfilePolicyResponse) == 0x000018, "Wrong size on FProfilesSetEntityProfilePolicyResponse");
static_assert(offsetof(FProfilesSetEntityProfilePolicyResponse, Permissions) == 0x000008, "Member 'FProfilesSetEntityProfilePolicyResponse::Permissions' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerCombinedInfoRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientGetPlayerCombinedInfoRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerCombinedInfoRequest) == 0x000008, "Wrong alignment on FClientGetPlayerCombinedInfoRequest");
static_assert(sizeof(FClientGetPlayerCombinedInfoRequest) == 0x000028, "Wrong size on FClientGetPlayerCombinedInfoRequest");
static_assert(offsetof(FClientGetPlayerCombinedInfoRequest, CustomTags) == 0x000008, "Member 'FClientGetPlayerCombinedInfoRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerCombinedInfoRequest, InfoRequestParameters) == 0x000010, "Member 'FClientGetPlayerCombinedInfoRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerCombinedInfoRequest, PlayFabId) == 0x000018, "Member 'FClientGetPlayerCombinedInfoRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerJoinLobbyRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerJoinLobbyRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ConnectionString;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MemberData;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MemberEntity;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerJoinLobbyRequest) == 0x000008, "Wrong alignment on FMultiplayerJoinLobbyRequest");
static_assert(sizeof(FMultiplayerJoinLobbyRequest) == 0x000030, "Wrong size on FMultiplayerJoinLobbyRequest");
static_assert(offsetof(FMultiplayerJoinLobbyRequest, ConnectionString) == 0x000008, "Member 'FMultiplayerJoinLobbyRequest::ConnectionString' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinLobbyRequest, CustomTags) == 0x000018, "Member 'FMultiplayerJoinLobbyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinLobbyRequest, MemberData) == 0x000020, "Member 'FMultiplayerJoinLobbyRequest::MemberData' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinLobbyRequest, MemberEntity) == 0x000028, "Member 'FMultiplayerJoinLobbyRequest::MemberEntity' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerSegmentsRequest
// 0x0000 (0x0008 - 0x0008)
struct FClientGetPlayerSegmentsRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FClientGetPlayerSegmentsRequest) == 0x000008, "Wrong alignment on FClientGetPlayerSegmentsRequest");
static_assert(sizeof(FClientGetPlayerSegmentsRequest) == 0x000008, "Wrong size on FClientGetPlayerSegmentsRequest");

// ScriptStruct PlayFab.ClientGetPlayerStatisticVersionsRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientGetPlayerStatisticVersionsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerStatisticVersionsRequest) == 0x000008, "Wrong alignment on FClientGetPlayerStatisticVersionsRequest");
static_assert(sizeof(FClientGetPlayerStatisticVersionsRequest) == 0x000020, "Wrong size on FClientGetPlayerStatisticVersionsRequest");
static_assert(offsetof(FClientGetPlayerStatisticVersionsRequest, CustomTags) == 0x000008, "Member 'FClientGetPlayerStatisticVersionsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerStatisticVersionsRequest, StatisticName) == 0x000010, "Member 'FClientGetPlayerStatisticVersionsRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult");
static_assert(sizeof(FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult");
static_assert(offsetof(FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, Data) == 0x000008, "Member 'FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.InsightsInsightsGetPendingOperationsResponse
// 0x0010 (0x0018 - 0x0008)
struct FInsightsInsightsGetPendingOperationsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             PendingOperations;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInsightsInsightsGetPendingOperationsResponse) == 0x000008, "Wrong alignment on FInsightsInsightsGetPendingOperationsResponse");
static_assert(sizeof(FInsightsInsightsGetPendingOperationsResponse) == 0x000018, "Wrong size on FInsightsInsightsGetPendingOperationsResponse");
static_assert(offsetof(FInsightsInsightsGetPendingOperationsResponse, PendingOperations) == 0x000008, "Member 'FInsightsInsightsGetPendingOperationsResponse::PendingOperations' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerTagsRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientGetPlayerTagsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayerTagsRequest) == 0x000008, "Wrong alignment on FClientGetPlayerTagsRequest");
static_assert(sizeof(FClientGetPlayerTagsRequest) == 0x000030, "Wrong size on FClientGetPlayerTagsRequest");
static_assert(offsetof(FClientGetPlayerTagsRequest, CustomTags) == 0x000008, "Member 'FClientGetPlayerTagsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerTagsRequest, Namespace) == 0x000010, "Member 'FClientGetPlayerTagsRequest::Namespace' has a wrong offset!");
static_assert(offsetof(FClientGetPlayerTagsRequest, PlayFabId) == 0x000020, "Member 'FClientGetPlayerTagsRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayerTradesRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientGetPlayerTradesRequest final : public FPlayFabRequestCommon
{
public:
	ETradeStatus                                  StatusFilter;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGetPlayerTradesRequest) == 0x000008, "Wrong alignment on FClientGetPlayerTradesRequest");
static_assert(sizeof(FClientGetPlayerTradesRequest) == 0x000010, "Wrong size on FClientGetPlayerTradesRequest");
static_assert(offsetof(FClientGetPlayerTradesRequest, StatusFilter) == 0x000008, "Member 'FClientGetPlayerTradesRequest::StatusFilter' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationStartExperimentRequest
// 0x0018 (0x0020 - 0x0008)
struct FExperimentationStartExperimentRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExperimentId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationStartExperimentRequest) == 0x000008, "Wrong alignment on FExperimentationStartExperimentRequest");
static_assert(sizeof(FExperimentationStartExperimentRequest) == 0x000020, "Wrong size on FExperimentationStartExperimentRequest");
static_assert(offsetof(FExperimentationStartExperimentRequest, CustomTags) == 0x000008, "Member 'FExperimentationStartExperimentRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationStartExperimentRequest, ExperimentId) == 0x000010, "Member 'FExperimentationStartExperimentRequest::ExperimentId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FacebookInstantGamesIds;                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest, FacebookInstantGamesIds) == 0x000008, "Member 'FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest::FacebookInstantGamesIds' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromTwitchIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPlayFabIDsFromTwitchIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 TwitchIds;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromTwitchIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromTwitchIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromTwitchIDsRequest) == 0x000018, "Wrong size on FClientGetPlayFabIDsFromTwitchIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromTwitchIDsRequest, TwitchIds) == 0x000008, "Member 'FClientGetPlayFabIDsFromTwitchIDsRequest::TwitchIds' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPlayFabIDsFromXboxLiveIDsRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientGetPlayFabIDsFromXboxLiveIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Sandbox;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxLiveAccountIDs;                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPlayFabIDsFromXboxLiveIDsRequest) == 0x000008, "Wrong alignment on FClientGetPlayFabIDsFromXboxLiveIDsRequest");
static_assert(sizeof(FClientGetPlayFabIDsFromXboxLiveIDsRequest) == 0x000028, "Wrong size on FClientGetPlayFabIDsFromXboxLiveIDsRequest");
static_assert(offsetof(FClientGetPlayFabIDsFromXboxLiveIDsRequest, Sandbox) == 0x000008, "Member 'FClientGetPlayFabIDsFromXboxLiveIDsRequest::Sandbox' has a wrong offset!");
static_assert(offsetof(FClientGetPlayFabIDsFromXboxLiveIDsRequest, XboxLiveAccountIDs) == 0x000018, "Member 'FClientGetPlayFabIDsFromXboxLiveIDsRequest::XboxLiveAccountIDs' has a wrong offset!");

// ScriptStruct PlayFab.ServerRedeemCouponResult
// 0x0010 (0x0018 - 0x0008)
struct FServerRedeemCouponResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             GrantedItems;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRedeemCouponResult) == 0x000008, "Wrong alignment on FServerRedeemCouponResult");
static_assert(sizeof(FServerRedeemCouponResult) == 0x000018, "Wrong size on FServerRedeemCouponResult");
static_assert(offsetof(FServerRedeemCouponResult, GrantedItems) == 0x000008, "Member 'FServerRedeemCouponResult::GrantedItems' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetPurchaseRequest
// 0x0010 (0x0018 - 0x0008)
struct FClientGetPurchaseRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 OrderID;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetPurchaseRequest) == 0x000008, "Wrong alignment on FClientGetPurchaseRequest");
static_assert(sizeof(FClientGetPurchaseRequest) == 0x000018, "Wrong size on FClientGetPurchaseRequest");
static_assert(offsetof(FClientGetPurchaseRequest, OrderID) == 0x000008, "Member 'FClientGetPurchaseRequest::OrderID' has a wrong offset!");

// ScriptStruct PlayFab.DataGetFilesRequest
// 0x0010 (0x0018 - 0x0008)
struct FDataGetFilesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataGetFilesRequest) == 0x000008, "Wrong alignment on FDataGetFilesRequest");
static_assert(sizeof(FDataGetFilesRequest) == 0x000018, "Wrong size on FDataGetFilesRequest");
static_assert(offsetof(FDataGetFilesRequest, CustomTags) == 0x000008, "Member 'FDataGetFilesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FDataGetFilesRequest, Entity) == 0x000010, "Member 'FDataGetFilesRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetSharedGroupDataRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientGetSharedGroupDataRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          GetMembers;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keys;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SharedGroupId;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientGetSharedGroupDataRequest) == 0x000008, "Wrong alignment on FClientGetSharedGroupDataRequest");
static_assert(sizeof(FClientGetSharedGroupDataRequest) == 0x000030, "Wrong size on FClientGetSharedGroupDataRequest");
static_assert(offsetof(FClientGetSharedGroupDataRequest, GetMembers) == 0x000008, "Member 'FClientGetSharedGroupDataRequest::GetMembers' has a wrong offset!");
static_assert(offsetof(FClientGetSharedGroupDataRequest, Keys) == 0x000010, "Member 'FClientGetSharedGroupDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FClientGetSharedGroupDataRequest, SharedGroupId) == 0x000020, "Member 'FClientGetSharedGroupDataRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ClientGetTitleNewsRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientGetTitleNewsRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219D[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientGetTitleNewsRequest) == 0x000008, "Wrong alignment on FClientGetTitleNewsRequest");
static_assert(sizeof(FClientGetTitleNewsRequest) == 0x000010, "Wrong size on FClientGetTitleNewsRequest");
static_assert(offsetof(FClientGetTitleNewsRequest, Count) == 0x000008, "Member 'FClientGetTitleNewsRequest::Count' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetPublisherDataResult
// 0x0000 (0x0008 - 0x0008)
struct FServerSetPublisherDataResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerSetPublisherDataResult) == 0x000008, "Wrong alignment on FServerSetPublisherDataResult");
static_assert(sizeof(FServerSetPublisherDataResult) == 0x000008, "Wrong size on FServerSetPublisherDataResult");

// ScriptStruct PlayFab.ClientLinkAndroidDeviceIDRequest
// 0x0040 (0x0048 - 0x0008)
struct FClientLinkAndroidDeviceIDRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AndroidDevice;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidDeviceId;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219E[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OS;                                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkAndroidDeviceIDRequest) == 0x000008, "Wrong alignment on FClientLinkAndroidDeviceIDRequest");
static_assert(sizeof(FClientLinkAndroidDeviceIDRequest) == 0x000048, "Wrong size on FClientLinkAndroidDeviceIDRequest");
static_assert(offsetof(FClientLinkAndroidDeviceIDRequest, AndroidDevice) == 0x000008, "Member 'FClientLinkAndroidDeviceIDRequest::AndroidDevice' has a wrong offset!");
static_assert(offsetof(FClientLinkAndroidDeviceIDRequest, AndroidDeviceId) == 0x000018, "Member 'FClientLinkAndroidDeviceIDRequest::AndroidDeviceId' has a wrong offset!");
static_assert(offsetof(FClientLinkAndroidDeviceIDRequest, CustomTags) == 0x000028, "Member 'FClientLinkAndroidDeviceIDRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkAndroidDeviceIDRequest, ForceLink) == 0x000030, "Member 'FClientLinkAndroidDeviceIDRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkAndroidDeviceIDRequest, OS) == 0x000038, "Member 'FClientLinkAndroidDeviceIDRequest::OS' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkCustomIDRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkCustomIDRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CustomId;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219F[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientLinkCustomIDRequest) == 0x000008, "Wrong alignment on FClientLinkCustomIDRequest");
static_assert(sizeof(FClientLinkCustomIDRequest) == 0x000028, "Wrong size on FClientLinkCustomIDRequest");
static_assert(offsetof(FClientLinkCustomIDRequest, CustomId) == 0x000008, "Member 'FClientLinkCustomIDRequest::CustomId' has a wrong offset!");
static_assert(offsetof(FClientLinkCustomIDRequest, CustomTags) == 0x000018, "Member 'FClientLinkCustomIDRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkCustomIDRequest, ForceLink) == 0x000020, "Member 'FClientLinkCustomIDRequest::ForceLink' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkGameCenterAccountRequest
// 0x0060 (0x0068 - 0x0008)
struct FClientLinkGameCenterAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A0[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameCenterId;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublicKeyUrl;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Salt;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Signature;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkGameCenterAccountRequest) == 0x000008, "Wrong alignment on FClientLinkGameCenterAccountRequest");
static_assert(sizeof(FClientLinkGameCenterAccountRequest) == 0x000068, "Wrong size on FClientLinkGameCenterAccountRequest");
static_assert(offsetof(FClientLinkGameCenterAccountRequest, CustomTags) == 0x000008, "Member 'FClientLinkGameCenterAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkGameCenterAccountRequest, ForceLink) == 0x000010, "Member 'FClientLinkGameCenterAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkGameCenterAccountRequest, GameCenterId) == 0x000018, "Member 'FClientLinkGameCenterAccountRequest::GameCenterId' has a wrong offset!");
static_assert(offsetof(FClientLinkGameCenterAccountRequest, PublicKeyUrl) == 0x000028, "Member 'FClientLinkGameCenterAccountRequest::PublicKeyUrl' has a wrong offset!");
static_assert(offsetof(FClientLinkGameCenterAccountRequest, Salt) == 0x000038, "Member 'FClientLinkGameCenterAccountRequest::Salt' has a wrong offset!");
static_assert(offsetof(FClientLinkGameCenterAccountRequest, Signature) == 0x000048, "Member 'FClientLinkGameCenterAccountRequest::Signature' has a wrong offset!");
static_assert(offsetof(FClientLinkGameCenterAccountRequest, Timestamp) == 0x000058, "Member 'FClientLinkGameCenterAccountRequest::Timestamp' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetRemoteLoginEndpointRequest
// 0x0038 (0x0040 - 0x0008)
struct FMultiplayerGetRemoteLoginEndpointRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VmId;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetRemoteLoginEndpointRequest) == 0x000008, "Wrong alignment on FMultiplayerGetRemoteLoginEndpointRequest");
static_assert(sizeof(FMultiplayerGetRemoteLoginEndpointRequest) == 0x000040, "Wrong size on FMultiplayerGetRemoteLoginEndpointRequest");
static_assert(offsetof(FMultiplayerGetRemoteLoginEndpointRequest, BuildId) == 0x000008, "Member 'FMultiplayerGetRemoteLoginEndpointRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetRemoteLoginEndpointRequest, CustomTags) == 0x000018, "Member 'FMultiplayerGetRemoteLoginEndpointRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetRemoteLoginEndpointRequest, Region) == 0x000020, "Member 'FMultiplayerGetRemoteLoginEndpointRequest::Region' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetRemoteLoginEndpointRequest, VmId) == 0x000030, "Member 'FMultiplayerGetRemoteLoginEndpointRequest::VmId' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkGooglePlayGamesServicesAccountRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkGooglePlayGamesServicesAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A1[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerAuthCode;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkGooglePlayGamesServicesAccountRequest) == 0x000008, "Wrong alignment on FClientLinkGooglePlayGamesServicesAccountRequest");
static_assert(sizeof(FClientLinkGooglePlayGamesServicesAccountRequest) == 0x000028, "Wrong size on FClientLinkGooglePlayGamesServicesAccountRequest");
static_assert(offsetof(FClientLinkGooglePlayGamesServicesAccountRequest, CustomTags) == 0x000008, "Member 'FClientLinkGooglePlayGamesServicesAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkGooglePlayGamesServicesAccountRequest, ForceLink) == 0x000010, "Member 'FClientLinkGooglePlayGamesServicesAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkGooglePlayGamesServicesAccountRequest, ServerAuthCode) == 0x000018, "Member 'FClientLinkGooglePlayGamesServicesAccountRequest::ServerAuthCode' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetTitleEnabledForMultiplayerServersStatusRequest
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest) == 0x000008, "Wrong alignment on FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest");
static_assert(sizeof(FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest) == 0x000010, "Wrong size on FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest");
static_assert(offsetof(FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkIOSDeviceIDRequest
// 0x0040 (0x0048 - 0x0008)
struct FClientLinkIOSDeviceIDRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceID;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceModel;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A2[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OS;                                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkIOSDeviceIDRequest) == 0x000008, "Wrong alignment on FClientLinkIOSDeviceIDRequest");
static_assert(sizeof(FClientLinkIOSDeviceIDRequest) == 0x000048, "Wrong size on FClientLinkIOSDeviceIDRequest");
static_assert(offsetof(FClientLinkIOSDeviceIDRequest, CustomTags) == 0x000008, "Member 'FClientLinkIOSDeviceIDRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkIOSDeviceIDRequest, DeviceID) == 0x000010, "Member 'FClientLinkIOSDeviceIDRequest::DeviceID' has a wrong offset!");
static_assert(offsetof(FClientLinkIOSDeviceIDRequest, DeviceModel) == 0x000020, "Member 'FClientLinkIOSDeviceIDRequest::DeviceModel' has a wrong offset!");
static_assert(offsetof(FClientLinkIOSDeviceIDRequest, ForceLink) == 0x000030, "Member 'FClientLinkIOSDeviceIDRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkIOSDeviceIDRequest, OS) == 0x000038, "Member 'FClientLinkIOSDeviceIDRequest::OS' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkKongregateAccountRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientLinkKongregateAccountRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AuthTicket;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A3[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KongregateId;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLinkKongregateAccountRequest) == 0x000008, "Wrong alignment on FClientLinkKongregateAccountRequest");
static_assert(sizeof(FClientLinkKongregateAccountRequest) == 0x000038, "Wrong size on FClientLinkKongregateAccountRequest");
static_assert(offsetof(FClientLinkKongregateAccountRequest, AuthTicket) == 0x000008, "Member 'FClientLinkKongregateAccountRequest::AuthTicket' has a wrong offset!");
static_assert(offsetof(FClientLinkKongregateAccountRequest, CustomTags) == 0x000018, "Member 'FClientLinkKongregateAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkKongregateAccountRequest, ForceLink) == 0x000020, "Member 'FClientLinkKongregateAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FClientLinkKongregateAccountRequest, KongregateId) == 0x000028, "Member 'FClientLinkKongregateAccountRequest::KongregateId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetTitleMultiplayerServersQuotasRequest
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerGetTitleMultiplayerServersQuotasRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetTitleMultiplayerServersQuotasRequest) == 0x000008, "Wrong alignment on FMultiplayerGetTitleMultiplayerServersQuotasRequest");
static_assert(sizeof(FMultiplayerGetTitleMultiplayerServersQuotasRequest) == 0x000010, "Wrong size on FMultiplayerGetTitleMultiplayerServersQuotasRequest");
static_assert(offsetof(FMultiplayerGetTitleMultiplayerServersQuotasRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetTitleMultiplayerServersQuotasRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientLinkTwitchAccountRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientLinkTwitchAccountRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AccessToken;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A4[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientLinkTwitchAccountRequest) == 0x000008, "Wrong alignment on FClientLinkTwitchAccountRequest");
static_assert(sizeof(FClientLinkTwitchAccountRequest) == 0x000028, "Wrong size on FClientLinkTwitchAccountRequest");
static_assert(offsetof(FClientLinkTwitchAccountRequest, AccessToken) == 0x000008, "Member 'FClientLinkTwitchAccountRequest::AccessToken' has a wrong offset!");
static_assert(offsetof(FClientLinkTwitchAccountRequest, CustomTags) == 0x000018, "Member 'FClientLinkTwitchAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLinkTwitchAccountRequest, ForceLink) == 0x000020, "Member 'FClientLinkTwitchAccountRequest::ForceLink' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerDeleteBuildRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerDeleteBuildRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerDeleteBuildRequest) == 0x000008, "Wrong alignment on FMultiplayerDeleteBuildRequest");
static_assert(sizeof(FMultiplayerDeleteBuildRequest) == 0x000020, "Wrong size on FMultiplayerDeleteBuildRequest");
static_assert(offsetof(FMultiplayerDeleteBuildRequest, BuildId) == 0x000008, "Member 'FMultiplayerDeleteBuildRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteBuildRequest, CustomTags) == 0x000018, "Member 'FMultiplayerDeleteBuildRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithAndroidDeviceIDRequest
// 0x0068 (0x0070 - 0x0008)
struct FClientLoginWithAndroidDeviceIDRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AndroidDevice;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AndroidDeviceId;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateAccount;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A5[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OS;                                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithAndroidDeviceIDRequest) == 0x000008, "Wrong alignment on FClientLoginWithAndroidDeviceIDRequest");
static_assert(sizeof(FClientLoginWithAndroidDeviceIDRequest) == 0x000070, "Wrong size on FClientLoginWithAndroidDeviceIDRequest");
static_assert(offsetof(FClientLoginWithAndroidDeviceIDRequest, AndroidDevice) == 0x000008, "Member 'FClientLoginWithAndroidDeviceIDRequest::AndroidDevice' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAndroidDeviceIDRequest, AndroidDeviceId) == 0x000018, "Member 'FClientLoginWithAndroidDeviceIDRequest::AndroidDeviceId' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAndroidDeviceIDRequest, CreateAccount) == 0x000028, "Member 'FClientLoginWithAndroidDeviceIDRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAndroidDeviceIDRequest, CustomTags) == 0x000030, "Member 'FClientLoginWithAndroidDeviceIDRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAndroidDeviceIDRequest, EncryptedRequest) == 0x000038, "Member 'FClientLoginWithAndroidDeviceIDRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAndroidDeviceIDRequest, InfoRequestParameters) == 0x000048, "Member 'FClientLoginWithAndroidDeviceIDRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAndroidDeviceIDRequest, OS) == 0x000050, "Member 'FClientLoginWithAndroidDeviceIDRequest::OS' has a wrong offset!");
static_assert(offsetof(FClientLoginWithAndroidDeviceIDRequest, PlayerSecret) == 0x000060, "Member 'FClientLoginWithAndroidDeviceIDRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerDeleteBuildRegionRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerDeleteBuildRegionRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerDeleteBuildRegionRequest) == 0x000008, "Wrong alignment on FMultiplayerDeleteBuildRegionRequest");
static_assert(sizeof(FMultiplayerDeleteBuildRegionRequest) == 0x000030, "Wrong size on FMultiplayerDeleteBuildRegionRequest");
static_assert(offsetof(FMultiplayerDeleteBuildRegionRequest, BuildId) == 0x000008, "Member 'FMultiplayerDeleteBuildRegionRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteBuildRegionRequest, CustomTags) == 0x000018, "Member 'FMultiplayerDeleteBuildRegionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteBuildRegionRequest, Region) == 0x000020, "Member 'FMultiplayerDeleteBuildRegionRequest::Region' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithEmailAddressRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientLoginWithEmailAddressRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithEmailAddressRequest) == 0x000008, "Wrong alignment on FClientLoginWithEmailAddressRequest");
static_assert(sizeof(FClientLoginWithEmailAddressRequest) == 0x000038, "Wrong size on FClientLoginWithEmailAddressRequest");
static_assert(offsetof(FClientLoginWithEmailAddressRequest, CustomTags) == 0x000008, "Member 'FClientLoginWithEmailAddressRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithEmailAddressRequest, Email) == 0x000010, "Member 'FClientLoginWithEmailAddressRequest::Email' has a wrong offset!");
static_assert(offsetof(FClientLoginWithEmailAddressRequest, InfoRequestParameters) == 0x000020, "Member 'FClientLoginWithEmailAddressRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithEmailAddressRequest, Password) == 0x000028, "Member 'FClientLoginWithEmailAddressRequest::Password' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithFacebookInstantGamesIdRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientLoginWithFacebookInstantGamesIdRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A6[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FacebookInstantGamesSignature;                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithFacebookInstantGamesIdRequest) == 0x000008, "Wrong alignment on FClientLoginWithFacebookInstantGamesIdRequest");
static_assert(sizeof(FClientLoginWithFacebookInstantGamesIdRequest) == 0x000050, "Wrong size on FClientLoginWithFacebookInstantGamesIdRequest");
static_assert(offsetof(FClientLoginWithFacebookInstantGamesIdRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithFacebookInstantGamesIdRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookInstantGamesIdRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithFacebookInstantGamesIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookInstantGamesIdRequest, EncryptedRequest) == 0x000018, "Member 'FClientLoginWithFacebookInstantGamesIdRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookInstantGamesIdRequest, FacebookInstantGamesSignature) == 0x000028, "Member 'FClientLoginWithFacebookInstantGamesIdRequest::FacebookInstantGamesSignature' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookInstantGamesIdRequest, InfoRequestParameters) == 0x000038, "Member 'FClientLoginWithFacebookInstantGamesIdRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithFacebookInstantGamesIdRequest, PlayerSecret) == 0x000040, "Member 'FClientLoginWithFacebookInstantGamesIdRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithGameCenterRequest
// 0x0088 (0x0090 - 0x0008)
struct FClientLoginWithGameCenterRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A7[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublicKeyUrl;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Salt;                                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Signature;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithGameCenterRequest) == 0x000008, "Wrong alignment on FClientLoginWithGameCenterRequest");
static_assert(sizeof(FClientLoginWithGameCenterRequest) == 0x000090, "Wrong size on FClientLoginWithGameCenterRequest");
static_assert(offsetof(FClientLoginWithGameCenterRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithGameCenterRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGameCenterRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithGameCenterRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGameCenterRequest, EncryptedRequest) == 0x000018, "Member 'FClientLoginWithGameCenterRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGameCenterRequest, InfoRequestParameters) == 0x000028, "Member 'FClientLoginWithGameCenterRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGameCenterRequest, PlayerId) == 0x000030, "Member 'FClientLoginWithGameCenterRequest::PlayerId' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGameCenterRequest, PlayerSecret) == 0x000040, "Member 'FClientLoginWithGameCenterRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGameCenterRequest, PublicKeyUrl) == 0x000050, "Member 'FClientLoginWithGameCenterRequest::PublicKeyUrl' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGameCenterRequest, Salt) == 0x000060, "Member 'FClientLoginWithGameCenterRequest::Salt' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGameCenterRequest, Signature) == 0x000070, "Member 'FClientLoginWithGameCenterRequest::Signature' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGameCenterRequest, Timestamp) == 0x000080, "Member 'FClientLoginWithGameCenterRequest::Timestamp' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerJoinMatchmakingTicketResult
// 0x0000 (0x0008 - 0x0008)
struct FMultiplayerJoinMatchmakingTicketResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FMultiplayerJoinMatchmakingTicketResult) == 0x000008, "Wrong alignment on FMultiplayerJoinMatchmakingTicketResult");
static_assert(sizeof(FMultiplayerJoinMatchmakingTicketResult) == 0x000008, "Wrong size on FMultiplayerJoinMatchmakingTicketResult");

// ScriptStruct PlayFab.ClientLoginWithGoogleAccountRequest
// 0x0050 (0x0058 - 0x0008)
struct FClientLoginWithGoogleAccountRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A8[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerAuthCode;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetEmail;                                          // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A9[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientLoginWithGoogleAccountRequest) == 0x000008, "Wrong alignment on FClientLoginWithGoogleAccountRequest");
static_assert(sizeof(FClientLoginWithGoogleAccountRequest) == 0x000058, "Wrong size on FClientLoginWithGoogleAccountRequest");
static_assert(offsetof(FClientLoginWithGoogleAccountRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithGoogleAccountRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGoogleAccountRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithGoogleAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGoogleAccountRequest, EncryptedRequest) == 0x000018, "Member 'FClientLoginWithGoogleAccountRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGoogleAccountRequest, InfoRequestParameters) == 0x000028, "Member 'FClientLoginWithGoogleAccountRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGoogleAccountRequest, PlayerSecret) == 0x000030, "Member 'FClientLoginWithGoogleAccountRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGoogleAccountRequest, ServerAuthCode) == 0x000040, "Member 'FClientLoginWithGoogleAccountRequest::ServerAuthCode' has a wrong offset!");
static_assert(offsetof(FClientLoginWithGoogleAccountRequest, SetEmail) == 0x000050, "Member 'FClientLoginWithGoogleAccountRequest::SetEmail' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithKongregateRequest
// 0x0058 (0x0060 - 0x0008)
struct FClientLoginWithKongregateRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AuthTicket;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateAccount;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AA[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KongregateId;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithKongregateRequest) == 0x000008, "Wrong alignment on FClientLoginWithKongregateRequest");
static_assert(sizeof(FClientLoginWithKongregateRequest) == 0x000060, "Wrong size on FClientLoginWithKongregateRequest");
static_assert(offsetof(FClientLoginWithKongregateRequest, AuthTicket) == 0x000008, "Member 'FClientLoginWithKongregateRequest::AuthTicket' has a wrong offset!");
static_assert(offsetof(FClientLoginWithKongregateRequest, CreateAccount) == 0x000018, "Member 'FClientLoginWithKongregateRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithKongregateRequest, CustomTags) == 0x000020, "Member 'FClientLoginWithKongregateRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithKongregateRequest, EncryptedRequest) == 0x000028, "Member 'FClientLoginWithKongregateRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithKongregateRequest, InfoRequestParameters) == 0x000038, "Member 'FClientLoginWithKongregateRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithKongregateRequest, KongregateId) == 0x000040, "Member 'FClientLoginWithKongregateRequest::KongregateId' has a wrong offset!");
static_assert(offsetof(FClientLoginWithKongregateRequest, PlayerSecret) == 0x000050, "Member 'FClientLoginWithKongregateRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetBuildRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetBuildRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetBuildRequest) == 0x000008, "Wrong alignment on FMultiplayerGetBuildRequest");
static_assert(sizeof(FMultiplayerGetBuildRequest) == 0x000020, "Wrong size on FMultiplayerGetBuildRequest");
static_assert(offsetof(FMultiplayerGetBuildRequest, BuildId) == 0x000008, "Member 'FMultiplayerGetBuildRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildRequest, CustomTags) == 0x000018, "Member 'FMultiplayerGetBuildRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithNintendoServiceAccountRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientLoginWithNintendoServiceAccountRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AB[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdentityToken;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithNintendoServiceAccountRequest) == 0x000008, "Wrong alignment on FClientLoginWithNintendoServiceAccountRequest");
static_assert(sizeof(FClientLoginWithNintendoServiceAccountRequest) == 0x000050, "Wrong size on FClientLoginWithNintendoServiceAccountRequest");
static_assert(offsetof(FClientLoginWithNintendoServiceAccountRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithNintendoServiceAccountRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoServiceAccountRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithNintendoServiceAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoServiceAccountRequest, EncryptedRequest) == 0x000018, "Member 'FClientLoginWithNintendoServiceAccountRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoServiceAccountRequest, IdentityToken) == 0x000028, "Member 'FClientLoginWithNintendoServiceAccountRequest::IdentityToken' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoServiceAccountRequest, InfoRequestParameters) == 0x000038, "Member 'FClientLoginWithNintendoServiceAccountRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoServiceAccountRequest, PlayerSecret) == 0x000040, "Member 'FClientLoginWithNintendoServiceAccountRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithNintendoSwitchDeviceIdRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientLoginWithNintendoSwitchDeviceIdRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AC[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NintendoSwitchDeviceId;                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithNintendoSwitchDeviceIdRequest) == 0x000008, "Wrong alignment on FClientLoginWithNintendoSwitchDeviceIdRequest");
static_assert(sizeof(FClientLoginWithNintendoSwitchDeviceIdRequest) == 0x000050, "Wrong size on FClientLoginWithNintendoSwitchDeviceIdRequest");
static_assert(offsetof(FClientLoginWithNintendoSwitchDeviceIdRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithNintendoSwitchDeviceIdRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoSwitchDeviceIdRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithNintendoSwitchDeviceIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoSwitchDeviceIdRequest, EncryptedRequest) == 0x000018, "Member 'FClientLoginWithNintendoSwitchDeviceIdRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoSwitchDeviceIdRequest, InfoRequestParameters) == 0x000028, "Member 'FClientLoginWithNintendoSwitchDeviceIdRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId) == 0x000030, "Member 'FClientLoginWithNintendoSwitchDeviceIdRequest::NintendoSwitchDeviceId' has a wrong offset!");
static_assert(offsetof(FClientLoginWithNintendoSwitchDeviceIdRequest, PlayerSecret) == 0x000040, "Member 'FClientLoginWithNintendoSwitchDeviceIdRequest::PlayerSecret' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetContainerRegistryCredentialsRequest
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerGetContainerRegistryCredentialsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetContainerRegistryCredentialsRequest) == 0x000008, "Wrong alignment on FMultiplayerGetContainerRegistryCredentialsRequest");
static_assert(sizeof(FMultiplayerGetContainerRegistryCredentialsRequest) == 0x000010, "Wrong size on FMultiplayerGetContainerRegistryCredentialsRequest");
static_assert(offsetof(FMultiplayerGetContainerRegistryCredentialsRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetContainerRegistryCredentialsRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithPlayFabRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientLoginWithPlayFabRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginWithPlayFabRequest) == 0x000008, "Wrong alignment on FClientLoginWithPlayFabRequest");
static_assert(sizeof(FClientLoginWithPlayFabRequest) == 0x000038, "Wrong size on FClientLoginWithPlayFabRequest");
static_assert(offsetof(FClientLoginWithPlayFabRequest, CustomTags) == 0x000008, "Member 'FClientLoginWithPlayFabRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPlayFabRequest, InfoRequestParameters) == 0x000010, "Member 'FClientLoginWithPlayFabRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPlayFabRequest, Password) == 0x000018, "Member 'FClientLoginWithPlayFabRequest::Password' has a wrong offset!");
static_assert(offsetof(FClientLoginWithPlayFabRequest, Username) == 0x000028, "Member 'FClientLoginWithPlayFabRequest::Username' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetMatchRequest
// 0x0038 (0x0040 - 0x0008)
struct FMultiplayerGetMatchRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EscapeObject;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AD[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnMemberAttributes;                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AE[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerGetMatchRequest) == 0x000008, "Wrong alignment on FMultiplayerGetMatchRequest");
static_assert(sizeof(FMultiplayerGetMatchRequest) == 0x000040, "Wrong size on FMultiplayerGetMatchRequest");
static_assert(offsetof(FMultiplayerGetMatchRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetMatchRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchRequest, EscapeObject) == 0x000010, "Member 'FMultiplayerGetMatchRequest::EscapeObject' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchRequest, MatchID) == 0x000018, "Member 'FMultiplayerGetMatchRequest::MatchID' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchRequest, QueueName) == 0x000028, "Member 'FMultiplayerGetMatchRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchRequest, ReturnMemberAttributes) == 0x000038, "Member 'FMultiplayerGetMatchRequest::ReturnMemberAttributes' has a wrong offset!");

// ScriptStruct PlayFab.ClientLoginWithSteamRequest
// 0x0050 (0x0058 - 0x0008)
struct FClientLoginWithSteamRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncryptedRequest;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerSecret;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamTicket;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TicketIsServiceSpecific;                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B0[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientLoginWithSteamRequest) == 0x000008, "Wrong alignment on FClientLoginWithSteamRequest");
static_assert(sizeof(FClientLoginWithSteamRequest) == 0x000058, "Wrong size on FClientLoginWithSteamRequest");
static_assert(offsetof(FClientLoginWithSteamRequest, CreateAccount) == 0x000008, "Member 'FClientLoginWithSteamRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FClientLoginWithSteamRequest, CustomTags) == 0x000010, "Member 'FClientLoginWithSteamRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientLoginWithSteamRequest, EncryptedRequest) == 0x000018, "Member 'FClientLoginWithSteamRequest::EncryptedRequest' has a wrong offset!");
static_assert(offsetof(FClientLoginWithSteamRequest, InfoRequestParameters) == 0x000028, "Member 'FClientLoginWithSteamRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FClientLoginWithSteamRequest, PlayerSecret) == 0x000030, "Member 'FClientLoginWithSteamRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FClientLoginWithSteamRequest, SteamTicket) == 0x000040, "Member 'FClientLoginWithSteamRequest::SteamTicket' has a wrong offset!");
static_assert(offsetof(FClientLoginWithSteamRequest, TicketIsServiceSpecific) == 0x000050, "Member 'FClientLoginWithSteamRequest::TicketIsServiceSpecific' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetMultiplayerServerDetailsRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetMultiplayerServerDetailsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetMultiplayerServerDetailsRequest) == 0x000008, "Wrong alignment on FMultiplayerGetMultiplayerServerDetailsRequest");
static_assert(sizeof(FMultiplayerGetMultiplayerServerDetailsRequest) == 0x000020, "Wrong size on FMultiplayerGetMultiplayerServerDetailsRequest");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetMultiplayerServerDetailsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerDetailsRequest, SessionId) == 0x000010, "Member 'FMultiplayerGetMultiplayerServerDetailsRequest::SessionId' has a wrong offset!");

// ScriptStruct PlayFab.ClientMatchmakeRequest
// 0x0068 (0x0070 - 0x0008)
struct FClientMatchmakeRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildVersion;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERegion                                       Region;                                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartNewIfNoneFound;                               // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B1[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatisticName;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     TagFilter;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchmakeRequest) == 0x000008, "Wrong alignment on FClientMatchmakeRequest");
static_assert(sizeof(FClientMatchmakeRequest) == 0x000070, "Wrong size on FClientMatchmakeRequest");
static_assert(offsetof(FClientMatchmakeRequest, BuildVersion) == 0x000008, "Member 'FClientMatchmakeRequest::BuildVersion' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeRequest, CharacterId) == 0x000018, "Member 'FClientMatchmakeRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeRequest, CustomTags) == 0x000028, "Member 'FClientMatchmakeRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeRequest, GameMode) == 0x000030, "Member 'FClientMatchmakeRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeRequest, LobbyId) == 0x000040, "Member 'FClientMatchmakeRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeRequest, Region) == 0x000050, "Member 'FClientMatchmakeRequest::Region' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeRequest, StartNewIfNoneFound) == 0x000051, "Member 'FClientMatchmakeRequest::StartNewIfNoneFound' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeRequest, StatisticName) == 0x000058, "Member 'FClientMatchmakeRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FClientMatchmakeRequest, TagFilter) == 0x000068, "Member 'FClientMatchmakeRequest::TagFilter' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptGetFunctionRequest
// 0x0018 (0x0020 - 0x0008)
struct FCloudScriptGetFunctionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptGetFunctionRequest) == 0x000008, "Wrong alignment on FCloudScriptGetFunctionRequest");
static_assert(sizeof(FCloudScriptGetFunctionRequest) == 0x000020, "Wrong size on FCloudScriptGetFunctionRequest");
static_assert(offsetof(FCloudScriptGetFunctionRequest, CustomTags) == 0x000008, "Member 'FCloudScriptGetFunctionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptGetFunctionRequest, FunctionName) == 0x000010, "Member 'FCloudScriptGetFunctionRequest::FunctionName' has a wrong offset!");

// ScriptStruct PlayFab.ClientRedeemCouponRequest
// 0x0038 (0x0040 - 0x0008)
struct FClientRedeemCouponRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CouponCode;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRedeemCouponRequest) == 0x000008, "Wrong alignment on FClientRedeemCouponRequest");
static_assert(sizeof(FClientRedeemCouponRequest) == 0x000040, "Wrong size on FClientRedeemCouponRequest");
static_assert(offsetof(FClientRedeemCouponRequest, CatalogVersion) == 0x000008, "Member 'FClientRedeemCouponRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientRedeemCouponRequest, CharacterId) == 0x000018, "Member 'FClientRedeemCouponRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientRedeemCouponRequest, CouponCode) == 0x000028, "Member 'FClientRedeemCouponRequest::CouponCode' has a wrong offset!");
static_assert(offsetof(FClientRedeemCouponRequest, CustomTags) == 0x000038, "Member 'FClientRedeemCouponRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptEmptyResult
// 0x0000 (0x0008 - 0x0008)
struct FCloudScriptEmptyResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FCloudScriptEmptyResult) == 0x000008, "Wrong alignment on FCloudScriptEmptyResult");
static_assert(sizeof(FCloudScriptEmptyResult) == 0x000008, "Wrong size on FCloudScriptEmptyResult");

// ScriptStruct PlayFab.ClientRegisterForIOSPushNotificationRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientRegisterForIOSPushNotificationRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ConfirmationMessage;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceToken;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SendPushNotificationConfirmation;                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B2[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientRegisterForIOSPushNotificationRequest) == 0x000008, "Wrong alignment on FClientRegisterForIOSPushNotificationRequest");
static_assert(sizeof(FClientRegisterForIOSPushNotificationRequest) == 0x000030, "Wrong size on FClientRegisterForIOSPushNotificationRequest");
static_assert(offsetof(FClientRegisterForIOSPushNotificationRequest, ConfirmationMessage) == 0x000008, "Member 'FClientRegisterForIOSPushNotificationRequest::ConfirmationMessage' has a wrong offset!");
static_assert(offsetof(FClientRegisterForIOSPushNotificationRequest, DeviceToken) == 0x000018, "Member 'FClientRegisterForIOSPushNotificationRequest::DeviceToken' has a wrong offset!");
static_assert(offsetof(FClientRegisterForIOSPushNotificationRequest, SendPushNotificationConfirmation) == 0x000028, "Member 'FClientRegisterForIOSPushNotificationRequest::SendPushNotificationConfirmation' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetTitleNewsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetTitleNewsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             News;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetTitleNewsResult) == 0x000008, "Wrong alignment on FServerGetTitleNewsResult");
static_assert(sizeof(FServerGetTitleNewsResult) == 0x000018, "Wrong size on FServerGetTitleNewsResult");
static_assert(offsetof(FServerGetTitleNewsResult, News) == 0x000008, "Member 'FServerGetTitleNewsResult::News' has a wrong offset!");

// ScriptStruct PlayFab.ClientRemoveContactEmailRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientRemoveContactEmailRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRemoveContactEmailRequest) == 0x000008, "Wrong alignment on FClientRemoveContactEmailRequest");
static_assert(sizeof(FClientRemoveContactEmailRequest) == 0x000010, "Wrong size on FClientRemoveContactEmailRequest");
static_assert(offsetof(FClientRemoveContactEmailRequest, CustomTags) == 0x000008, "Member 'FClientRemoveContactEmailRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientRemoveSharedGroupMembersRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientRemoveSharedGroupMembersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabIds;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SharedGroupId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRemoveSharedGroupMembersRequest) == 0x000008, "Wrong alignment on FClientRemoveSharedGroupMembersRequest");
static_assert(sizeof(FClientRemoveSharedGroupMembersRequest) == 0x000028, "Wrong size on FClientRemoveSharedGroupMembersRequest");
static_assert(offsetof(FClientRemoveSharedGroupMembersRequest, PlayFabIds) == 0x000008, "Member 'FClientRemoveSharedGroupMembersRequest::PlayFabIds' has a wrong offset!");
static_assert(offsetof(FClientRemoveSharedGroupMembersRequest, SharedGroupId) == 0x000018, "Member 'FClientRemoveSharedGroupMembersRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ServerRefreshGameServerInstanceHeartbeatResult
// 0x0000 (0x0008 - 0x0008)
struct FServerRefreshGameServerInstanceHeartbeatResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerRefreshGameServerInstanceHeartbeatResult) == 0x000008, "Wrong alignment on FServerRefreshGameServerInstanceHeartbeatResult");
static_assert(sizeof(FServerRefreshGameServerInstanceHeartbeatResult) == 0x000008, "Wrong size on FServerRefreshGameServerInstanceHeartbeatResult");

// ScriptStruct PlayFab.ClientDeviceInfoRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientDeviceInfoRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Info;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDeviceInfoRequest) == 0x000008, "Wrong alignment on FClientDeviceInfoRequest");
static_assert(sizeof(FClientDeviceInfoRequest) == 0x000010, "Wrong size on FClientDeviceInfoRequest");
static_assert(offsetof(FClientDeviceInfoRequest, Info) == 0x000008, "Member 'FClientDeviceInfoRequest::Info' has a wrong offset!");

// ScriptStruct PlayFab.ClientReportPlayerClientRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientReportPlayerClientRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReporteeId;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientReportPlayerClientRequest) == 0x000008, "Wrong alignment on FClientReportPlayerClientRequest");
static_assert(sizeof(FClientReportPlayerClientRequest) == 0x000030, "Wrong size on FClientReportPlayerClientRequest");
static_assert(offsetof(FClientReportPlayerClientRequest, Comment) == 0x000008, "Member 'FClientReportPlayerClientRequest::Comment' has a wrong offset!");
static_assert(offsetof(FClientReportPlayerClientRequest, CustomTags) == 0x000018, "Member 'FClientReportPlayerClientRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientReportPlayerClientRequest, ReporteeId) == 0x000020, "Member 'FClientReportPlayerClientRequest::ReporteeId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCancelMatchmakingTicketResult
// 0x0000 (0x0008 - 0x0008)
struct FMultiplayerCancelMatchmakingTicketResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FMultiplayerCancelMatchmakingTicketResult) == 0x000008, "Wrong alignment on FMultiplayerCancelMatchmakingTicketResult");
static_assert(sizeof(FMultiplayerCancelMatchmakingTicketResult) == 0x000008, "Wrong size on FMultiplayerCancelMatchmakingTicketResult");

// ScriptStruct PlayFab.ServerUpdateSharedGroupDataRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerUpdateSharedGroupDataRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserDataPermission                           Permission;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B3[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SharedGroupId;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdateSharedGroupDataRequest) == 0x000008, "Wrong alignment on FServerUpdateSharedGroupDataRequest");
static_assert(sizeof(FServerUpdateSharedGroupDataRequest) == 0x000040, "Wrong size on FServerUpdateSharedGroupDataRequest");
static_assert(offsetof(FServerUpdateSharedGroupDataRequest, CustomTags) == 0x000008, "Member 'FServerUpdateSharedGroupDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUpdateSharedGroupDataRequest, Data) == 0x000010, "Member 'FServerUpdateSharedGroupDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FServerUpdateSharedGroupDataRequest, KeysToRemove) == 0x000018, "Member 'FServerUpdateSharedGroupDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FServerUpdateSharedGroupDataRequest, Permission) == 0x000028, "Member 'FServerUpdateSharedGroupDataRequest::Permission' has a wrong offset!");
static_assert(offsetof(FServerUpdateSharedGroupDataRequest, SharedGroupId) == 0x000030, "Member 'FServerUpdateSharedGroupDataRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ClientRestoreIOSPurchasesRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientRestoreIOSPurchasesRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiptData;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientRestoreIOSPurchasesRequest) == 0x000008, "Wrong alignment on FClientRestoreIOSPurchasesRequest");
static_assert(sizeof(FClientRestoreIOSPurchasesRequest) == 0x000030, "Wrong size on FClientRestoreIOSPurchasesRequest");
static_assert(offsetof(FClientRestoreIOSPurchasesRequest, CatalogVersion) == 0x000008, "Member 'FClientRestoreIOSPurchasesRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientRestoreIOSPurchasesRequest, CustomTags) == 0x000018, "Member 'FClientRestoreIOSPurchasesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientRestoreIOSPurchasesRequest, ReceiptData) == 0x000020, "Member 'FClientRestoreIOSPurchasesRequest::ReceiptData' has a wrong offset!");

// ScriptStruct PlayFab.ClientSetFriendTagsRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientSetFriendTagsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FriendPlayFabId;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tags;                                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientSetFriendTagsRequest) == 0x000008, "Wrong alignment on FClientSetFriendTagsRequest");
static_assert(sizeof(FClientSetFriendTagsRequest) == 0x000028, "Wrong size on FClientSetFriendTagsRequest");
static_assert(offsetof(FClientSetFriendTagsRequest, FriendPlayFabId) == 0x000008, "Member 'FClientSetFriendTagsRequest::FriendPlayFabId' has a wrong offset!");
static_assert(offsetof(FClientSetFriendTagsRequest, Tags) == 0x000018, "Member 'FClientSetFriendTagsRequest::Tags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerBuildAliasDetailsResponse
// 0x0030 (0x0038 - 0x0008)
struct FMultiplayerBuildAliasDetailsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 AliasId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AliasName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             BuildSelectionCriteria;                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerBuildAliasDetailsResponse) == 0x000008, "Wrong alignment on FMultiplayerBuildAliasDetailsResponse");
static_assert(sizeof(FMultiplayerBuildAliasDetailsResponse) == 0x000038, "Wrong size on FMultiplayerBuildAliasDetailsResponse");
static_assert(offsetof(FMultiplayerBuildAliasDetailsResponse, AliasId) == 0x000008, "Member 'FMultiplayerBuildAliasDetailsResponse::AliasId' has a wrong offset!");
static_assert(offsetof(FMultiplayerBuildAliasDetailsResponse, AliasName) == 0x000018, "Member 'FMultiplayerBuildAliasDetailsResponse::AliasName' has a wrong offset!");
static_assert(offsetof(FMultiplayerBuildAliasDetailsResponse, BuildSelectionCriteria) == 0x000028, "Member 'FMultiplayerBuildAliasDetailsResponse::BuildSelectionCriteria' has a wrong offset!");

// ScriptStruct PlayFab.ClientStartPurchaseRequest
// 0x0038 (0x0040 - 0x0008)
struct FClientStartPurchaseRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientStartPurchaseRequest) == 0x000008, "Wrong alignment on FClientStartPurchaseRequest");
static_assert(sizeof(FClientStartPurchaseRequest) == 0x000040, "Wrong size on FClientStartPurchaseRequest");
static_assert(offsetof(FClientStartPurchaseRequest, CatalogVersion) == 0x000008, "Member 'FClientStartPurchaseRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientStartPurchaseRequest, CustomTags) == 0x000018, "Member 'FClientStartPurchaseRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientStartPurchaseRequest, Items) == 0x000020, "Member 'FClientStartPurchaseRequest::Items' has a wrong offset!");
static_assert(offsetof(FClientStartPurchaseRequest, StoreId) == 0x000030, "Member 'FClientStartPurchaseRequest::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateBuildWithCustomContainerResponse
// 0x00F0 (0x00F8 - 0x0008)
struct FMultiplayerCreateBuildWithCustomContainerResponse final : public FPlayFabResultCommon
{
public:
	bool                                          AreAssetsReadonly;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B4[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContainerFlavor                              ContainerFlavor;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B5[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContainerRunCommand;                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CreationTime;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomGameContainerImage;                          // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameAssetReferences;                               // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameCertificateReferences;                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     LinuxInstrumentationConfiguration;                 // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MetaData;                                          // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MonitoringApplicationConfiguration;                // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiplayerServerCountPerVm;                       // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B6[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OsPlatform;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Ports;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             RegionConfigurations;                              // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ServerResourceConstraints;                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerType;                                        // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStreamingForAssetDownloads;                     // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzureVmSize                                  VmSize;                                            // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B7[0x6];                                     // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     VmStartupScriptConfiguration;                      // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateBuildWithCustomContainerResponse) == 0x000008, "Wrong alignment on FMultiplayerCreateBuildWithCustomContainerResponse");
static_assert(sizeof(FMultiplayerCreateBuildWithCustomContainerResponse) == 0x0000F8, "Wrong size on FMultiplayerCreateBuildWithCustomContainerResponse");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, AreAssetsReadonly) == 0x000008, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::AreAssetsReadonly' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, BuildId) == 0x000010, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, BuildName) == 0x000020, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::BuildName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, ContainerFlavor) == 0x000030, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::ContainerFlavor' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, ContainerRunCommand) == 0x000038, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::ContainerRunCommand' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, CreationTime) == 0x000048, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::CreationTime' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, CustomGameContainerImage) == 0x000058, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::CustomGameContainerImage' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, GameAssetReferences) == 0x000060, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::GameAssetReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, GameCertificateReferences) == 0x000070, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::GameCertificateReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, LinuxInstrumentationConfiguration) == 0x000080, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::LinuxInstrumentationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, MetaData) == 0x000088, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::MetaData' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, MonitoringApplicationConfiguration) == 0x000090, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::MonitoringApplicationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, MultiplayerServerCountPerVm) == 0x000098, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::MultiplayerServerCountPerVm' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, OsPlatform) == 0x0000A0, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::OsPlatform' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, Ports) == 0x0000B0, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::Ports' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, RegionConfigurations) == 0x0000C0, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::RegionConfigurations' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, ServerResourceConstraints) == 0x0000D0, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::ServerResourceConstraints' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, ServerType) == 0x0000D8, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::ServerType' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, UseStreamingForAssetDownloads) == 0x0000E8, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::UseStreamingForAssetDownloads' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, VmSize) == 0x0000E9, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::VmSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithCustomContainerResponse, VmStartupScriptConfiguration) == 0x0000F0, "Member 'FMultiplayerCreateBuildWithCustomContainerResponse::VmStartupScriptConfiguration' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkAndroidDeviceIDRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientUnlinkAndroidDeviceIDRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AndroidDeviceId;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkAndroidDeviceIDRequest) == 0x000008, "Wrong alignment on FClientUnlinkAndroidDeviceIDRequest");
static_assert(sizeof(FClientUnlinkAndroidDeviceIDRequest) == 0x000020, "Wrong size on FClientUnlinkAndroidDeviceIDRequest");
static_assert(offsetof(FClientUnlinkAndroidDeviceIDRequest, AndroidDeviceId) == 0x000008, "Member 'FClientUnlinkAndroidDeviceIDRequest::AndroidDeviceId' has a wrong offset!");
static_assert(offsetof(FClientUnlinkAndroidDeviceIDRequest, CustomTags) == 0x000018, "Member 'FClientUnlinkAndroidDeviceIDRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetFriendTagsRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerSetFriendTagsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FriendPlayFabId;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tags;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSetFriendTagsRequest) == 0x000008, "Wrong alignment on FServerSetFriendTagsRequest");
static_assert(sizeof(FServerSetFriendTagsRequest) == 0x000038, "Wrong size on FServerSetFriendTagsRequest");
static_assert(offsetof(FServerSetFriendTagsRequest, FriendPlayFabId) == 0x000008, "Member 'FServerSetFriendTagsRequest::FriendPlayFabId' has a wrong offset!");
static_assert(offsetof(FServerSetFriendTagsRequest, PlayFabId) == 0x000018, "Member 'FServerSetFriendTagsRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerSetFriendTagsRequest, Tags) == 0x000028, "Member 'FServerSetFriendTagsRequest::Tags' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkAppleRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkAppleRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkAppleRequest) == 0x000008, "Wrong alignment on FClientUnlinkAppleRequest");
static_assert(sizeof(FClientUnlinkAppleRequest) == 0x000010, "Wrong size on FClientUnlinkAppleRequest");
static_assert(offsetof(FClientUnlinkAppleRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkAppleRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkFacebookAccountRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkFacebookAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkFacebookAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkFacebookAccountRequest");
static_assert(sizeof(FClientUnlinkFacebookAccountRequest) == 0x000010, "Wrong size on FClientUnlinkFacebookAccountRequest");
static_assert(offsetof(FClientUnlinkFacebookAccountRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkFacebookAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkFacebookInstantGamesIdRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientUnlinkFacebookInstantGamesIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FacebookInstantGamesId;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkFacebookInstantGamesIdRequest) == 0x000008, "Wrong alignment on FClientUnlinkFacebookInstantGamesIdRequest");
static_assert(sizeof(FClientUnlinkFacebookInstantGamesIdRequest) == 0x000020, "Wrong size on FClientUnlinkFacebookInstantGamesIdRequest");
static_assert(offsetof(FClientUnlinkFacebookInstantGamesIdRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkFacebookInstantGamesIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientUnlinkFacebookInstantGamesIdRequest, FacebookInstantGamesId) == 0x000010, "Member 'FClientUnlinkFacebookInstantGamesIdRequest::FacebookInstantGamesId' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkGoogleAccountRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkGoogleAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkGoogleAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkGoogleAccountRequest");
static_assert(sizeof(FClientUnlinkGoogleAccountRequest) == 0x000010, "Wrong size on FClientUnlinkGoogleAccountRequest");
static_assert(offsetof(FClientUnlinkGoogleAccountRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkGoogleAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.LocalizationGetLanguageListResponse
// 0x0010 (0x0018 - 0x0008)
struct FLocalizationGetLanguageListResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 LanguageList;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizationGetLanguageListResponse) == 0x000008, "Wrong alignment on FLocalizationGetLanguageListResponse");
static_assert(sizeof(FLocalizationGetLanguageListResponse) == 0x000018, "Wrong size on FLocalizationGetLanguageListResponse");
static_assert(offsetof(FLocalizationGetLanguageListResponse, LanguageList) == 0x000008, "Member 'FLocalizationGetLanguageListResponse::LanguageList' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkNintendoSwitchDeviceIdRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientUnlinkNintendoSwitchDeviceIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NintendoSwitchDeviceId;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkNintendoSwitchDeviceIdRequest) == 0x000008, "Wrong alignment on FClientUnlinkNintendoSwitchDeviceIdRequest");
static_assert(sizeof(FClientUnlinkNintendoSwitchDeviceIdRequest) == 0x000020, "Wrong size on FClientUnlinkNintendoSwitchDeviceIdRequest");
static_assert(offsetof(FClientUnlinkNintendoSwitchDeviceIdRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkNintendoSwitchDeviceIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientUnlinkNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId) == 0x000010, "Member 'FClientUnlinkNintendoSwitchDeviceIdRequest::NintendoSwitchDeviceId' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlinkPSNAccountRequest
// 0x0008 (0x0010 - 0x0008)
struct FClientUnlinkPSNAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlinkPSNAccountRequest) == 0x000008, "Wrong alignment on FClientUnlinkPSNAccountRequest");
static_assert(sizeof(FClientUnlinkPSNAccountRequest) == 0x000010, "Wrong size on FClientUnlinkPSNAccountRequest");
static_assert(offsetof(FClientUnlinkPSNAccountRequest, CustomTags) == 0x000008, "Member 'FClientUnlinkPSNAccountRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientUnlockContainerInstanceRequest
// 0x0048 (0x0050 - 0x0008)
struct FClientUnlockContainerInstanceRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainerItemInstanceId;                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyItemInstanceId;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUnlockContainerInstanceRequest) == 0x000008, "Wrong alignment on FClientUnlockContainerInstanceRequest");
static_assert(sizeof(FClientUnlockContainerInstanceRequest) == 0x000050, "Wrong size on FClientUnlockContainerInstanceRequest");
static_assert(offsetof(FClientUnlockContainerInstanceRequest, CatalogVersion) == 0x000008, "Member 'FClientUnlockContainerInstanceRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerInstanceRequest, CharacterId) == 0x000018, "Member 'FClientUnlockContainerInstanceRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerInstanceRequest, ContainerItemInstanceId) == 0x000028, "Member 'FClientUnlockContainerInstanceRequest::ContainerItemInstanceId' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerInstanceRequest, CustomTags) == 0x000038, "Member 'FClientUnlockContainerInstanceRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientUnlockContainerInstanceRequest, KeyItemInstanceId) == 0x000040, "Member 'FClientUnlockContainerInstanceRequest::KeyItemInstanceId' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdateCharacterStatisticsRequest
// 0x0020 (0x0028 - 0x0008)
struct FClientUpdateCharacterStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CharacterStatistics;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUpdateCharacterStatisticsRequest) == 0x000008, "Wrong alignment on FClientUpdateCharacterStatisticsRequest");
static_assert(sizeof(FClientUpdateCharacterStatisticsRequest) == 0x000028, "Wrong size on FClientUpdateCharacterStatisticsRequest");
static_assert(offsetof(FClientUpdateCharacterStatisticsRequest, CharacterId) == 0x000008, "Member 'FClientUpdateCharacterStatisticsRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FClientUpdateCharacterStatisticsRequest, CharacterStatistics) == 0x000018, "Member 'FClientUpdateCharacterStatisticsRequest::CharacterStatistics' has a wrong offset!");
static_assert(offsetof(FClientUpdateCharacterStatisticsRequest, CustomTags) == 0x000020, "Member 'FClientUpdateCharacterStatisticsRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdatePlayerStatisticsRequest
// 0x0018 (0x0020 - 0x0008)
struct FClientUpdatePlayerStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Statistics;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientUpdatePlayerStatisticsRequest) == 0x000008, "Wrong alignment on FClientUpdatePlayerStatisticsRequest");
static_assert(sizeof(FClientUpdatePlayerStatisticsRequest) == 0x000020, "Wrong size on FClientUpdatePlayerStatisticsRequest");
static_assert(offsetof(FClientUpdatePlayerStatisticsRequest, CustomTags) == 0x000008, "Member 'FClientUpdatePlayerStatisticsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientUpdatePlayerStatisticsRequest, Statistics) == 0x000010, "Member 'FClientUpdatePlayerStatisticsRequest::Statistics' has a wrong offset!");

// ScriptStruct PlayFab.ClientUpdateUserDataRequest
// 0x0028 (0x0030 - 0x0008)
struct FClientUpdateUserDataRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserDataPermission                           Permission;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B8[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientUpdateUserDataRequest) == 0x000008, "Wrong alignment on FClientUpdateUserDataRequest");
static_assert(sizeof(FClientUpdateUserDataRequest) == 0x000030, "Wrong size on FClientUpdateUserDataRequest");
static_assert(offsetof(FClientUpdateUserDataRequest, CustomTags) == 0x000008, "Member 'FClientUpdateUserDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientUpdateUserDataRequest, Data) == 0x000010, "Member 'FClientUpdateUserDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FClientUpdateUserDataRequest, KeysToRemove) == 0x000018, "Member 'FClientUpdateUserDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FClientUpdateUserDataRequest, Permission) == 0x000028, "Member 'FClientUpdateUserDataRequest::Permission' has a wrong offset!");

// ScriptStruct PlayFab.ClientValidateIOSReceiptRequest
// 0x0040 (0x0048 - 0x0008)
struct FClientValidateIOSReceiptRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchasePrice;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B9[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReceiptData;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientValidateIOSReceiptRequest) == 0x000008, "Wrong alignment on FClientValidateIOSReceiptRequest");
static_assert(sizeof(FClientValidateIOSReceiptRequest) == 0x000048, "Wrong size on FClientValidateIOSReceiptRequest");
static_assert(offsetof(FClientValidateIOSReceiptRequest, CatalogVersion) == 0x000008, "Member 'FClientValidateIOSReceiptRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FClientValidateIOSReceiptRequest, CurrencyCode) == 0x000018, "Member 'FClientValidateIOSReceiptRequest::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FClientValidateIOSReceiptRequest, CustomTags) == 0x000028, "Member 'FClientValidateIOSReceiptRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientValidateIOSReceiptRequest, PurchasePrice) == 0x000030, "Member 'FClientValidateIOSReceiptRequest::PurchasePrice' has a wrong offset!");
static_assert(offsetof(FClientValidateIOSReceiptRequest, ReceiptData) == 0x000038, "Member 'FClientValidateIOSReceiptRequest::ReceiptData' has a wrong offset!");

// ScriptStruct PlayFab.ServerRevokeInventoryResult
// 0x0000 (0x0008 - 0x0008)
struct FServerRevokeInventoryResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerRevokeInventoryResult) == 0x000008, "Wrong alignment on FServerRevokeInventoryResult");
static_assert(sizeof(FServerRevokeInventoryResult) == 0x000008, "Wrong size on FServerRevokeInventoryResult");

// ScriptStruct PlayFab.ClientWriteClientPlayerEventRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientWriteClientPlayerEventRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Body;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientWriteClientPlayerEventRequest) == 0x000008, "Wrong alignment on FClientWriteClientPlayerEventRequest");
static_assert(sizeof(FClientWriteClientPlayerEventRequest) == 0x000038, "Wrong size on FClientWriteClientPlayerEventRequest");
static_assert(offsetof(FClientWriteClientPlayerEventRequest, Body) == 0x000008, "Member 'FClientWriteClientPlayerEventRequest::Body' has a wrong offset!");
static_assert(offsetof(FClientWriteClientPlayerEventRequest, CustomTags) == 0x000010, "Member 'FClientWriteClientPlayerEventRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientWriteClientPlayerEventRequest, EventName) == 0x000018, "Member 'FClientWriteClientPlayerEventRequest::EventName' has a wrong offset!");
static_assert(offsetof(FClientWriteClientPlayerEventRequest, Timestamp) == 0x000028, "Member 'FClientWriteClientPlayerEventRequest::Timestamp' has a wrong offset!");

// ScriptStruct PlayFab.ServerRevokeBansResult
// 0x0010 (0x0018 - 0x0008)
struct FServerRevokeBansResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRevokeBansResult) == 0x000008, "Wrong alignment on FServerRevokeBansResult");
static_assert(sizeof(FServerRevokeBansResult) == 0x000018, "Wrong size on FServerRevokeBansResult");
static_assert(offsetof(FServerRevokeBansResult, BanData) == 0x000008, "Member 'FServerRevokeBansResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.ClientWriteTitleEventRequest
// 0x0030 (0x0038 - 0x0008)
struct FClientWriteTitleEventRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Body;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientWriteTitleEventRequest) == 0x000008, "Wrong alignment on FClientWriteTitleEventRequest");
static_assert(sizeof(FClientWriteTitleEventRequest) == 0x000038, "Wrong size on FClientWriteTitleEventRequest");
static_assert(offsetof(FClientWriteTitleEventRequest, Body) == 0x000008, "Member 'FClientWriteTitleEventRequest::Body' has a wrong offset!");
static_assert(offsetof(FClientWriteTitleEventRequest, CustomTags) == 0x000010, "Member 'FClientWriteTitleEventRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FClientWriteTitleEventRequest, EventName) == 0x000018, "Member 'FClientWriteTitleEventRequest::EventName' has a wrong offset!");
static_assert(offsetof(FClientWriteTitleEventRequest, Timestamp) == 0x000028, "Member 'FClientWriteTitleEventRequest::Timestamp' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptListHttpFunctionsResult
// 0x0010 (0x0018 - 0x0008)
struct FCloudScriptListHttpFunctionsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Functions;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptListHttpFunctionsResult) == 0x000008, "Wrong alignment on FCloudScriptListHttpFunctionsResult");
static_assert(sizeof(FCloudScriptListHttpFunctionsResult) == 0x000018, "Wrong size on FCloudScriptListHttpFunctionsResult");
static_assert(offsetof(FCloudScriptListHttpFunctionsResult, Functions) == 0x000008, "Member 'FCloudScriptListHttpFunctionsResult::Functions' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptListFunctionsRequest
// 0x0008 (0x0010 - 0x0008)
struct FCloudScriptListFunctionsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptListFunctionsRequest) == 0x000008, "Wrong alignment on FCloudScriptListFunctionsRequest");
static_assert(sizeof(FCloudScriptListFunctionsRequest) == 0x000010, "Wrong size on FCloudScriptListFunctionsRequest");
static_assert(offsetof(FCloudScriptListFunctionsRequest, CustomTags) == 0x000008, "Member 'FCloudScriptListFunctionsRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptPostFunctionResultForEntityTriggeredActionRequest
// 0x0018 (0x0020 - 0x0008)
struct FCloudScriptPostFunctionResultForEntityTriggeredActionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionResult;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptPostFunctionResultForEntityTriggeredActionRequest) == 0x000008, "Wrong alignment on FCloudScriptPostFunctionResultForEntityTriggeredActionRequest");
static_assert(sizeof(FCloudScriptPostFunctionResultForEntityTriggeredActionRequest) == 0x000020, "Wrong size on FCloudScriptPostFunctionResultForEntityTriggeredActionRequest");
static_assert(offsetof(FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, CustomTags) == 0x000008, "Member 'FCloudScriptPostFunctionResultForEntityTriggeredActionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, Entity) == 0x000010, "Member 'FCloudScriptPostFunctionResultForEntityTriggeredActionRequest::Entity' has a wrong offset!");
static_assert(offsetof(FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, FunctionResult) == 0x000018, "Member 'FCloudScriptPostFunctionResultForEntityTriggeredActionRequest::FunctionResult' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptPostFunctionResultForPlayerTriggeredActionRequest
// 0x0020 (0x0028 - 0x0008)
struct FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionResult;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     PlayerProfile;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     PlayStreamEventEnvelope;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest) == 0x000008, "Wrong alignment on FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest");
static_assert(sizeof(FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest) == 0x000028, "Wrong size on FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest");
static_assert(offsetof(FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, CustomTags) == 0x000008, "Member 'FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, FunctionResult) == 0x000010, "Member 'FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest::FunctionResult' has a wrong offset!");
static_assert(offsetof(FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, PlayerProfile) == 0x000018, "Member 'FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest::PlayerProfile' has a wrong offset!");
static_assert(offsetof(FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, PlayStreamEventEnvelope) == 0x000020, "Member 'FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest::PlayStreamEventEnvelope' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptRegisterHttpFunctionRequest
// 0x0028 (0x0030 - 0x0008)
struct FCloudScriptRegisterHttpFunctionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionUrl;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptRegisterHttpFunctionRequest) == 0x000008, "Wrong alignment on FCloudScriptRegisterHttpFunctionRequest");
static_assert(sizeof(FCloudScriptRegisterHttpFunctionRequest) == 0x000030, "Wrong size on FCloudScriptRegisterHttpFunctionRequest");
static_assert(offsetof(FCloudScriptRegisterHttpFunctionRequest, CustomTags) == 0x000008, "Member 'FCloudScriptRegisterHttpFunctionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptRegisterHttpFunctionRequest, FunctionName) == 0x000010, "Member 'FCloudScriptRegisterHttpFunctionRequest::FunctionName' has a wrong offset!");
static_assert(offsetof(FCloudScriptRegisterHttpFunctionRequest, FunctionUrl) == 0x000020, "Member 'FCloudScriptRegisterHttpFunctionRequest::FunctionUrl' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptRegisterQueuedFunctionRequest
// 0x0038 (0x0040 - 0x0008)
struct FCloudScriptRegisterQueuedFunctionRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ConnectionString;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptRegisterQueuedFunctionRequest) == 0x000008, "Wrong alignment on FCloudScriptRegisterQueuedFunctionRequest");
static_assert(sizeof(FCloudScriptRegisterQueuedFunctionRequest) == 0x000040, "Wrong size on FCloudScriptRegisterQueuedFunctionRequest");
static_assert(offsetof(FCloudScriptRegisterQueuedFunctionRequest, ConnectionString) == 0x000008, "Member 'FCloudScriptRegisterQueuedFunctionRequest::ConnectionString' has a wrong offset!");
static_assert(offsetof(FCloudScriptRegisterQueuedFunctionRequest, CustomTags) == 0x000018, "Member 'FCloudScriptRegisterQueuedFunctionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptRegisterQueuedFunctionRequest, FunctionName) == 0x000020, "Member 'FCloudScriptRegisterQueuedFunctionRequest::FunctionName' has a wrong offset!");
static_assert(offsetof(FCloudScriptRegisterQueuedFunctionRequest, QueueName) == 0x000030, "Member 'FCloudScriptRegisterQueuedFunctionRequest::QueueName' has a wrong offset!");

// ScriptStruct PlayFab.CloudScriptUnregisterFunctionRequest
// 0x0018 (0x0020 - 0x0008)
struct FCloudScriptUnregisterFunctionRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudScriptUnregisterFunctionRequest) == 0x000008, "Wrong alignment on FCloudScriptUnregisterFunctionRequest");
static_assert(sizeof(FCloudScriptUnregisterFunctionRequest) == 0x000020, "Wrong size on FCloudScriptUnregisterFunctionRequest");
static_assert(offsetof(FCloudScriptUnregisterFunctionRequest, CustomTags) == 0x000008, "Member 'FCloudScriptUnregisterFunctionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FCloudScriptUnregisterFunctionRequest, FunctionName) == 0x000010, "Member 'FCloudScriptUnregisterFunctionRequest::FunctionName' has a wrong offset!");

// ScriptStruct PlayFab.DataAbortFileUploadsResponse
// 0x0010 (0x0018 - 0x0008)
struct FDataAbortFileUploadsResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Entity;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BA[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataAbortFileUploadsResponse) == 0x000008, "Wrong alignment on FDataAbortFileUploadsResponse");
static_assert(sizeof(FDataAbortFileUploadsResponse) == 0x000018, "Wrong size on FDataAbortFileUploadsResponse");
static_assert(offsetof(FDataAbortFileUploadsResponse, Entity) == 0x000008, "Member 'FDataAbortFileUploadsResponse::Entity' has a wrong offset!");
static_assert(offsetof(FDataAbortFileUploadsResponse, ProfileVersion) == 0x000010, "Member 'FDataAbortFileUploadsResponse::ProfileVersion' has a wrong offset!");

// ScriptStruct PlayFab.DataAbortFileUploadsRequest
// 0x0028 (0x0030 - 0x0008)
struct FDataAbortFileUploadsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileNames;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BB[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataAbortFileUploadsRequest) == 0x000008, "Wrong alignment on FDataAbortFileUploadsRequest");
static_assert(sizeof(FDataAbortFileUploadsRequest) == 0x000030, "Wrong size on FDataAbortFileUploadsRequest");
static_assert(offsetof(FDataAbortFileUploadsRequest, CustomTags) == 0x000008, "Member 'FDataAbortFileUploadsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FDataAbortFileUploadsRequest, Entity) == 0x000010, "Member 'FDataAbortFileUploadsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FDataAbortFileUploadsRequest, FileNames) == 0x000018, "Member 'FDataAbortFileUploadsRequest::FileNames' has a wrong offset!");
static_assert(offsetof(FDataAbortFileUploadsRequest, ProfileVersion) == 0x000028, "Member 'FDataAbortFileUploadsRequest::ProfileVersion' has a wrong offset!");

// ScriptStruct PlayFab.DataGetFilesResponse
// 0x0018 (0x0020 - 0x0008)
struct FDataGetFilesResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Entity;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MetaData;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BC[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataGetFilesResponse) == 0x000008, "Wrong alignment on FDataGetFilesResponse");
static_assert(sizeof(FDataGetFilesResponse) == 0x000020, "Wrong size on FDataGetFilesResponse");
static_assert(offsetof(FDataGetFilesResponse, Entity) == 0x000008, "Member 'FDataGetFilesResponse::Entity' has a wrong offset!");
static_assert(offsetof(FDataGetFilesResponse, MetaData) == 0x000010, "Member 'FDataGetFilesResponse::MetaData' has a wrong offset!");
static_assert(offsetof(FDataGetFilesResponse, ProfileVersion) == 0x000018, "Member 'FDataGetFilesResponse::ProfileVersion' has a wrong offset!");

// ScriptStruct PlayFab.DataSetObjectsResponse
// 0x0018 (0x0020 - 0x0008)
struct FDataSetObjectsResponse final : public FPlayFabResultCommon
{
public:
	int32                                         ProfileVersion;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             SetResults;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataSetObjectsResponse) == 0x000008, "Wrong alignment on FDataSetObjectsResponse");
static_assert(sizeof(FDataSetObjectsResponse) == 0x000020, "Wrong size on FDataSetObjectsResponse");
static_assert(offsetof(FDataSetObjectsResponse, ProfileVersion) == 0x000008, "Member 'FDataSetObjectsResponse::ProfileVersion' has a wrong offset!");
static_assert(offsetof(FDataSetObjectsResponse, SetResults) == 0x000010, "Member 'FDataSetObjectsResponse::SetResults' has a wrong offset!");

// ScriptStruct PlayFab.DataFinalizeFileUploadsRequest
// 0x0028 (0x0030 - 0x0008)
struct FDataFinalizeFileUploadsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileNames;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BE[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataFinalizeFileUploadsRequest) == 0x000008, "Wrong alignment on FDataFinalizeFileUploadsRequest");
static_assert(sizeof(FDataFinalizeFileUploadsRequest) == 0x000030, "Wrong size on FDataFinalizeFileUploadsRequest");
static_assert(offsetof(FDataFinalizeFileUploadsRequest, CustomTags) == 0x000008, "Member 'FDataFinalizeFileUploadsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FDataFinalizeFileUploadsRequest, Entity) == 0x000010, "Member 'FDataFinalizeFileUploadsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FDataFinalizeFileUploadsRequest, FileNames) == 0x000018, "Member 'FDataFinalizeFileUploadsRequest::FileNames' has a wrong offset!");
static_assert(offsetof(FDataFinalizeFileUploadsRequest, ProfileVersion) == 0x000028, "Member 'FDataFinalizeFileUploadsRequest::ProfileVersion' has a wrong offset!");

// ScriptStruct PlayFab.DataInitiateFileUploadsRequest
// 0x0028 (0x0030 - 0x0008)
struct FDataInitiateFileUploadsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileNames;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BF[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataInitiateFileUploadsRequest) == 0x000008, "Wrong alignment on FDataInitiateFileUploadsRequest");
static_assert(sizeof(FDataInitiateFileUploadsRequest) == 0x000030, "Wrong size on FDataInitiateFileUploadsRequest");
static_assert(offsetof(FDataInitiateFileUploadsRequest, CustomTags) == 0x000008, "Member 'FDataInitiateFileUploadsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FDataInitiateFileUploadsRequest, Entity) == 0x000010, "Member 'FDataInitiateFileUploadsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FDataInitiateFileUploadsRequest, FileNames) == 0x000018, "Member 'FDataInitiateFileUploadsRequest::FileNames' has a wrong offset!");
static_assert(offsetof(FDataInitiateFileUploadsRequest, ProfileVersion) == 0x000028, "Member 'FDataInitiateFileUploadsRequest::ProfileVersion' has a wrong offset!");

// ScriptStruct PlayFab.DataSetObjectsRequest
// 0x0028 (0x0030 - 0x0008)
struct FDataSetObjectsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedProfileVersion;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C0[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Objects;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataSetObjectsRequest) == 0x000008, "Wrong alignment on FDataSetObjectsRequest");
static_assert(sizeof(FDataSetObjectsRequest) == 0x000030, "Wrong size on FDataSetObjectsRequest");
static_assert(offsetof(FDataSetObjectsRequest, CustomTags) == 0x000008, "Member 'FDataSetObjectsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FDataSetObjectsRequest, Entity) == 0x000010, "Member 'FDataSetObjectsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FDataSetObjectsRequest, ExpectedProfileVersion) == 0x000018, "Member 'FDataSetObjectsRequest::ExpectedProfileVersion' has a wrong offset!");
static_assert(offsetof(FDataSetObjectsRequest, Objects) == 0x000020, "Member 'FDataSetObjectsRequest::Objects' has a wrong offset!");

// ScriptStruct PlayFab.EconomyAddInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyAddInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ETag;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyAddInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyAddInventoryItemsResponse");
static_assert(sizeof(FEconomyAddInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyAddInventoryItemsResponse");
static_assert(offsetof(FEconomyAddInventoryItemsResponse, ETag) == 0x000008, "Member 'FEconomyAddInventoryItemsResponse::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsResponse, IdempotencyId) == 0x000018, "Member 'FEconomyAddInventoryItemsResponse::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyAddInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyAddInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyCreateDraftItemResponse
// 0x0008 (0x0010 - 0x0008)
struct FEconomyCreateDraftItemResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Item;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyCreateDraftItemResponse) == 0x000008, "Wrong alignment on FEconomyCreateDraftItemResponse");
static_assert(sizeof(FEconomyCreateDraftItemResponse) == 0x000010, "Wrong size on FEconomyCreateDraftItemResponse");
static_assert(offsetof(FEconomyCreateDraftItemResponse, Item) == 0x000008, "Member 'FEconomyCreateDraftItemResponse::Item' has a wrong offset!");

// ScriptStruct PlayFab.EconomyCreateDraftItemRequest
// 0x0018 (0x0020 - 0x0008)
struct FEconomyCreateDraftItemRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Item;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Publish;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C1[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEconomyCreateDraftItemRequest) == 0x000008, "Wrong alignment on FEconomyCreateDraftItemRequest");
static_assert(sizeof(FEconomyCreateDraftItemRequest) == 0x000020, "Wrong size on FEconomyCreateDraftItemRequest");
static_assert(offsetof(FEconomyCreateDraftItemRequest, CustomTags) == 0x000008, "Member 'FEconomyCreateDraftItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyCreateDraftItemRequest, Item) == 0x000010, "Member 'FEconomyCreateDraftItemRequest::Item' has a wrong offset!");
static_assert(offsetof(FEconomyCreateDraftItemRequest, Publish) == 0x000018, "Member 'FEconomyCreateDraftItemRequest::Publish' has a wrong offset!");

// ScriptStruct PlayFab.EconomyCreateUploadUrlsResponse
// 0x0010 (0x0018 - 0x0008)
struct FEconomyCreateUploadUrlsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             UploadUrls;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyCreateUploadUrlsResponse) == 0x000008, "Wrong alignment on FEconomyCreateUploadUrlsResponse");
static_assert(sizeof(FEconomyCreateUploadUrlsResponse) == 0x000018, "Wrong size on FEconomyCreateUploadUrlsResponse");
static_assert(offsetof(FEconomyCreateUploadUrlsResponse, UploadUrls) == 0x000008, "Member 'FEconomyCreateUploadUrlsResponse::UploadUrls' has a wrong offset!");

// ScriptStruct PlayFab.EconomyCreateUploadUrlsRequest
// 0x0018 (0x0020 - 0x0008)
struct FEconomyCreateUploadUrlsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Files;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyCreateUploadUrlsRequest) == 0x000008, "Wrong alignment on FEconomyCreateUploadUrlsRequest");
static_assert(sizeof(FEconomyCreateUploadUrlsRequest) == 0x000020, "Wrong size on FEconomyCreateUploadUrlsRequest");
static_assert(offsetof(FEconomyCreateUploadUrlsRequest, CustomTags) == 0x000008, "Member 'FEconomyCreateUploadUrlsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyCreateUploadUrlsRequest, Files) == 0x000010, "Member 'FEconomyCreateUploadUrlsRequest::Files' has a wrong offset!");

// ScriptStruct PlayFab.EconomyDeleteInventoryCollectionResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomyDeleteInventoryCollectionResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomyDeleteInventoryCollectionResponse) == 0x000008, "Wrong alignment on FEconomyDeleteInventoryCollectionResponse");
static_assert(sizeof(FEconomyDeleteInventoryCollectionResponse) == 0x000008, "Wrong size on FEconomyDeleteInventoryCollectionResponse");

// ScriptStruct PlayFab.ServerAddSharedGroupMembersRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerAddSharedGroupMembersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabIds;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SharedGroupId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAddSharedGroupMembersRequest) == 0x000008, "Wrong alignment on FServerAddSharedGroupMembersRequest");
static_assert(sizeof(FServerAddSharedGroupMembersRequest) == 0x000028, "Wrong size on FServerAddSharedGroupMembersRequest");
static_assert(offsetof(FServerAddSharedGroupMembersRequest, PlayFabIds) == 0x000008, "Member 'FServerAddSharedGroupMembersRequest::PlayFabIds' has a wrong offset!");
static_assert(offsetof(FServerAddSharedGroupMembersRequest, SharedGroupId) == 0x000018, "Member 'FServerAddSharedGroupMembersRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.EconomyDeleteInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyDeleteInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ETag;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyDeleteInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyDeleteInventoryItemsResponse");
static_assert(sizeof(FEconomyDeleteInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyDeleteInventoryItemsResponse");
static_assert(offsetof(FEconomyDeleteInventoryItemsResponse, ETag) == 0x000008, "Member 'FEconomyDeleteInventoryItemsResponse::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryItemsResponse, IdempotencyId) == 0x000018, "Member 'FEconomyDeleteInventoryItemsResponse::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyDeleteInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyDeleteItemResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomyDeleteItemResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomyDeleteItemResponse) == 0x000008, "Wrong alignment on FEconomyDeleteItemResponse");
static_assert(sizeof(FEconomyDeleteItemResponse) == 0x000008, "Wrong size on FEconomyDeleteItemResponse");

// ScriptStruct PlayFab.ServerAuthenticateSessionTicketRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerAuthenticateSessionTicketRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SessionTicket;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAuthenticateSessionTicketRequest) == 0x000008, "Wrong alignment on FServerAuthenticateSessionTicketRequest");
static_assert(sizeof(FServerAuthenticateSessionTicketRequest) == 0x000018, "Wrong size on FServerAuthenticateSessionTicketRequest");
static_assert(offsetof(FServerAuthenticateSessionTicketRequest, SessionTicket) == 0x000008, "Member 'FServerAuthenticateSessionTicketRequest::SessionTicket' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetDraftItemResponse
// 0x0008 (0x0010 - 0x0008)
struct FEconomyGetDraftItemResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Item;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetDraftItemResponse) == 0x000008, "Wrong alignment on FEconomyGetDraftItemResponse");
static_assert(sizeof(FEconomyGetDraftItemResponse) == 0x000010, "Wrong size on FEconomyGetDraftItemResponse");
static_assert(offsetof(FEconomyGetDraftItemResponse, Item) == 0x000008, "Member 'FEconomyGetDraftItemResponse::Item' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetEntityDraftItemsResponse
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetEntityDraftItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetEntityDraftItemsResponse) == 0x000008, "Wrong alignment on FEconomyGetEntityDraftItemsResponse");
static_assert(sizeof(FEconomyGetEntityDraftItemsResponse) == 0x000028, "Wrong size on FEconomyGetEntityDraftItemsResponse");
static_assert(offsetof(FEconomyGetEntityDraftItemsResponse, ContinuationToken) == 0x000008, "Member 'FEconomyGetEntityDraftItemsResponse::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetEntityDraftItemsResponse, Items) == 0x000018, "Member 'FEconomyGetEntityDraftItemsResponse::Items' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetEntityItemReviewResponse
// 0x0008 (0x0010 - 0x0008)
struct FEconomyGetEntityItemReviewResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Review;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetEntityItemReviewResponse) == 0x000008, "Wrong alignment on FEconomyGetEntityItemReviewResponse");
static_assert(sizeof(FEconomyGetEntityItemReviewResponse) == 0x000010, "Wrong size on FEconomyGetEntityItemReviewResponse");
static_assert(offsetof(FEconomyGetEntityItemReviewResponse, Review) == 0x000008, "Member 'FEconomyGetEntityItemReviewResponse::Review' has a wrong offset!");

// ScriptStruct PlayFab.ServerBanUsersRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerBanUsersRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Bans;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerBanUsersRequest) == 0x000008, "Wrong alignment on FServerBanUsersRequest");
static_assert(sizeof(FServerBanUsersRequest) == 0x000020, "Wrong size on FServerBanUsersRequest");
static_assert(offsetof(FServerBanUsersRequest, Bans) == 0x000008, "Member 'FServerBanUsersRequest::Bans' has a wrong offset!");
static_assert(offsetof(FServerBanUsersRequest, CustomTags) == 0x000018, "Member 'FServerBanUsersRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetInventoryCollectionIdsResponse
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetInventoryCollectionIdsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 CollectionIds;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContinuationToken;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetInventoryCollectionIdsResponse) == 0x000008, "Wrong alignment on FEconomyGetInventoryCollectionIdsResponse");
static_assert(sizeof(FEconomyGetInventoryCollectionIdsResponse) == 0x000028, "Wrong size on FEconomyGetInventoryCollectionIdsResponse");
static_assert(offsetof(FEconomyGetInventoryCollectionIdsResponse, CollectionIds) == 0x000008, "Member 'FEconomyGetInventoryCollectionIdsResponse::CollectionIds' has a wrong offset!");
static_assert(offsetof(FEconomyGetInventoryCollectionIdsResponse, ContinuationToken) == 0x000018, "Member 'FEconomyGetInventoryCollectionIdsResponse::ContinuationToken' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemResponse
// 0x0008 (0x0010 - 0x0008)
struct FEconomyGetItemResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Item;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemResponse) == 0x000008, "Wrong alignment on FEconomyGetItemResponse");
static_assert(sizeof(FEconomyGetItemResponse) == 0x000010, "Wrong size on FEconomyGetItemResponse");
static_assert(offsetof(FEconomyGetItemResponse, Item) == 0x000008, "Member 'FEconomyGetItemResponse::Item' has a wrong offset!");

// ScriptStruct PlayFab.ServerDeletePlayerResult
// 0x0000 (0x0008 - 0x0008)
struct FServerDeletePlayerResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerDeletePlayerResult) == 0x000008, "Wrong alignment on FServerDeletePlayerResult");
static_assert(sizeof(FServerDeletePlayerResult) == 0x000008, "Wrong size on FServerDeletePlayerResult");

// ScriptStruct PlayFab.EconomyGetItemContainersResponse
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetItemContainersResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Containers;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ContinuationToken;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemContainersResponse) == 0x000008, "Wrong alignment on FEconomyGetItemContainersResponse");
static_assert(sizeof(FEconomyGetItemContainersResponse) == 0x000028, "Wrong size on FEconomyGetItemContainersResponse");
static_assert(offsetof(FEconomyGetItemContainersResponse, Containers) == 0x000008, "Member 'FEconomyGetItemContainersResponse::Containers' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemContainersResponse, ContinuationToken) == 0x000018, "Member 'FEconomyGetItemContainersResponse::ContinuationToken' has a wrong offset!");

// ScriptStruct PlayFab.ServerCreateSharedGroupRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerCreateSharedGroupRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 SharedGroupId;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerCreateSharedGroupRequest) == 0x000008, "Wrong alignment on FServerCreateSharedGroupRequest");
static_assert(sizeof(FServerCreateSharedGroupRequest) == 0x000018, "Wrong size on FServerCreateSharedGroupRequest");
static_assert(offsetof(FServerCreateSharedGroupRequest, SharedGroupId) == 0x000008, "Member 'FServerCreateSharedGroupRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemModerationStateResponse
// 0x0008 (0x0010 - 0x0008)
struct FEconomyGetItemModerationStateResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     State;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemModerationStateResponse) == 0x000008, "Wrong alignment on FEconomyGetItemModerationStateResponse");
static_assert(sizeof(FEconomyGetItemModerationStateResponse) == 0x000010, "Wrong size on FEconomyGetItemModerationStateResponse");
static_assert(offsetof(FEconomyGetItemModerationStateResponse, State) == 0x000008, "Member 'FEconomyGetItemModerationStateResponse::State' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemPublishStatusResponse
// 0x0018 (0x0020 - 0x0008)
struct FEconomyGetItemPublishStatusResponse final : public FPlayFabResultCommon
{
public:
	EPublishResult                                Result;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatusMessage;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemPublishStatusResponse) == 0x000008, "Wrong alignment on FEconomyGetItemPublishStatusResponse");
static_assert(sizeof(FEconomyGetItemPublishStatusResponse) == 0x000020, "Wrong size on FEconomyGetItemPublishStatusResponse");
static_assert(offsetof(FEconomyGetItemPublishStatusResponse, Result) == 0x000008, "Member 'FEconomyGetItemPublishStatusResponse::Result' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemPublishStatusResponse, StatusMessage) == 0x000010, "Member 'FEconomyGetItemPublishStatusResponse::StatusMessage' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemReviewsResponse
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetItemReviewsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Reviews;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemReviewsResponse) == 0x000008, "Wrong alignment on FEconomyGetItemReviewsResponse");
static_assert(sizeof(FEconomyGetItemReviewsResponse) == 0x000028, "Wrong size on FEconomyGetItemReviewsResponse");
static_assert(offsetof(FEconomyGetItemReviewsResponse, ContinuationToken) == 0x000008, "Member 'FEconomyGetItemReviewsResponse::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewsResponse, Reviews) == 0x000018, "Member 'FEconomyGetItemReviewsResponse::Reviews' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemReviewSummaryResponse
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetItemReviewSummaryResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     LeastFavorableReview;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MostFavorableReview;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Rating;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReviewsCount;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C3[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEconomyGetItemReviewSummaryResponse) == 0x000008, "Wrong alignment on FEconomyGetItemReviewSummaryResponse");
static_assert(sizeof(FEconomyGetItemReviewSummaryResponse) == 0x000028, "Wrong size on FEconomyGetItemReviewSummaryResponse");
static_assert(offsetof(FEconomyGetItemReviewSummaryResponse, LeastFavorableReview) == 0x000008, "Member 'FEconomyGetItemReviewSummaryResponse::LeastFavorableReview' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewSummaryResponse, MostFavorableReview) == 0x000010, "Member 'FEconomyGetItemReviewSummaryResponse::MostFavorableReview' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewSummaryResponse, Rating) == 0x000018, "Member 'FEconomyGetItemReviewSummaryResponse::Rating' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemReviewSummaryResponse, ReviewsCount) == 0x000020, "Member 'FEconomyGetItemReviewSummaryResponse::ReviewsCount' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemsResponse
// 0x0010 (0x0018 - 0x0008)
struct FEconomyGetItemsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemsResponse) == 0x000008, "Wrong alignment on FEconomyGetItemsResponse");
static_assert(sizeof(FEconomyGetItemsResponse) == 0x000018, "Wrong size on FEconomyGetItemsResponse");
static_assert(offsetof(FEconomyGetItemsResponse, Items) == 0x000008, "Member 'FEconomyGetItemsResponse::Items' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetMicrosoftStoreAccessTokensResponse
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetMicrosoftStoreAccessTokensResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 CollectionsAccessToken;                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollectionsAccessTokenExpirationDate;              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetMicrosoftStoreAccessTokensResponse) == 0x000008, "Wrong alignment on FEconomyGetMicrosoftStoreAccessTokensResponse");
static_assert(sizeof(FEconomyGetMicrosoftStoreAccessTokensResponse) == 0x000028, "Wrong size on FEconomyGetMicrosoftStoreAccessTokensResponse");
static_assert(offsetof(FEconomyGetMicrosoftStoreAccessTokensResponse, CollectionsAccessToken) == 0x000008, "Member 'FEconomyGetMicrosoftStoreAccessTokensResponse::CollectionsAccessToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetMicrosoftStoreAccessTokensResponse, CollectionsAccessTokenExpirationDate) == 0x000018, "Member 'FEconomyGetMicrosoftStoreAccessTokensResponse::CollectionsAccessTokenExpirationDate' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetTransactionHistoryResponse
// 0x0020 (0x0028 - 0x0008)
struct FEconomyGetTransactionHistoryResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Transactions;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetTransactionHistoryResponse) == 0x000008, "Wrong alignment on FEconomyGetTransactionHistoryResponse");
static_assert(sizeof(FEconomyGetTransactionHistoryResponse) == 0x000028, "Wrong size on FEconomyGetTransactionHistoryResponse");
static_assert(offsetof(FEconomyGetTransactionHistoryResponse, ContinuationToken) == 0x000008, "Member 'FEconomyGetTransactionHistoryResponse::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetTransactionHistoryResponse, Transactions) == 0x000018, "Member 'FEconomyGetTransactionHistoryResponse::Transactions' has a wrong offset!");

// ScriptStruct PlayFab.EconomyPublishDraftItemResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomyPublishDraftItemResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomyPublishDraftItemResponse) == 0x000008, "Wrong alignment on FEconomyPublishDraftItemResponse");
static_assert(sizeof(FEconomyPublishDraftItemResponse) == 0x000008, "Wrong size on FEconomyPublishDraftItemResponse");

// ScriptStruct PlayFab.EconomyPurchaseInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyPurchaseInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ETag;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyPurchaseInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyPurchaseInventoryItemsResponse");
static_assert(sizeof(FEconomyPurchaseInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyPurchaseInventoryItemsResponse");
static_assert(offsetof(FEconomyPurchaseInventoryItemsResponse, ETag) == 0x000008, "Member 'FEconomyPurchaseInventoryItemsResponse::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsResponse, IdempotencyId) == 0x000018, "Member 'FEconomyPurchaseInventoryItemsResponse::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyPurchaseInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemAppleAppStoreInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyRedeemAppleAppStoreInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Failed;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Succeeded;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemAppleAppStoreInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyRedeemAppleAppStoreInventoryItemsResponse");
static_assert(sizeof(FEconomyRedeemAppleAppStoreInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyRedeemAppleAppStoreInventoryItemsResponse");
static_assert(offsetof(FEconomyRedeemAppleAppStoreInventoryItemsResponse, Failed) == 0x000008, "Member 'FEconomyRedeemAppleAppStoreInventoryItemsResponse::Failed' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemAppleAppStoreInventoryItemsResponse, Succeeded) == 0x000018, "Member 'FEconomyRedeemAppleAppStoreInventoryItemsResponse::Succeeded' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemAppleAppStoreInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyRedeemAppleAppStoreInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemGooglePlayInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyRedeemGooglePlayInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Failed;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Succeeded;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemGooglePlayInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyRedeemGooglePlayInventoryItemsResponse");
static_assert(sizeof(FEconomyRedeemGooglePlayInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyRedeemGooglePlayInventoryItemsResponse");
static_assert(offsetof(FEconomyRedeemGooglePlayInventoryItemsResponse, Failed) == 0x000008, "Member 'FEconomyRedeemGooglePlayInventoryItemsResponse::Failed' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemGooglePlayInventoryItemsResponse, Succeeded) == 0x000018, "Member 'FEconomyRedeemGooglePlayInventoryItemsResponse::Succeeded' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemGooglePlayInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyRedeemGooglePlayInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemNintendoEShopInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyRedeemNintendoEShopInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Failed;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Succeeded;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemNintendoEShopInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyRedeemNintendoEShopInventoryItemsResponse");
static_assert(sizeof(FEconomyRedeemNintendoEShopInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyRedeemNintendoEShopInventoryItemsResponse");
static_assert(offsetof(FEconomyRedeemNintendoEShopInventoryItemsResponse, Failed) == 0x000008, "Member 'FEconomyRedeemNintendoEShopInventoryItemsResponse::Failed' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemNintendoEShopInventoryItemsResponse, Succeeded) == 0x000018, "Member 'FEconomyRedeemNintendoEShopInventoryItemsResponse::Succeeded' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemNintendoEShopInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyRedeemNintendoEShopInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemPlayStationStoreInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyRedeemPlayStationStoreInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Failed;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Succeeded;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemPlayStationStoreInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyRedeemPlayStationStoreInventoryItemsResponse");
static_assert(sizeof(FEconomyRedeemPlayStationStoreInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyRedeemPlayStationStoreInventoryItemsResponse");
static_assert(offsetof(FEconomyRedeemPlayStationStoreInventoryItemsResponse, Failed) == 0x000008, "Member 'FEconomyRedeemPlayStationStoreInventoryItemsResponse::Failed' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemPlayStationStoreInventoryItemsResponse, Succeeded) == 0x000018, "Member 'FEconomyRedeemPlayStationStoreInventoryItemsResponse::Succeeded' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemPlayStationStoreInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyRedeemPlayStationStoreInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemSteamInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyRedeemSteamInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Failed;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Succeeded;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemSteamInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyRedeemSteamInventoryItemsResponse");
static_assert(sizeof(FEconomyRedeemSteamInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyRedeemSteamInventoryItemsResponse");
static_assert(offsetof(FEconomyRedeemSteamInventoryItemsResponse, Failed) == 0x000008, "Member 'FEconomyRedeemSteamInventoryItemsResponse::Failed' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemSteamInventoryItemsResponse, Succeeded) == 0x000018, "Member 'FEconomyRedeemSteamInventoryItemsResponse::Succeeded' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemSteamInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyRedeemSteamInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyReportItemResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomyReportItemResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomyReportItemResponse) == 0x000008, "Wrong alignment on FEconomyReportItemResponse");
static_assert(sizeof(FEconomyReportItemResponse) == 0x000008, "Wrong size on FEconomyReportItemResponse");

// ScriptStruct PlayFab.EconomyReportItemReviewResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomyReportItemReviewResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomyReportItemReviewResponse) == 0x000008, "Wrong alignment on FEconomyReportItemReviewResponse");
static_assert(sizeof(FEconomyReportItemReviewResponse) == 0x000008, "Wrong size on FEconomyReportItemReviewResponse");

// ScriptStruct PlayFab.EconomySearchItemsResponse
// 0x0020 (0x0028 - 0x0008)
struct FEconomySearchItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomySearchItemsResponse) == 0x000008, "Wrong alignment on FEconomySearchItemsResponse");
static_assert(sizeof(FEconomySearchItemsResponse) == 0x000028, "Wrong size on FEconomySearchItemsResponse");
static_assert(offsetof(FEconomySearchItemsResponse, ContinuationToken) == 0x000008, "Member 'FEconomySearchItemsResponse::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomySearchItemsResponse, Items) == 0x000018, "Member 'FEconomySearchItemsResponse::Items' has a wrong offset!");

// ScriptStruct PlayFab.EconomySetItemModerationStateResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomySetItemModerationStateResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomySetItemModerationStateResponse) == 0x000008, "Wrong alignment on FEconomySetItemModerationStateResponse");
static_assert(sizeof(FEconomySetItemModerationStateResponse) == 0x000008, "Wrong size on FEconomySetItemModerationStateResponse");

// ScriptStruct PlayFab.EconomySubmitItemReviewVoteResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomySubmitItemReviewVoteResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomySubmitItemReviewVoteResponse) == 0x000008, "Wrong alignment on FEconomySubmitItemReviewVoteResponse");
static_assert(sizeof(FEconomySubmitItemReviewVoteResponse) == 0x000008, "Wrong size on FEconomySubmitItemReviewVoteResponse");

// ScriptStruct PlayFab.EconomySubtractInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomySubtractInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ETag;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomySubtractInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomySubtractInventoryItemsResponse");
static_assert(sizeof(FEconomySubtractInventoryItemsResponse) == 0x000038, "Wrong size on FEconomySubtractInventoryItemsResponse");
static_assert(offsetof(FEconomySubtractInventoryItemsResponse, ETag) == 0x000008, "Member 'FEconomySubtractInventoryItemsResponse::ETag' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsResponse, IdempotencyId) == 0x000018, "Member 'FEconomySubtractInventoryItemsResponse::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomySubtractInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyTakedownItemReviewsResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomyTakedownItemReviewsResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomyTakedownItemReviewsResponse) == 0x000008, "Wrong alignment on FEconomyTakedownItemReviewsResponse");
static_assert(sizeof(FEconomyTakedownItemReviewsResponse) == 0x000008, "Wrong size on FEconomyTakedownItemReviewsResponse");

// ScriptStruct PlayFab.EconomyUpdateCatalogConfigResponse
// 0x0000 (0x0008 - 0x0008)
struct FEconomyUpdateCatalogConfigResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FEconomyUpdateCatalogConfigResponse) == 0x000008, "Wrong alignment on FEconomyUpdateCatalogConfigResponse");
static_assert(sizeof(FEconomyUpdateCatalogConfigResponse) == 0x000008, "Wrong size on FEconomyUpdateCatalogConfigResponse");

// ScriptStruct PlayFab.EconomyUpdateDraftItemResponse
// 0x0008 (0x0010 - 0x0008)
struct FEconomyUpdateDraftItemResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Item;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyUpdateDraftItemResponse) == 0x000008, "Wrong alignment on FEconomyUpdateDraftItemResponse");
static_assert(sizeof(FEconomyUpdateDraftItemResponse) == 0x000010, "Wrong size on FEconomyUpdateDraftItemResponse");
static_assert(offsetof(FEconomyUpdateDraftItemResponse, Item) == 0x000008, "Member 'FEconomyUpdateDraftItemResponse::Item' has a wrong offset!");

// ScriptStruct PlayFab.EconomyUpdateInventoryItemsResponse
// 0x0030 (0x0038 - 0x0008)
struct FEconomyUpdateInventoryItemsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 ETag;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionIds;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyUpdateInventoryItemsResponse) == 0x000008, "Wrong alignment on FEconomyUpdateInventoryItemsResponse");
static_assert(sizeof(FEconomyUpdateInventoryItemsResponse) == 0x000038, "Wrong size on FEconomyUpdateInventoryItemsResponse");
static_assert(offsetof(FEconomyUpdateInventoryItemsResponse, ETag) == 0x000008, "Member 'FEconomyUpdateInventoryItemsResponse::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateInventoryItemsResponse, IdempotencyId) == 0x000018, "Member 'FEconomyUpdateInventoryItemsResponse::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateInventoryItemsResponse, TransactionIds) == 0x000028, "Member 'FEconomyUpdateInventoryItemsResponse::TransactionIds' has a wrong offset!");

// ScriptStruct PlayFab.EconomyDeleteInventoryCollectionRequest
// 0x0030 (0x0038 - 0x0008)
struct FEconomyDeleteInventoryCollectionRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ETag;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyDeleteInventoryCollectionRequest) == 0x000008, "Wrong alignment on FEconomyDeleteInventoryCollectionRequest");
static_assert(sizeof(FEconomyDeleteInventoryCollectionRequest) == 0x000038, "Wrong size on FEconomyDeleteInventoryCollectionRequest");
static_assert(offsetof(FEconomyDeleteInventoryCollectionRequest, CollectionId) == 0x000008, "Member 'FEconomyDeleteInventoryCollectionRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryCollectionRequest, CustomTags) == 0x000018, "Member 'FEconomyDeleteInventoryCollectionRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryCollectionRequest, Entity) == 0x000020, "Member 'FEconomyDeleteInventoryCollectionRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryCollectionRequest, ETag) == 0x000028, "Member 'FEconomyDeleteInventoryCollectionRequest::ETag' has a wrong offset!");

// ScriptStruct PlayFab.EconomyDeleteInventoryItemsRequest
// 0x0048 (0x0050 - 0x0008)
struct FEconomyDeleteInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ETag;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Item;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyDeleteInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyDeleteInventoryItemsRequest");
static_assert(sizeof(FEconomyDeleteInventoryItemsRequest) == 0x000050, "Wrong size on FEconomyDeleteInventoryItemsRequest");
static_assert(offsetof(FEconomyDeleteInventoryItemsRequest, CollectionId) == 0x000008, "Member 'FEconomyDeleteInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryItemsRequest, CustomTags) == 0x000018, "Member 'FEconomyDeleteInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryItemsRequest, Entity) == 0x000020, "Member 'FEconomyDeleteInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryItemsRequest, ETag) == 0x000028, "Member 'FEconomyDeleteInventoryItemsRequest::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryItemsRequest, IdempotencyId) == 0x000038, "Member 'FEconomyDeleteInventoryItemsRequest::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteInventoryItemsRequest, Item) == 0x000048, "Member 'FEconomyDeleteInventoryItemsRequest::Item' has a wrong offset!");

// ScriptStruct PlayFab.EconomyDeleteItemRequest
// 0x0028 (0x0030 - 0x0008)
struct FEconomyDeleteItemRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyDeleteItemRequest) == 0x000008, "Wrong alignment on FEconomyDeleteItemRequest");
static_assert(sizeof(FEconomyDeleteItemRequest) == 0x000030, "Wrong size on FEconomyDeleteItemRequest");
static_assert(offsetof(FEconomyDeleteItemRequest, AlternateId) == 0x000008, "Member 'FEconomyDeleteItemRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteItemRequest, CustomTags) == 0x000010, "Member 'FEconomyDeleteItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteItemRequest, Entity) == 0x000018, "Member 'FEconomyDeleteItemRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyDeleteItemRequest, ID) == 0x000020, "Member 'FEconomyDeleteItemRequest::ID' has a wrong offset!");

// ScriptStruct PlayFab.EconomyExecuteInventoryOperationsRequest
// 0x0050 (0x0058 - 0x0008)
struct FEconomyExecuteInventoryOperationsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ETag;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Operations;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyExecuteInventoryOperationsRequest) == 0x000008, "Wrong alignment on FEconomyExecuteInventoryOperationsRequest");
static_assert(sizeof(FEconomyExecuteInventoryOperationsRequest) == 0x000058, "Wrong size on FEconomyExecuteInventoryOperationsRequest");
static_assert(offsetof(FEconomyExecuteInventoryOperationsRequest, CollectionId) == 0x000008, "Member 'FEconomyExecuteInventoryOperationsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyExecuteInventoryOperationsRequest, CustomTags) == 0x000018, "Member 'FEconomyExecuteInventoryOperationsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyExecuteInventoryOperationsRequest, Entity) == 0x000020, "Member 'FEconomyExecuteInventoryOperationsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyExecuteInventoryOperationsRequest, ETag) == 0x000028, "Member 'FEconomyExecuteInventoryOperationsRequest::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyExecuteInventoryOperationsRequest, IdempotencyId) == 0x000038, "Member 'FEconomyExecuteInventoryOperationsRequest::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyExecuteInventoryOperationsRequest, Operations) == 0x000048, "Member 'FEconomyExecuteInventoryOperationsRequest::Operations' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetCatalogConfigRequest
// 0x0008 (0x0010 - 0x0008)
struct FEconomyGetCatalogConfigRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetCatalogConfigRequest) == 0x000008, "Wrong alignment on FEconomyGetCatalogConfigRequest");
static_assert(sizeof(FEconomyGetCatalogConfigRequest) == 0x000010, "Wrong size on FEconomyGetCatalogConfigRequest");
static_assert(offsetof(FEconomyGetCatalogConfigRequest, CustomTags) == 0x000008, "Member 'FEconomyGetCatalogConfigRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetDraftItemRequest
// 0x0028 (0x0030 - 0x0008)
struct FEconomyGetDraftItemRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetDraftItemRequest) == 0x000008, "Wrong alignment on FEconomyGetDraftItemRequest");
static_assert(sizeof(FEconomyGetDraftItemRequest) == 0x000030, "Wrong size on FEconomyGetDraftItemRequest");
static_assert(offsetof(FEconomyGetDraftItemRequest, AlternateId) == 0x000008, "Member 'FEconomyGetDraftItemRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyGetDraftItemRequest, CustomTags) == 0x000010, "Member 'FEconomyGetDraftItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetDraftItemRequest, Entity) == 0x000018, "Member 'FEconomyGetDraftItemRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetDraftItemRequest, ID) == 0x000020, "Member 'FEconomyGetDraftItemRequest::ID' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetDraftItemsRequest
// 0x0030 (0x0038 - 0x0008)
struct FEconomyGetDraftItemsRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             AlternateIds;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ids;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetDraftItemsRequest) == 0x000008, "Wrong alignment on FEconomyGetDraftItemsRequest");
static_assert(sizeof(FEconomyGetDraftItemsRequest) == 0x000038, "Wrong size on FEconomyGetDraftItemsRequest");
static_assert(offsetof(FEconomyGetDraftItemsRequest, AlternateIds) == 0x000008, "Member 'FEconomyGetDraftItemsRequest::AlternateIds' has a wrong offset!");
static_assert(offsetof(FEconomyGetDraftItemsRequest, CustomTags) == 0x000018, "Member 'FEconomyGetDraftItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetDraftItemsRequest, Entity) == 0x000020, "Member 'FEconomyGetDraftItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetDraftItemsRequest, Ids) == 0x000028, "Member 'FEconomyGetDraftItemsRequest::Ids' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetEntityDraftItemsRequest
// 0x0038 (0x0040 - 0x0008)
struct FEconomyGetEntityDraftItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C4[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetEntityDraftItemsRequest) == 0x000008, "Wrong alignment on FEconomyGetEntityDraftItemsRequest");
static_assert(sizeof(FEconomyGetEntityDraftItemsRequest) == 0x000040, "Wrong size on FEconomyGetEntityDraftItemsRequest");
static_assert(offsetof(FEconomyGetEntityDraftItemsRequest, ContinuationToken) == 0x000008, "Member 'FEconomyGetEntityDraftItemsRequest::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomyGetEntityDraftItemsRequest, Count) == 0x000018, "Member 'FEconomyGetEntityDraftItemsRequest::Count' has a wrong offset!");
static_assert(offsetof(FEconomyGetEntityDraftItemsRequest, CustomTags) == 0x000020, "Member 'FEconomyGetEntityDraftItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetEntityDraftItemsRequest, Entity) == 0x000028, "Member 'FEconomyGetEntityDraftItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetEntityDraftItemsRequest, Filter) == 0x000030, "Member 'FEconomyGetEntityDraftItemsRequest::Filter' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListBuildAliasesRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerListBuildAliasesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListBuildAliasesRequest) == 0x000008, "Wrong alignment on FMultiplayerListBuildAliasesRequest");
static_assert(sizeof(FMultiplayerListBuildAliasesRequest) == 0x000028, "Wrong size on FMultiplayerListBuildAliasesRequest");
static_assert(offsetof(FMultiplayerListBuildAliasesRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListBuildAliasesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListBuildAliasesRequest, PageSize) == 0x000010, "Member 'FMultiplayerListBuildAliasesRequest::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListBuildAliasesRequest, SkipToken) == 0x000018, "Member 'FMultiplayerListBuildAliasesRequest::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetEntityItemReviewRequest
// 0x0028 (0x0030 - 0x0008)
struct FEconomyGetEntityItemReviewRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetEntityItemReviewRequest) == 0x000008, "Wrong alignment on FEconomyGetEntityItemReviewRequest");
static_assert(sizeof(FEconomyGetEntityItemReviewRequest) == 0x000030, "Wrong size on FEconomyGetEntityItemReviewRequest");
static_assert(offsetof(FEconomyGetEntityItemReviewRequest, AlternateId) == 0x000008, "Member 'FEconomyGetEntityItemReviewRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyGetEntityItemReviewRequest, CustomTags) == 0x000010, "Member 'FEconomyGetEntityItemReviewRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetEntityItemReviewRequest, Entity) == 0x000018, "Member 'FEconomyGetEntityItemReviewRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetEntityItemReviewRequest, ID) == 0x000020, "Member 'FEconomyGetEntityItemReviewRequest::ID' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemRequest
// 0x0028 (0x0030 - 0x0008)
struct FEconomyGetItemRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemRequest) == 0x000008, "Wrong alignment on FEconomyGetItemRequest");
static_assert(sizeof(FEconomyGetItemRequest) == 0x000030, "Wrong size on FEconomyGetItemRequest");
static_assert(offsetof(FEconomyGetItemRequest, AlternateId) == 0x000008, "Member 'FEconomyGetItemRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemRequest, CustomTags) == 0x000010, "Member 'FEconomyGetItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemRequest, Entity) == 0x000018, "Member 'FEconomyGetItemRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemRequest, ID) == 0x000020, "Member 'FEconomyGetItemRequest::ID' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListContainerImageTagsRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerListContainerImageTagsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListContainerImageTagsRequest) == 0x000008, "Wrong alignment on FMultiplayerListContainerImageTagsRequest");
static_assert(sizeof(FMultiplayerListContainerImageTagsRequest) == 0x000020, "Wrong size on FMultiplayerListContainerImageTagsRequest");
static_assert(offsetof(FMultiplayerListContainerImageTagsRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListContainerImageTagsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListContainerImageTagsRequest, ImageName) == 0x000010, "Member 'FMultiplayerListContainerImageTagsRequest::ImageName' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemPublishStatusRequest
// 0x0028 (0x0030 - 0x0008)
struct FEconomyGetItemPublishStatusRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemPublishStatusRequest) == 0x000008, "Wrong alignment on FEconomyGetItemPublishStatusRequest");
static_assert(sizeof(FEconomyGetItemPublishStatusRequest) == 0x000030, "Wrong size on FEconomyGetItemPublishStatusRequest");
static_assert(offsetof(FEconomyGetItemPublishStatusRequest, AlternateId) == 0x000008, "Member 'FEconomyGetItemPublishStatusRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemPublishStatusRequest, CustomTags) == 0x000010, "Member 'FEconomyGetItemPublishStatusRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemPublishStatusRequest, Entity) == 0x000018, "Member 'FEconomyGetItemPublishStatusRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemPublishStatusRequest, ID) == 0x000020, "Member 'FEconomyGetItemPublishStatusRequest::ID' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListContainerImagesRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerListContainerImagesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C6[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListContainerImagesRequest) == 0x000008, "Wrong alignment on FMultiplayerListContainerImagesRequest");
static_assert(sizeof(FMultiplayerListContainerImagesRequest) == 0x000028, "Wrong size on FMultiplayerListContainerImagesRequest");
static_assert(offsetof(FMultiplayerListContainerImagesRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListContainerImagesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListContainerImagesRequest, PageSize) == 0x000010, "Member 'FMultiplayerListContainerImagesRequest::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListContainerImagesRequest, SkipToken) == 0x000018, "Member 'FMultiplayerListContainerImagesRequest::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetItemsRequest
// 0x0030 (0x0038 - 0x0008)
struct FEconomyGetItemsRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             AlternateIds;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ids;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetItemsRequest) == 0x000008, "Wrong alignment on FEconomyGetItemsRequest");
static_assert(sizeof(FEconomyGetItemsRequest) == 0x000038, "Wrong size on FEconomyGetItemsRequest");
static_assert(offsetof(FEconomyGetItemsRequest, AlternateIds) == 0x000008, "Member 'FEconomyGetItemsRequest::AlternateIds' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemsRequest, CustomTags) == 0x000018, "Member 'FEconomyGetItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemsRequest, Entity) == 0x000020, "Member 'FEconomyGetItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyGetItemsRequest, Ids) == 0x000028, "Member 'FEconomyGetItemsRequest::Ids' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateUserDataRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerUpdateUserDataRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserDataPermission                           Permission;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C7[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdateUserDataRequest) == 0x000008, "Wrong alignment on FServerUpdateUserDataRequest");
static_assert(sizeof(FServerUpdateUserDataRequest) == 0x000040, "Wrong size on FServerUpdateUserDataRequest");
static_assert(offsetof(FServerUpdateUserDataRequest, CustomTags) == 0x000008, "Member 'FServerUpdateUserDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserDataRequest, Data) == 0x000010, "Member 'FServerUpdateUserDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserDataRequest, KeysToRemove) == 0x000018, "Member 'FServerUpdateUserDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserDataRequest, Permission) == 0x000028, "Member 'FServerUpdateUserDataRequest::Permission' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserDataRequest, PlayFabId) == 0x000030, "Member 'FServerUpdateUserDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.EconomyGetMicrosoftStoreAccessTokensRequest
// 0x0008 (0x0010 - 0x0008)
struct FEconomyGetMicrosoftStoreAccessTokensRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyGetMicrosoftStoreAccessTokensRequest) == 0x000008, "Wrong alignment on FEconomyGetMicrosoftStoreAccessTokensRequest");
static_assert(sizeof(FEconomyGetMicrosoftStoreAccessTokensRequest) == 0x000010, "Wrong size on FEconomyGetMicrosoftStoreAccessTokensRequest");
static_assert(offsetof(FEconomyGetMicrosoftStoreAccessTokensRequest, CustomTags) == 0x000008, "Member 'FEconomyGetMicrosoftStoreAccessTokensRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.EconomyPurchaseInventoryItemsRequest
// 0x0080 (0x0088 - 0x0008)
struct FEconomyPurchaseInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C8[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CollectionId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteEmptyStacks;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C9[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationInSeconds;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ETag;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Item;                                              // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     NewStackValues;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             PriceAmounts;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyPurchaseInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyPurchaseInventoryItemsRequest");
static_assert(sizeof(FEconomyPurchaseInventoryItemsRequest) == 0x000088, "Wrong size on FEconomyPurchaseInventoryItemsRequest");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, Amount) == 0x000008, "Member 'FEconomyPurchaseInventoryItemsRequest::Amount' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, CollectionId) == 0x000010, "Member 'FEconomyPurchaseInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, CustomTags) == 0x000020, "Member 'FEconomyPurchaseInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, DeleteEmptyStacks) == 0x000028, "Member 'FEconomyPurchaseInventoryItemsRequest::DeleteEmptyStacks' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, DurationInSeconds) == 0x00002C, "Member 'FEconomyPurchaseInventoryItemsRequest::DurationInSeconds' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, Entity) == 0x000030, "Member 'FEconomyPurchaseInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, ETag) == 0x000038, "Member 'FEconomyPurchaseInventoryItemsRequest::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, IdempotencyId) == 0x000048, "Member 'FEconomyPurchaseInventoryItemsRequest::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, Item) == 0x000058, "Member 'FEconomyPurchaseInventoryItemsRequest::Item' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, NewStackValues) == 0x000060, "Member 'FEconomyPurchaseInventoryItemsRequest::NewStackValues' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, PriceAmounts) == 0x000068, "Member 'FEconomyPurchaseInventoryItemsRequest::PriceAmounts' has a wrong offset!");
static_assert(offsetof(FEconomyPurchaseInventoryItemsRequest, StoreId) == 0x000078, "Member 'FEconomyPurchaseInventoryItemsRequest::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemAppleAppStoreInventoryItemsRequest
// 0x0030 (0x0038 - 0x0008)
struct FEconomyRedeemAppleAppStoreInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Receipt;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemAppleAppStoreInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyRedeemAppleAppStoreInventoryItemsRequest");
static_assert(sizeof(FEconomyRedeemAppleAppStoreInventoryItemsRequest) == 0x000038, "Wrong size on FEconomyRedeemAppleAppStoreInventoryItemsRequest");
static_assert(offsetof(FEconomyRedeemAppleAppStoreInventoryItemsRequest, CollectionId) == 0x000008, "Member 'FEconomyRedeemAppleAppStoreInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemAppleAppStoreInventoryItemsRequest, CustomTags) == 0x000018, "Member 'FEconomyRedeemAppleAppStoreInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemAppleAppStoreInventoryItemsRequest, Entity) == 0x000020, "Member 'FEconomyRedeemAppleAppStoreInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemAppleAppStoreInventoryItemsRequest, Receipt) == 0x000028, "Member 'FEconomyRedeemAppleAppStoreInventoryItemsRequest::Receipt' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetLeaderboardRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerGetLeaderboardRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResultsCount;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CA[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPosition;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CB[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatisticName;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpecificVersion;                                // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CC[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetLeaderboardRequest) == 0x000008, "Wrong alignment on FServerGetLeaderboardRequest");
static_assert(sizeof(FServerGetLeaderboardRequest) == 0x000040, "Wrong size on FServerGetLeaderboardRequest");
static_assert(offsetof(FServerGetLeaderboardRequest, CustomTags) == 0x000008, "Member 'FServerGetLeaderboardRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardRequest, MaxResultsCount) == 0x000010, "Member 'FServerGetLeaderboardRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardRequest, ProfileConstraints) == 0x000018, "Member 'FServerGetLeaderboardRequest::ProfileConstraints' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardRequest, StartPosition) == 0x000020, "Member 'FServerGetLeaderboardRequest::StartPosition' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardRequest, StatisticName) == 0x000028, "Member 'FServerGetLeaderboardRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardRequest, UseSpecificVersion) == 0x000038, "Member 'FServerGetLeaderboardRequest::UseSpecificVersion' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardRequest, Version) == 0x00003C, "Member 'FServerGetLeaderboardRequest::Version' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemMicrosoftStoreInventoryItemsRequest
// 0x0040 (0x0048 - 0x0008)
struct FEconomyRedeemMicrosoftStoreInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollectionsIdKey;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemMicrosoftStoreInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyRedeemMicrosoftStoreInventoryItemsRequest");
static_assert(sizeof(FEconomyRedeemMicrosoftStoreInventoryItemsRequest) == 0x000048, "Wrong size on FEconomyRedeemMicrosoftStoreInventoryItemsRequest");
static_assert(offsetof(FEconomyRedeemMicrosoftStoreInventoryItemsRequest, CollectionId) == 0x000008, "Member 'FEconomyRedeemMicrosoftStoreInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemMicrosoftStoreInventoryItemsRequest, CollectionsIdKey) == 0x000018, "Member 'FEconomyRedeemMicrosoftStoreInventoryItemsRequest::CollectionsIdKey' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemMicrosoftStoreInventoryItemsRequest, CustomTags) == 0x000028, "Member 'FEconomyRedeemMicrosoftStoreInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemMicrosoftStoreInventoryItemsRequest, Entity) == 0x000030, "Member 'FEconomyRedeemMicrosoftStoreInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemMicrosoftStoreInventoryItemsRequest, XboxToken) == 0x000038, "Member 'FEconomyRedeemMicrosoftStoreInventoryItemsRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.EconomyRedeemNintendoEShopInventoryItemsRequest
// 0x0030 (0x0038 - 0x0008)
struct FEconomyRedeemNintendoEShopInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NintendoServiceAccountIdToken;                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyRedeemNintendoEShopInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyRedeemNintendoEShopInventoryItemsRequest");
static_assert(sizeof(FEconomyRedeemNintendoEShopInventoryItemsRequest) == 0x000038, "Wrong size on FEconomyRedeemNintendoEShopInventoryItemsRequest");
static_assert(offsetof(FEconomyRedeemNintendoEShopInventoryItemsRequest, CollectionId) == 0x000008, "Member 'FEconomyRedeemNintendoEShopInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemNintendoEShopInventoryItemsRequest, CustomTags) == 0x000018, "Member 'FEconomyRedeemNintendoEShopInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemNintendoEShopInventoryItemsRequest, Entity) == 0x000020, "Member 'FEconomyRedeemNintendoEShopInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyRedeemNintendoEShopInventoryItemsRequest, NintendoServiceAccountIdToken) == 0x000028, "Member 'FEconomyRedeemNintendoEShopInventoryItemsRequest::NintendoServiceAccountIdToken' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerCombinedInfoRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerGetPlayerCombinedInfoRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerCombinedInfoRequest) == 0x000008, "Wrong alignment on FServerGetPlayerCombinedInfoRequest");
static_assert(sizeof(FServerGetPlayerCombinedInfoRequest) == 0x000028, "Wrong size on FServerGetPlayerCombinedInfoRequest");
static_assert(offsetof(FServerGetPlayerCombinedInfoRequest, CustomTags) == 0x000008, "Member 'FServerGetPlayerCombinedInfoRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerCombinedInfoRequest, InfoRequestParameters) == 0x000010, "Member 'FServerGetPlayerCombinedInfoRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerCombinedInfoRequest, PlayFabId) == 0x000018, "Member 'FServerGetPlayerCombinedInfoRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.EconomyReportItemRequest
// 0x0040 (0x0048 - 0x0008)
struct FEconomyReportItemRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcernCategory                              ConcernCategory;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CD[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyReportItemRequest) == 0x000008, "Wrong alignment on FEconomyReportItemRequest");
static_assert(sizeof(FEconomyReportItemRequest) == 0x000048, "Wrong size on FEconomyReportItemRequest");
static_assert(offsetof(FEconomyReportItemRequest, AlternateId) == 0x000008, "Member 'FEconomyReportItemRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemRequest, ConcernCategory) == 0x000010, "Member 'FEconomyReportItemRequest::ConcernCategory' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemRequest, CustomTags) == 0x000018, "Member 'FEconomyReportItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemRequest, Entity) == 0x000020, "Member 'FEconomyReportItemRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemRequest, ID) == 0x000028, "Member 'FEconomyReportItemRequest::ID' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemRequest, Reason) == 0x000038, "Member 'FEconomyReportItemRequest::Reason' has a wrong offset!");

// ScriptStruct PlayFab.EconomyReportItemReviewRequest
// 0x0050 (0x0058 - 0x0008)
struct FEconomyReportItemReviewRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConcernCategory                              ConcernCategory;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CE[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReviewId;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyReportItemReviewRequest) == 0x000008, "Wrong alignment on FEconomyReportItemReviewRequest");
static_assert(sizeof(FEconomyReportItemReviewRequest) == 0x000058, "Wrong size on FEconomyReportItemReviewRequest");
static_assert(offsetof(FEconomyReportItemReviewRequest, AlternateId) == 0x000008, "Member 'FEconomyReportItemReviewRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemReviewRequest, ConcernCategory) == 0x000010, "Member 'FEconomyReportItemReviewRequest::ConcernCategory' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemReviewRequest, CustomTags) == 0x000018, "Member 'FEconomyReportItemReviewRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemReviewRequest, Entity) == 0x000020, "Member 'FEconomyReportItemReviewRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemReviewRequest, ItemId) == 0x000028, "Member 'FEconomyReportItemReviewRequest::ItemId' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemReviewRequest, Reason) == 0x000038, "Member 'FEconomyReportItemReviewRequest::Reason' has a wrong offset!");
static_assert(offsetof(FEconomyReportItemReviewRequest, ReviewId) == 0x000048, "Member 'FEconomyReportItemReviewRequest::ReviewId' has a wrong offset!");

// ScriptStruct PlayFab.EconomyReviewItemRequest
// 0x0030 (0x0038 - 0x0008)
struct FEconomyReviewItemRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Review;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyReviewItemRequest) == 0x000008, "Wrong alignment on FEconomyReviewItemRequest");
static_assert(sizeof(FEconomyReviewItemRequest) == 0x000038, "Wrong size on FEconomyReviewItemRequest");
static_assert(offsetof(FEconomyReviewItemRequest, AlternateId) == 0x000008, "Member 'FEconomyReviewItemRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomyReviewItemRequest, CustomTags) == 0x000010, "Member 'FEconomyReviewItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyReviewItemRequest, Entity) == 0x000018, "Member 'FEconomyReviewItemRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyReviewItemRequest, ID) == 0x000020, "Member 'FEconomyReviewItemRequest::ID' has a wrong offset!");
static_assert(offsetof(FEconomyReviewItemRequest, Review) == 0x000030, "Member 'FEconomyReviewItemRequest::Review' has a wrong offset!");

// ScriptStruct PlayFab.EconomySearchItemsRequest
// 0x0070 (0x0078 - 0x0008)
struct FEconomySearchItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CF[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filter;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderBy;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Search;                                            // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Select;                                            // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Store;                                             // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomySearchItemsRequest) == 0x000008, "Wrong alignment on FEconomySearchItemsRequest");
static_assert(sizeof(FEconomySearchItemsRequest) == 0x000078, "Wrong size on FEconomySearchItemsRequest");
static_assert(offsetof(FEconomySearchItemsRequest, ContinuationToken) == 0x000008, "Member 'FEconomySearchItemsRequest::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FEconomySearchItemsRequest, Count) == 0x000018, "Member 'FEconomySearchItemsRequest::Count' has a wrong offset!");
static_assert(offsetof(FEconomySearchItemsRequest, CustomTags) == 0x000020, "Member 'FEconomySearchItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomySearchItemsRequest, Entity) == 0x000028, "Member 'FEconomySearchItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomySearchItemsRequest, Filter) == 0x000030, "Member 'FEconomySearchItemsRequest::Filter' has a wrong offset!");
static_assert(offsetof(FEconomySearchItemsRequest, OrderBy) == 0x000040, "Member 'FEconomySearchItemsRequest::OrderBy' has a wrong offset!");
static_assert(offsetof(FEconomySearchItemsRequest, Search) == 0x000050, "Member 'FEconomySearchItemsRequest::Search' has a wrong offset!");
static_assert(offsetof(FEconomySearchItemsRequest, Select) == 0x000060, "Member 'FEconomySearchItemsRequest::Select' has a wrong offset!");
static_assert(offsetof(FEconomySearchItemsRequest, Store) == 0x000070, "Member 'FEconomySearchItemsRequest::Store' has a wrong offset!");

// ScriptStruct PlayFab.EconomySetItemModerationStateRequest
// 0x0038 (0x0040 - 0x0008)
struct FEconomySetItemModerationStateRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModerationStatus                             Status;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D0[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEconomySetItemModerationStateRequest) == 0x000008, "Wrong alignment on FEconomySetItemModerationStateRequest");
static_assert(sizeof(FEconomySetItemModerationStateRequest) == 0x000040, "Wrong size on FEconomySetItemModerationStateRequest");
static_assert(offsetof(FEconomySetItemModerationStateRequest, AlternateId) == 0x000008, "Member 'FEconomySetItemModerationStateRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomySetItemModerationStateRequest, CustomTags) == 0x000010, "Member 'FEconomySetItemModerationStateRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomySetItemModerationStateRequest, ID) == 0x000018, "Member 'FEconomySetItemModerationStateRequest::ID' has a wrong offset!");
static_assert(offsetof(FEconomySetItemModerationStateRequest, Reason) == 0x000028, "Member 'FEconomySetItemModerationStateRequest::Reason' has a wrong offset!");
static_assert(offsetof(FEconomySetItemModerationStateRequest, Status) == 0x000038, "Member 'FEconomySetItemModerationStateRequest::Status' has a wrong offset!");

// ScriptStruct PlayFab.EconomySubmitItemReviewVoteRequest
// 0x0040 (0x0048 - 0x0008)
struct FEconomySubmitItemReviewVoteRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     AlternateId;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReviewId;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHelpfulnessVote                              Vote;                                              // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D1[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEconomySubmitItemReviewVoteRequest) == 0x000008, "Wrong alignment on FEconomySubmitItemReviewVoteRequest");
static_assert(sizeof(FEconomySubmitItemReviewVoteRequest) == 0x000048, "Wrong size on FEconomySubmitItemReviewVoteRequest");
static_assert(offsetof(FEconomySubmitItemReviewVoteRequest, AlternateId) == 0x000008, "Member 'FEconomySubmitItemReviewVoteRequest::AlternateId' has a wrong offset!");
static_assert(offsetof(FEconomySubmitItemReviewVoteRequest, CustomTags) == 0x000010, "Member 'FEconomySubmitItemReviewVoteRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomySubmitItemReviewVoteRequest, Entity) == 0x000018, "Member 'FEconomySubmitItemReviewVoteRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomySubmitItemReviewVoteRequest, ItemId) == 0x000020, "Member 'FEconomySubmitItemReviewVoteRequest::ItemId' has a wrong offset!");
static_assert(offsetof(FEconomySubmitItemReviewVoteRequest, ReviewId) == 0x000030, "Member 'FEconomySubmitItemReviewVoteRequest::ReviewId' has a wrong offset!");
static_assert(offsetof(FEconomySubmitItemReviewVoteRequest, Vote) == 0x000040, "Member 'FEconomySubmitItemReviewVoteRequest::Vote' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkPSNAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FServerLinkPSNAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerLinkPSNAccountResult) == 0x000008, "Wrong alignment on FServerLinkPSNAccountResult");
static_assert(sizeof(FServerLinkPSNAccountResult) == 0x000008, "Wrong size on FServerLinkPSNAccountResult");

// ScriptStruct PlayFab.EconomySubtractInventoryItemsRequest
// 0x0058 (0x0060 - 0x0008)
struct FEconomySubtractInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CollectionId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteEmptyStacks;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D3[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationInSeconds;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ETag;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Item;                                              // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomySubtractInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomySubtractInventoryItemsRequest");
static_assert(sizeof(FEconomySubtractInventoryItemsRequest) == 0x000060, "Wrong size on FEconomySubtractInventoryItemsRequest");
static_assert(offsetof(FEconomySubtractInventoryItemsRequest, Amount) == 0x000008, "Member 'FEconomySubtractInventoryItemsRequest::Amount' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsRequest, CollectionId) == 0x000010, "Member 'FEconomySubtractInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsRequest, CustomTags) == 0x000020, "Member 'FEconomySubtractInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsRequest, DeleteEmptyStacks) == 0x000028, "Member 'FEconomySubtractInventoryItemsRequest::DeleteEmptyStacks' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsRequest, DurationInSeconds) == 0x00002C, "Member 'FEconomySubtractInventoryItemsRequest::DurationInSeconds' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsRequest, Entity) == 0x000030, "Member 'FEconomySubtractInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsRequest, ETag) == 0x000038, "Member 'FEconomySubtractInventoryItemsRequest::ETag' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsRequest, IdempotencyId) == 0x000048, "Member 'FEconomySubtractInventoryItemsRequest::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomySubtractInventoryItemsRequest, Item) == 0x000058, "Member 'FEconomySubtractInventoryItemsRequest::Item' has a wrong offset!");

// ScriptStruct PlayFab.ServerAddPlayerTagResult
// 0x0000 (0x0008 - 0x0008)
struct FServerAddPlayerTagResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerAddPlayerTagResult) == 0x000008, "Wrong alignment on FServerAddPlayerTagResult");
static_assert(sizeof(FServerAddPlayerTagResult) == 0x000008, "Wrong size on FServerAddPlayerTagResult");

// ScriptStruct PlayFab.EconomyTransferInventoryItemsRequest
// 0x0080 (0x0088 - 0x0008)
struct FEconomyTransferInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeleteEmptyStacks;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D5[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GivingCollectionId;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     GivingEntity;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GivingETag;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     GivingItem;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     NewStackValues;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceivingCollectionId;                             // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ReceivingEntity;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ReceivingItem;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyTransferInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyTransferInventoryItemsRequest");
static_assert(sizeof(FEconomyTransferInventoryItemsRequest) == 0x000088, "Wrong size on FEconomyTransferInventoryItemsRequest");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, Amount) == 0x000008, "Member 'FEconomyTransferInventoryItemsRequest::Amount' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, CustomTags) == 0x000010, "Member 'FEconomyTransferInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, DeleteEmptyStacks) == 0x000018, "Member 'FEconomyTransferInventoryItemsRequest::DeleteEmptyStacks' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, GivingCollectionId) == 0x000020, "Member 'FEconomyTransferInventoryItemsRequest::GivingCollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, GivingEntity) == 0x000030, "Member 'FEconomyTransferInventoryItemsRequest::GivingEntity' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, GivingETag) == 0x000038, "Member 'FEconomyTransferInventoryItemsRequest::GivingETag' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, GivingItem) == 0x000048, "Member 'FEconomyTransferInventoryItemsRequest::GivingItem' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, IdempotencyId) == 0x000050, "Member 'FEconomyTransferInventoryItemsRequest::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, NewStackValues) == 0x000060, "Member 'FEconomyTransferInventoryItemsRequest::NewStackValues' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, ReceivingCollectionId) == 0x000068, "Member 'FEconomyTransferInventoryItemsRequest::ReceivingCollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, ReceivingEntity) == 0x000078, "Member 'FEconomyTransferInventoryItemsRequest::ReceivingEntity' has a wrong offset!");
static_assert(offsetof(FEconomyTransferInventoryItemsRequest, ReceivingItem) == 0x000080, "Member 'FEconomyTransferInventoryItemsRequest::ReceivingItem' has a wrong offset!");

// ScriptStruct PlayFab.EconomyUpdateDraftItemRequest
// 0x0018 (0x0020 - 0x0008)
struct FEconomyUpdateDraftItemRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Item;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Publish;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEconomyUpdateDraftItemRequest) == 0x000008, "Wrong alignment on FEconomyUpdateDraftItemRequest");
static_assert(sizeof(FEconomyUpdateDraftItemRequest) == 0x000020, "Wrong size on FEconomyUpdateDraftItemRequest");
static_assert(offsetof(FEconomyUpdateDraftItemRequest, CustomTags) == 0x000008, "Member 'FEconomyUpdateDraftItemRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateDraftItemRequest, Item) == 0x000010, "Member 'FEconomyUpdateDraftItemRequest::Item' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateDraftItemRequest, Publish) == 0x000018, "Member 'FEconomyUpdateDraftItemRequest::Publish' has a wrong offset!");

// ScriptStruct PlayFab.ServerModifyUserVirtualCurrencyResult
// 0x0028 (0x0030 - 0x0008)
struct FServerModifyUserVirtualCurrencyResult final : public FPlayFabResultCommon
{
public:
	int32                                         Balance;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BalanceChange;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerModifyUserVirtualCurrencyResult) == 0x000008, "Wrong alignment on FServerModifyUserVirtualCurrencyResult");
static_assert(sizeof(FServerModifyUserVirtualCurrencyResult) == 0x000030, "Wrong size on FServerModifyUserVirtualCurrencyResult");
static_assert(offsetof(FServerModifyUserVirtualCurrencyResult, Balance) == 0x000008, "Member 'FServerModifyUserVirtualCurrencyResult::Balance' has a wrong offset!");
static_assert(offsetof(FServerModifyUserVirtualCurrencyResult, BalanceChange) == 0x00000C, "Member 'FServerModifyUserVirtualCurrencyResult::BalanceChange' has a wrong offset!");
static_assert(offsetof(FServerModifyUserVirtualCurrencyResult, PlayFabId) == 0x000010, "Member 'FServerModifyUserVirtualCurrencyResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerModifyUserVirtualCurrencyResult, VirtualCurrency) == 0x000020, "Member 'FServerModifyUserVirtualCurrencyResult::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.EconomyUpdateInventoryItemsRequest
// 0x0048 (0x0050 - 0x0008)
struct FEconomyUpdateInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CollectionId;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ETag;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IdempotencyId;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Item;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyUpdateInventoryItemsRequest) == 0x000008, "Wrong alignment on FEconomyUpdateInventoryItemsRequest");
static_assert(sizeof(FEconomyUpdateInventoryItemsRequest) == 0x000050, "Wrong size on FEconomyUpdateInventoryItemsRequest");
static_assert(offsetof(FEconomyUpdateInventoryItemsRequest, CollectionId) == 0x000008, "Member 'FEconomyUpdateInventoryItemsRequest::CollectionId' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateInventoryItemsRequest, CustomTags) == 0x000018, "Member 'FEconomyUpdateInventoryItemsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateInventoryItemsRequest, Entity) == 0x000020, "Member 'FEconomyUpdateInventoryItemsRequest::Entity' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateInventoryItemsRequest, ETag) == 0x000028, "Member 'FEconomyUpdateInventoryItemsRequest::ETag' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateInventoryItemsRequest, IdempotencyId) == 0x000038, "Member 'FEconomyUpdateInventoryItemsRequest::IdempotencyId' has a wrong offset!");
static_assert(offsetof(FEconomyUpdateInventoryItemsRequest, Item) == 0x000048, "Member 'FEconomyUpdateInventoryItemsRequest::Item' has a wrong offset!");

// ScriptStruct PlayFab.EventsWriteEventsRequest
// 0x0018 (0x0020 - 0x0008)
struct FEventsWriteEventsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Events;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventsWriteEventsRequest) == 0x000008, "Wrong alignment on FEventsWriteEventsRequest");
static_assert(sizeof(FEventsWriteEventsRequest) == 0x000020, "Wrong size on FEventsWriteEventsRequest");
static_assert(offsetof(FEventsWriteEventsRequest, CustomTags) == 0x000008, "Member 'FEventsWriteEventsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FEventsWriteEventsRequest, Events) == 0x000010, "Member 'FEventsWriteEventsRequest::Events' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationCreateExclusionGroupResult
// 0x0010 (0x0018 - 0x0008)
struct FExperimentationCreateExclusionGroupResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ExclusionGroupId;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationCreateExclusionGroupResult) == 0x000008, "Wrong alignment on FExperimentationCreateExclusionGroupResult");
static_assert(sizeof(FExperimentationCreateExclusionGroupResult) == 0x000018, "Wrong size on FExperimentationCreateExclusionGroupResult");
static_assert(offsetof(FExperimentationCreateExclusionGroupResult, ExclusionGroupId) == 0x000008, "Member 'FExperimentationCreateExclusionGroupResult::ExclusionGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ServerConsumeItemResult
// 0x0018 (0x0020 - 0x0008)
struct FServerConsumeItemResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ItemInstanceId;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingUses;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D7[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerConsumeItemResult) == 0x000008, "Wrong alignment on FServerConsumeItemResult");
static_assert(sizeof(FServerConsumeItemResult) == 0x000020, "Wrong size on FServerConsumeItemResult");
static_assert(offsetof(FServerConsumeItemResult, ItemInstanceId) == 0x000008, "Member 'FServerConsumeItemResult::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerConsumeItemResult, RemainingUses) == 0x000018, "Member 'FServerConsumeItemResult::RemainingUses' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetTitleDataResult
// 0x0000 (0x0008 - 0x0008)
struct FServerSetTitleDataResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerSetTitleDataResult) == 0x000008, "Wrong alignment on FServerSetTitleDataResult");
static_assert(sizeof(FServerSetTitleDataResult) == 0x000008, "Wrong size on FServerSetTitleDataResult");

// ScriptStruct PlayFab.ExperimentationCreateExclusionGroupRequest
// 0x0028 (0x0030 - 0x0008)
struct FExperimentationCreateExclusionGroupRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationCreateExclusionGroupRequest) == 0x000008, "Wrong alignment on FExperimentationCreateExclusionGroupRequest");
static_assert(sizeof(FExperimentationCreateExclusionGroupRequest) == 0x000030, "Wrong size on FExperimentationCreateExclusionGroupRequest");
static_assert(offsetof(FExperimentationCreateExclusionGroupRequest, CustomTags) == 0x000008, "Member 'FExperimentationCreateExclusionGroupRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExclusionGroupRequest, Description) == 0x000010, "Member 'FExperimentationCreateExclusionGroupRequest::Description' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExclusionGroupRequest, Name) == 0x000020, "Member 'FExperimentationCreateExclusionGroupRequest::Name' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationCreateExperimentRequest
// 0x0090 (0x0098 - 0x0008)
struct FExperimentationCreateExperimentRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndDate;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExclusionGroupId;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExclusionGroupTrafficAllocation;                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExperimentType                               ExperimentType;                                    // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D8[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SegmentId;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartDate;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitlePlayerAccountTestIds;                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Variants;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationCreateExperimentRequest) == 0x000008, "Wrong alignment on FExperimentationCreateExperimentRequest");
static_assert(sizeof(FExperimentationCreateExperimentRequest) == 0x000098, "Wrong size on FExperimentationCreateExperimentRequest");
static_assert(offsetof(FExperimentationCreateExperimentRequest, CustomTags) == 0x000008, "Member 'FExperimentationCreateExperimentRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, Description) == 0x000010, "Member 'FExperimentationCreateExperimentRequest::Description' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, EndDate) == 0x000020, "Member 'FExperimentationCreateExperimentRequest::EndDate' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, ExclusionGroupId) == 0x000030, "Member 'FExperimentationCreateExperimentRequest::ExclusionGroupId' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, ExclusionGroupTrafficAllocation) == 0x000040, "Member 'FExperimentationCreateExperimentRequest::ExclusionGroupTrafficAllocation' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, ExperimentType) == 0x000044, "Member 'FExperimentationCreateExperimentRequest::ExperimentType' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, Name) == 0x000048, "Member 'FExperimentationCreateExperimentRequest::Name' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, SegmentId) == 0x000058, "Member 'FExperimentationCreateExperimentRequest::SegmentId' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, StartDate) == 0x000068, "Member 'FExperimentationCreateExperimentRequest::StartDate' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, TitlePlayerAccountTestIds) == 0x000078, "Member 'FExperimentationCreateExperimentRequest::TitlePlayerAccountTestIds' has a wrong offset!");
static_assert(offsetof(FExperimentationCreateExperimentRequest, Variants) == 0x000088, "Member 'FExperimentationCreateExperimentRequest::Variants' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayersSegmentsRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerGetPlayersSegmentsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayersSegmentsRequest) == 0x000008, "Wrong alignment on FServerGetPlayersSegmentsRequest");
static_assert(sizeof(FServerGetPlayersSegmentsRequest) == 0x000020, "Wrong size on FServerGetPlayersSegmentsRequest");
static_assert(offsetof(FServerGetPlayersSegmentsRequest, CustomTags) == 0x000008, "Member 'FServerGetPlayersSegmentsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetPlayersSegmentsRequest, PlayFabId) == 0x000010, "Member 'FServerGetPlayersSegmentsRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetExperimentsResult
// 0x0010 (0x0018 - 0x0008)
struct FExperimentationGetExperimentsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Experiments;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetExperimentsResult) == 0x000008, "Wrong alignment on FExperimentationGetExperimentsResult");
static_assert(sizeof(FExperimentationGetExperimentsResult) == 0x000018, "Wrong size on FExperimentationGetExperimentsResult");
static_assert(offsetof(FExperimentationGetExperimentsResult, Experiments) == 0x000008, "Member 'FExperimentationGetExperimentsResult::Experiments' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetLatestScorecardResult
// 0x0008 (0x0010 - 0x0008)
struct FExperimentationGetLatestScorecardResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Scorecard;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetLatestScorecardResult) == 0x000008, "Wrong alignment on FExperimentationGetLatestScorecardResult");
static_assert(sizeof(FExperimentationGetLatestScorecardResult) == 0x000010, "Wrong size on FExperimentationGetLatestScorecardResult");
static_assert(offsetof(FExperimentationGetLatestScorecardResult, Scorecard) == 0x000008, "Member 'FExperimentationGetLatestScorecardResult::Scorecard' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetTreatmentAssignmentResult
// 0x0008 (0x0010 - 0x0008)
struct FExperimentationGetTreatmentAssignmentResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     TreatmentAssignment;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetTreatmentAssignmentResult) == 0x000008, "Wrong alignment on FExperimentationGetTreatmentAssignmentResult");
static_assert(sizeof(FExperimentationGetTreatmentAssignmentResult) == 0x000010, "Wrong size on FExperimentationGetTreatmentAssignmentResult");
static_assert(offsetof(FExperimentationGetTreatmentAssignmentResult, TreatmentAssignment) == 0x000008, "Member 'FExperimentationGetTreatmentAssignmentResult::TreatmentAssignment' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationDeleteExclusionGroupRequest
// 0x0018 (0x0020 - 0x0008)
struct FExperimentationDeleteExclusionGroupRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExclusionGroupId;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationDeleteExclusionGroupRequest) == 0x000008, "Wrong alignment on FExperimentationDeleteExclusionGroupRequest");
static_assert(sizeof(FExperimentationDeleteExclusionGroupRequest) == 0x000020, "Wrong size on FExperimentationDeleteExclusionGroupRequest");
static_assert(offsetof(FExperimentationDeleteExclusionGroupRequest, CustomTags) == 0x000008, "Member 'FExperimentationDeleteExclusionGroupRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationDeleteExclusionGroupRequest, ExclusionGroupId) == 0x000010, "Member 'FExperimentationDeleteExclusionGroupRequest::ExclusionGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationDeleteExperimentRequest
// 0x0018 (0x0020 - 0x0008)
struct FExperimentationDeleteExperimentRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExperimentId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationDeleteExperimentRequest) == 0x000008, "Wrong alignment on FExperimentationDeleteExperimentRequest");
static_assert(sizeof(FExperimentationDeleteExperimentRequest) == 0x000020, "Wrong size on FExperimentationDeleteExperimentRequest");
static_assert(offsetof(FExperimentationDeleteExperimentRequest, CustomTags) == 0x000008, "Member 'FExperimentationDeleteExperimentRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationDeleteExperimentRequest, ExperimentId) == 0x000010, "Member 'FExperimentationDeleteExperimentRequest::ExperimentId' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetExclusionGroupsRequest
// 0x0008 (0x0010 - 0x0008)
struct FExperimentationGetExclusionGroupsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetExclusionGroupsRequest) == 0x000008, "Wrong alignment on FExperimentationGetExclusionGroupsRequest");
static_assert(sizeof(FExperimentationGetExclusionGroupsRequest) == 0x000010, "Wrong size on FExperimentationGetExclusionGroupsRequest");
static_assert(offsetof(FExperimentationGetExclusionGroupsRequest, CustomTags) == 0x000008, "Member 'FExperimentationGetExclusionGroupsRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ServerDeregisterGameRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerDeregisterGameRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerDeregisterGameRequest) == 0x000008, "Wrong alignment on FServerDeregisterGameRequest");
static_assert(sizeof(FServerDeregisterGameRequest) == 0x000020, "Wrong size on FServerDeregisterGameRequest");
static_assert(offsetof(FServerDeregisterGameRequest, CustomTags) == 0x000008, "Member 'FServerDeregisterGameRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerDeregisterGameRequest, LobbyId) == 0x000010, "Member 'FServerDeregisterGameRequest::LobbyId' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetExperimentsRequest
// 0x0008 (0x0010 - 0x0008)
struct FExperimentationGetExperimentsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetExperimentsRequest) == 0x000008, "Wrong alignment on FExperimentationGetExperimentsRequest");
static_assert(sizeof(FExperimentationGetExperimentsRequest) == 0x000010, "Wrong size on FExperimentationGetExperimentsRequest");
static_assert(offsetof(FExperimentationGetExperimentsRequest, CustomTags) == 0x000008, "Member 'FExperimentationGetExperimentsRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ExperimentationGetTreatmentAssignmentRequest
// 0x0010 (0x0018 - 0x0008)
struct FExperimentationGetTreatmentAssignmentRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationGetTreatmentAssignmentRequest) == 0x000008, "Wrong alignment on FExperimentationGetTreatmentAssignmentRequest");
static_assert(sizeof(FExperimentationGetTreatmentAssignmentRequest) == 0x000018, "Wrong size on FExperimentationGetTreatmentAssignmentRequest");
static_assert(offsetof(FExperimentationGetTreatmentAssignmentRequest, CustomTags) == 0x000008, "Member 'FExperimentationGetTreatmentAssignmentRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationGetTreatmentAssignmentRequest, Entity) == 0x000010, "Member 'FExperimentationGetTreatmentAssignmentRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetPlayerSecretResult
// 0x0000 (0x0008 - 0x0008)
struct FServerSetPlayerSecretResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerSetPlayerSecretResult) == 0x000008, "Wrong alignment on FServerSetPlayerSecretResult");
static_assert(sizeof(FServerSetPlayerSecretResult) == 0x000008, "Wrong size on FServerSetPlayerSecretResult");

// ScriptStruct PlayFab.ExperimentationStopExperimentRequest
// 0x0018 (0x0020 - 0x0008)
struct FExperimentationStopExperimentRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExperimentId;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperimentationStopExperimentRequest) == 0x000008, "Wrong alignment on FExperimentationStopExperimentRequest");
static_assert(sizeof(FExperimentationStopExperimentRequest) == 0x000020, "Wrong size on FExperimentationStopExperimentRequest");
static_assert(offsetof(FExperimentationStopExperimentRequest, CustomTags) == 0x000008, "Member 'FExperimentationStopExperimentRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FExperimentationStopExperimentRequest, ExperimentId) == 0x000010, "Member 'FExperimentationStopExperimentRequest::ExperimentId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsEmptyResponse
// 0x0000 (0x0008 - 0x0008)
struct FGroupsEmptyResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FGroupsEmptyResponse) == 0x000008, "Wrong alignment on FGroupsEmptyResponse");
static_assert(sizeof(FGroupsEmptyResponse) == 0x000008, "Wrong size on FGroupsEmptyResponse");

// ScriptStruct PlayFab.GroupsAcceptGroupApplicationRequest
// 0x0018 (0x0020 - 0x0008)
struct FGroupsAcceptGroupApplicationRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsAcceptGroupApplicationRequest) == 0x000008, "Wrong alignment on FGroupsAcceptGroupApplicationRequest");
static_assert(sizeof(FGroupsAcceptGroupApplicationRequest) == 0x000020, "Wrong size on FGroupsAcceptGroupApplicationRequest");
static_assert(offsetof(FGroupsAcceptGroupApplicationRequest, CustomTags) == 0x000008, "Member 'FGroupsAcceptGroupApplicationRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsAcceptGroupApplicationRequest, Entity) == 0x000010, "Member 'FGroupsAcceptGroupApplicationRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsAcceptGroupApplicationRequest, Group) == 0x000018, "Member 'FGroupsAcceptGroupApplicationRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsAcceptGroupInvitationRequest
// 0x0018 (0x0020 - 0x0008)
struct FGroupsAcceptGroupInvitationRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsAcceptGroupInvitationRequest) == 0x000008, "Wrong alignment on FGroupsAcceptGroupInvitationRequest");
static_assert(sizeof(FGroupsAcceptGroupInvitationRequest) == 0x000020, "Wrong size on FGroupsAcceptGroupInvitationRequest");
static_assert(offsetof(FGroupsAcceptGroupInvitationRequest, CustomTags) == 0x000008, "Member 'FGroupsAcceptGroupInvitationRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsAcceptGroupInvitationRequest, Entity) == 0x000010, "Member 'FGroupsAcceptGroupInvitationRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsAcceptGroupInvitationRequest, Group) == 0x000018, "Member 'FGroupsAcceptGroupInvitationRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsAddMembersRequest
// 0x0030 (0x0038 - 0x0008)
struct FGroupsAddMembersRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsAddMembersRequest) == 0x000008, "Wrong alignment on FGroupsAddMembersRequest");
static_assert(sizeof(FGroupsAddMembersRequest) == 0x000038, "Wrong size on FGroupsAddMembersRequest");
static_assert(offsetof(FGroupsAddMembersRequest, CustomTags) == 0x000008, "Member 'FGroupsAddMembersRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsAddMembersRequest, Group) == 0x000010, "Member 'FGroupsAddMembersRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsAddMembersRequest, Members) == 0x000018, "Member 'FGroupsAddMembersRequest::Members' has a wrong offset!");
static_assert(offsetof(FGroupsAddMembersRequest, RoleId) == 0x000028, "Member 'FGroupsAddMembersRequest::RoleId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetSharedGroupDataResult
// 0x0018 (0x0020 - 0x0008)
struct FServerGetSharedGroupDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Members;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetSharedGroupDataResult) == 0x000008, "Wrong alignment on FServerGetSharedGroupDataResult");
static_assert(sizeof(FServerGetSharedGroupDataResult) == 0x000020, "Wrong size on FServerGetSharedGroupDataResult");
static_assert(offsetof(FServerGetSharedGroupDataResult, Data) == 0x000008, "Member 'FServerGetSharedGroupDataResult::Data' has a wrong offset!");
static_assert(offsetof(FServerGetSharedGroupDataResult, Members) == 0x000010, "Member 'FServerGetSharedGroupDataResult::Members' has a wrong offset!");

// ScriptStruct PlayFab.GroupsApplyToGroupResponse
// 0x0020 (0x0028 - 0x0008)
struct FGroupsApplyToGroupResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Entity;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Expires;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsApplyToGroupResponse) == 0x000008, "Wrong alignment on FGroupsApplyToGroupResponse");
static_assert(sizeof(FGroupsApplyToGroupResponse) == 0x000028, "Wrong size on FGroupsApplyToGroupResponse");
static_assert(offsetof(FGroupsApplyToGroupResponse, Entity) == 0x000008, "Member 'FGroupsApplyToGroupResponse::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsApplyToGroupResponse, Expires) == 0x000010, "Member 'FGroupsApplyToGroupResponse::Expires' has a wrong offset!");
static_assert(offsetof(FGroupsApplyToGroupResponse, Group) == 0x000020, "Member 'FGroupsApplyToGroupResponse::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsApplyToGroupRequest
// 0x0020 (0x0028 - 0x0008)
struct FGroupsApplyToGroupRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          AutoAcceptOutstandingInvite;                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsApplyToGroupRequest) == 0x000008, "Wrong alignment on FGroupsApplyToGroupRequest");
static_assert(sizeof(FGroupsApplyToGroupRequest) == 0x000028, "Wrong size on FGroupsApplyToGroupRequest");
static_assert(offsetof(FGroupsApplyToGroupRequest, AutoAcceptOutstandingInvite) == 0x000008, "Member 'FGroupsApplyToGroupRequest::AutoAcceptOutstandingInvite' has a wrong offset!");
static_assert(offsetof(FGroupsApplyToGroupRequest, CustomTags) == 0x000010, "Member 'FGroupsApplyToGroupRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsApplyToGroupRequest, Entity) == 0x000018, "Member 'FGroupsApplyToGroupRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsApplyToGroupRequest, Group) == 0x000020, "Member 'FGroupsApplyToGroupRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsBlockEntityRequest
// 0x0018 (0x0020 - 0x0008)
struct FGroupsBlockEntityRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsBlockEntityRequest) == 0x000008, "Wrong alignment on FGroupsBlockEntityRequest");
static_assert(sizeof(FGroupsBlockEntityRequest) == 0x000020, "Wrong size on FGroupsBlockEntityRequest");
static_assert(offsetof(FGroupsBlockEntityRequest, CustomTags) == 0x000008, "Member 'FGroupsBlockEntityRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsBlockEntityRequest, Entity) == 0x000010, "Member 'FGroupsBlockEntityRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsBlockEntityRequest, Group) == 0x000018, "Member 'FGroupsBlockEntityRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromGenericIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromGenericIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromGenericIDsResult) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromGenericIDsResult");
static_assert(sizeof(FServerGetPlayFabIDsFromGenericIDsResult) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromGenericIDsResult");
static_assert(offsetof(FServerGetPlayFabIDsFromGenericIDsResult, Data) == 0x000008, "Member 'FServerGetPlayFabIDsFromGenericIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.GroupsChangeMemberRoleRequest
// 0x0040 (0x0048 - 0x0008)
struct FGroupsChangeMemberRoleRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestinationRoleId;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OriginRoleId;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsChangeMemberRoleRequest) == 0x000008, "Wrong alignment on FGroupsChangeMemberRoleRequest");
static_assert(sizeof(FGroupsChangeMemberRoleRequest) == 0x000048, "Wrong size on FGroupsChangeMemberRoleRequest");
static_assert(offsetof(FGroupsChangeMemberRoleRequest, CustomTags) == 0x000008, "Member 'FGroupsChangeMemberRoleRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsChangeMemberRoleRequest, DestinationRoleId) == 0x000010, "Member 'FGroupsChangeMemberRoleRequest::DestinationRoleId' has a wrong offset!");
static_assert(offsetof(FGroupsChangeMemberRoleRequest, Group) == 0x000020, "Member 'FGroupsChangeMemberRoleRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsChangeMemberRoleRequest, Members) == 0x000028, "Member 'FGroupsChangeMemberRoleRequest::Members' has a wrong offset!");
static_assert(offsetof(FGroupsChangeMemberRoleRequest, OriginRoleId) == 0x000038, "Member 'FGroupsChangeMemberRoleRequest::OriginRoleId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsCreateGroupResponse
// 0x0058 (0x0060 - 0x0008)
struct FGroupsCreateGroupResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 AdminRoleId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Created;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberRoleId;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DA[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Roles;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsCreateGroupResponse) == 0x000008, "Wrong alignment on FGroupsCreateGroupResponse");
static_assert(sizeof(FGroupsCreateGroupResponse) == 0x000060, "Wrong size on FGroupsCreateGroupResponse");
static_assert(offsetof(FGroupsCreateGroupResponse, AdminRoleId) == 0x000008, "Member 'FGroupsCreateGroupResponse::AdminRoleId' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupResponse, Created) == 0x000018, "Member 'FGroupsCreateGroupResponse::Created' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupResponse, Group) == 0x000028, "Member 'FGroupsCreateGroupResponse::Group' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupResponse, GroupName) == 0x000030, "Member 'FGroupsCreateGroupResponse::GroupName' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupResponse, MemberRoleId) == 0x000040, "Member 'FGroupsCreateGroupResponse::MemberRoleId' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupResponse, ProfileVersion) == 0x000050, "Member 'FGroupsCreateGroupResponse::ProfileVersion' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupResponse, Roles) == 0x000058, "Member 'FGroupsCreateGroupResponse::Roles' has a wrong offset!");

// ScriptStruct PlayFab.GroupsCreateGroupRequest
// 0x0020 (0x0028 - 0x0008)
struct FGroupsCreateGroupRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsCreateGroupRequest) == 0x000008, "Wrong alignment on FGroupsCreateGroupRequest");
static_assert(sizeof(FGroupsCreateGroupRequest) == 0x000028, "Wrong size on FGroupsCreateGroupRequest");
static_assert(offsetof(FGroupsCreateGroupRequest, CustomTags) == 0x000008, "Member 'FGroupsCreateGroupRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupRequest, Entity) == 0x000010, "Member 'FGroupsCreateGroupRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupRequest, GroupName) == 0x000018, "Member 'FGroupsCreateGroupRequest::GroupName' has a wrong offset!");

// ScriptStruct PlayFab.GroupsCreateGroupRoleRequest
// 0x0030 (0x0038 - 0x0008)
struct FGroupsCreateGroupRoleRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleName;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsCreateGroupRoleRequest) == 0x000008, "Wrong alignment on FGroupsCreateGroupRoleRequest");
static_assert(sizeof(FGroupsCreateGroupRoleRequest) == 0x000038, "Wrong size on FGroupsCreateGroupRoleRequest");
static_assert(offsetof(FGroupsCreateGroupRoleRequest, CustomTags) == 0x000008, "Member 'FGroupsCreateGroupRoleRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupRoleRequest, Group) == 0x000010, "Member 'FGroupsCreateGroupRoleRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupRoleRequest, RoleId) == 0x000018, "Member 'FGroupsCreateGroupRoleRequest::RoleId' has a wrong offset!");
static_assert(offsetof(FGroupsCreateGroupRoleRequest, RoleName) == 0x000028, "Member 'FGroupsCreateGroupRoleRequest::RoleName' has a wrong offset!");

// ScriptStruct PlayFab.GroupsGetGroupResponse
// 0x0058 (0x0060 - 0x0008)
struct FGroupsGetGroupResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 AdminRoleId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Created;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberRoleId;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DB[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Roles;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsGetGroupResponse) == 0x000008, "Wrong alignment on FGroupsGetGroupResponse");
static_assert(sizeof(FGroupsGetGroupResponse) == 0x000060, "Wrong size on FGroupsGetGroupResponse");
static_assert(offsetof(FGroupsGetGroupResponse, AdminRoleId) == 0x000008, "Member 'FGroupsGetGroupResponse::AdminRoleId' has a wrong offset!");
static_assert(offsetof(FGroupsGetGroupResponse, Created) == 0x000018, "Member 'FGroupsGetGroupResponse::Created' has a wrong offset!");
static_assert(offsetof(FGroupsGetGroupResponse, Group) == 0x000028, "Member 'FGroupsGetGroupResponse::Group' has a wrong offset!");
static_assert(offsetof(FGroupsGetGroupResponse, GroupName) == 0x000030, "Member 'FGroupsGetGroupResponse::GroupName' has a wrong offset!");
static_assert(offsetof(FGroupsGetGroupResponse, MemberRoleId) == 0x000040, "Member 'FGroupsGetGroupResponse::MemberRoleId' has a wrong offset!");
static_assert(offsetof(FGroupsGetGroupResponse, ProfileVersion) == 0x000050, "Member 'FGroupsGetGroupResponse::ProfileVersion' has a wrong offset!");
static_assert(offsetof(FGroupsGetGroupResponse, Roles) == 0x000058, "Member 'FGroupsGetGroupResponse::Roles' has a wrong offset!");

// ScriptStruct PlayFab.GroupsInviteToGroupResponse
// 0x0038 (0x0040 - 0x0008)
struct FGroupsInviteToGroupResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 Expires;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InvitedByEntity;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InvitedEntity;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsInviteToGroupResponse) == 0x000008, "Wrong alignment on FGroupsInviteToGroupResponse");
static_assert(sizeof(FGroupsInviteToGroupResponse) == 0x000040, "Wrong size on FGroupsInviteToGroupResponse");
static_assert(offsetof(FGroupsInviteToGroupResponse, Expires) == 0x000008, "Member 'FGroupsInviteToGroupResponse::Expires' has a wrong offset!");
static_assert(offsetof(FGroupsInviteToGroupResponse, Group) == 0x000018, "Member 'FGroupsInviteToGroupResponse::Group' has a wrong offset!");
static_assert(offsetof(FGroupsInviteToGroupResponse, InvitedByEntity) == 0x000020, "Member 'FGroupsInviteToGroupResponse::InvitedByEntity' has a wrong offset!");
static_assert(offsetof(FGroupsInviteToGroupResponse, InvitedEntity) == 0x000028, "Member 'FGroupsInviteToGroupResponse::InvitedEntity' has a wrong offset!");
static_assert(offsetof(FGroupsInviteToGroupResponse, RoleId) == 0x000030, "Member 'FGroupsInviteToGroupResponse::RoleId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsIsMemberResponse
// 0x0008 (0x0010 - 0x0008)
struct FGroupsIsMemberResponse final : public FPlayFabResultCommon
{
public:
	bool                                          IsMember;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroupsIsMemberResponse) == 0x000008, "Wrong alignment on FGroupsIsMemberResponse");
static_assert(sizeof(FGroupsIsMemberResponse) == 0x000010, "Wrong size on FGroupsIsMemberResponse");
static_assert(offsetof(FGroupsIsMemberResponse, IsMember) == 0x000008, "Member 'FGroupsIsMemberResponse::IsMember' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListGroupApplicationsResponse
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListGroupApplicationsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Applications;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListGroupApplicationsResponse) == 0x000008, "Wrong alignment on FGroupsListGroupApplicationsResponse");
static_assert(sizeof(FGroupsListGroupApplicationsResponse) == 0x000018, "Wrong size on FGroupsListGroupApplicationsResponse");
static_assert(offsetof(FGroupsListGroupApplicationsResponse, Applications) == 0x000008, "Member 'FGroupsListGroupApplicationsResponse::Applications' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListGroupInvitationsResponse
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListGroupInvitationsResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Invitations;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListGroupInvitationsResponse) == 0x000008, "Wrong alignment on FGroupsListGroupInvitationsResponse");
static_assert(sizeof(FGroupsListGroupInvitationsResponse) == 0x000018, "Wrong size on FGroupsListGroupInvitationsResponse");
static_assert(offsetof(FGroupsListGroupInvitationsResponse, Invitations) == 0x000008, "Member 'FGroupsListGroupInvitationsResponse::Invitations' has a wrong offset!");

// ScriptStruct PlayFab.ServerListUsersCharactersRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerListUsersCharactersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerListUsersCharactersRequest) == 0x000008, "Wrong alignment on FServerListUsersCharactersRequest");
static_assert(sizeof(FServerListUsersCharactersRequest) == 0x000018, "Wrong size on FServerListUsersCharactersRequest");
static_assert(offsetof(FServerListUsersCharactersRequest, PlayFabId) == 0x000008, "Member 'FServerListUsersCharactersRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListGroupMembersResponse
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListGroupMembersResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListGroupMembersResponse) == 0x000008, "Wrong alignment on FGroupsListGroupMembersResponse");
static_assert(sizeof(FGroupsListGroupMembersResponse) == 0x000018, "Wrong size on FGroupsListGroupMembersResponse");
static_assert(offsetof(FGroupsListGroupMembersResponse, Members) == 0x000008, "Member 'FGroupsListGroupMembersResponse::Members' has a wrong offset!");

// ScriptStruct PlayFab.GroupsUpdateGroupRoleResponse
// 0x0018 (0x0020 - 0x0008)
struct FGroupsUpdateGroupRoleResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 OperationReason;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProfileVersion;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOperationTypes                               SetResult;                                         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DD[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGroupsUpdateGroupRoleResponse) == 0x000008, "Wrong alignment on FGroupsUpdateGroupRoleResponse");
static_assert(sizeof(FGroupsUpdateGroupRoleResponse) == 0x000020, "Wrong size on FGroupsUpdateGroupRoleResponse");
static_assert(offsetof(FGroupsUpdateGroupRoleResponse, OperationReason) == 0x000008, "Member 'FGroupsUpdateGroupRoleResponse::OperationReason' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRoleResponse, ProfileVersion) == 0x000018, "Member 'FGroupsUpdateGroupRoleResponse::ProfileVersion' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRoleResponse, SetResult) == 0x00001C, "Member 'FGroupsUpdateGroupRoleResponse::SetResult' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetLeaderboardAroundCharacterResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetLeaderboardAroundCharacterResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetLeaderboardAroundCharacterResult) == 0x000008, "Wrong alignment on FServerGetLeaderboardAroundCharacterResult");
static_assert(sizeof(FServerGetLeaderboardAroundCharacterResult) == 0x000018, "Wrong size on FServerGetLeaderboardAroundCharacterResult");
static_assert(offsetof(FServerGetLeaderboardAroundCharacterResult, Leaderboard) == 0x000008, "Member 'FServerGetLeaderboardAroundCharacterResult::Leaderboard' has a wrong offset!");

// ScriptStruct PlayFab.GroupsDeleteGroupRequest
// 0x0010 (0x0018 - 0x0008)
struct FGroupsDeleteGroupRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsDeleteGroupRequest) == 0x000008, "Wrong alignment on FGroupsDeleteGroupRequest");
static_assert(sizeof(FGroupsDeleteGroupRequest) == 0x000018, "Wrong size on FGroupsDeleteGroupRequest");
static_assert(offsetof(FGroupsDeleteGroupRequest, CustomTags) == 0x000008, "Member 'FGroupsDeleteGroupRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsDeleteGroupRequest, Group) == 0x000010, "Member 'FGroupsDeleteGroupRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsDeleteRoleRequest
// 0x0020 (0x0028 - 0x0008)
struct FGroupsDeleteRoleRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsDeleteRoleRequest) == 0x000008, "Wrong alignment on FGroupsDeleteRoleRequest");
static_assert(sizeof(FGroupsDeleteRoleRequest) == 0x000028, "Wrong size on FGroupsDeleteRoleRequest");
static_assert(offsetof(FGroupsDeleteRoleRequest, CustomTags) == 0x000008, "Member 'FGroupsDeleteRoleRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsDeleteRoleRequest, Group) == 0x000010, "Member 'FGroupsDeleteRoleRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsDeleteRoleRequest, RoleId) == 0x000018, "Member 'FGroupsDeleteRoleRequest::RoleId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsGetGroupRequest
// 0x0020 (0x0028 - 0x0008)
struct FGroupsGetGroupRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsGetGroupRequest) == 0x000008, "Wrong alignment on FGroupsGetGroupRequest");
static_assert(sizeof(FGroupsGetGroupRequest) == 0x000028, "Wrong size on FGroupsGetGroupRequest");
static_assert(offsetof(FGroupsGetGroupRequest, CustomTags) == 0x000008, "Member 'FGroupsGetGroupRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsGetGroupRequest, Group) == 0x000010, "Member 'FGroupsGetGroupRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsGetGroupRequest, GroupName) == 0x000018, "Member 'FGroupsGetGroupRequest::GroupName' has a wrong offset!");

// ScriptStruct PlayFab.GroupsInviteToGroupRequest
// 0x0030 (0x0038 - 0x0008)
struct FGroupsInviteToGroupRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          AutoAcceptOutstandingApplication;                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsInviteToGroupRequest) == 0x000008, "Wrong alignment on FGroupsInviteToGroupRequest");
static_assert(sizeof(FGroupsInviteToGroupRequest) == 0x000038, "Wrong size on FGroupsInviteToGroupRequest");
static_assert(offsetof(FGroupsInviteToGroupRequest, AutoAcceptOutstandingApplication) == 0x000008, "Member 'FGroupsInviteToGroupRequest::AutoAcceptOutstandingApplication' has a wrong offset!");
static_assert(offsetof(FGroupsInviteToGroupRequest, CustomTags) == 0x000010, "Member 'FGroupsInviteToGroupRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsInviteToGroupRequest, Entity) == 0x000018, "Member 'FGroupsInviteToGroupRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsInviteToGroupRequest, Group) == 0x000020, "Member 'FGroupsInviteToGroupRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsInviteToGroupRequest, RoleId) == 0x000028, "Member 'FGroupsInviteToGroupRequest::RoleId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsIsMemberRequest
// 0x0028 (0x0030 - 0x0008)
struct FGroupsIsMemberRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsIsMemberRequest) == 0x000008, "Wrong alignment on FGroupsIsMemberRequest");
static_assert(sizeof(FGroupsIsMemberRequest) == 0x000030, "Wrong size on FGroupsIsMemberRequest");
static_assert(offsetof(FGroupsIsMemberRequest, CustomTags) == 0x000008, "Member 'FGroupsIsMemberRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsIsMemberRequest, Entity) == 0x000010, "Member 'FGroupsIsMemberRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsIsMemberRequest, Group) == 0x000018, "Member 'FGroupsIsMemberRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsIsMemberRequest, RoleId) == 0x000020, "Member 'FGroupsIsMemberRequest::RoleId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListGroupApplicationsRequest
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListGroupApplicationsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListGroupApplicationsRequest) == 0x000008, "Wrong alignment on FGroupsListGroupApplicationsRequest");
static_assert(sizeof(FGroupsListGroupApplicationsRequest) == 0x000018, "Wrong size on FGroupsListGroupApplicationsRequest");
static_assert(offsetof(FGroupsListGroupApplicationsRequest, CustomTags) == 0x000008, "Member 'FGroupsListGroupApplicationsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsListGroupApplicationsRequest, Group) == 0x000010, "Member 'FGroupsListGroupApplicationsRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListGroupBlocksRequest
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListGroupBlocksRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListGroupBlocksRequest) == 0x000008, "Wrong alignment on FGroupsListGroupBlocksRequest");
static_assert(sizeof(FGroupsListGroupBlocksRequest) == 0x000018, "Wrong size on FGroupsListGroupBlocksRequest");
static_assert(offsetof(FGroupsListGroupBlocksRequest, CustomTags) == 0x000008, "Member 'FGroupsListGroupBlocksRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsListGroupBlocksRequest, Group) == 0x000010, "Member 'FGroupsListGroupBlocksRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListGroupMembersRequest
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListGroupMembersRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListGroupMembersRequest) == 0x000008, "Wrong alignment on FGroupsListGroupMembersRequest");
static_assert(sizeof(FGroupsListGroupMembersRequest) == 0x000018, "Wrong size on FGroupsListGroupMembersRequest");
static_assert(offsetof(FGroupsListGroupMembersRequest, CustomTags) == 0x000008, "Member 'FGroupsListGroupMembersRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsListGroupMembersRequest, Group) == 0x000010, "Member 'FGroupsListGroupMembersRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListMembershipRequest
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListMembershipRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListMembershipRequest) == 0x000008, "Wrong alignment on FGroupsListMembershipRequest");
static_assert(sizeof(FGroupsListMembershipRequest) == 0x000018, "Wrong size on FGroupsListMembershipRequest");
static_assert(offsetof(FGroupsListMembershipRequest, CustomTags) == 0x000008, "Member 'FGroupsListMembershipRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsListMembershipRequest, Entity) == 0x000010, "Member 'FGroupsListMembershipRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.GroupsListMembershipOpportunitiesRequest
// 0x0010 (0x0018 - 0x0008)
struct FGroupsListMembershipOpportunitiesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsListMembershipOpportunitiesRequest) == 0x000008, "Wrong alignment on FGroupsListMembershipOpportunitiesRequest");
static_assert(sizeof(FGroupsListMembershipOpportunitiesRequest) == 0x000018, "Wrong size on FGroupsListMembershipOpportunitiesRequest");
static_assert(offsetof(FGroupsListMembershipOpportunitiesRequest, CustomTags) == 0x000008, "Member 'FGroupsListMembershipOpportunitiesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsListMembershipOpportunitiesRequest, Entity) == 0x000010, "Member 'FGroupsListMembershipOpportunitiesRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.GroupsRemoveGroupInvitationRequest
// 0x0018 (0x0020 - 0x0008)
struct FGroupsRemoveGroupInvitationRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsRemoveGroupInvitationRequest) == 0x000008, "Wrong alignment on FGroupsRemoveGroupInvitationRequest");
static_assert(sizeof(FGroupsRemoveGroupInvitationRequest) == 0x000020, "Wrong size on FGroupsRemoveGroupInvitationRequest");
static_assert(offsetof(FGroupsRemoveGroupInvitationRequest, CustomTags) == 0x000008, "Member 'FGroupsRemoveGroupInvitationRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsRemoveGroupInvitationRequest, Entity) == 0x000010, "Member 'FGroupsRemoveGroupInvitationRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsRemoveGroupInvitationRequest, Group) == 0x000018, "Member 'FGroupsRemoveGroupInvitationRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsUnblockEntityRequest
// 0x0018 (0x0020 - 0x0008)
struct FGroupsUnblockEntityRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Group;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsUnblockEntityRequest) == 0x000008, "Wrong alignment on FGroupsUnblockEntityRequest");
static_assert(sizeof(FGroupsUnblockEntityRequest) == 0x000020, "Wrong size on FGroupsUnblockEntityRequest");
static_assert(offsetof(FGroupsUnblockEntityRequest, CustomTags) == 0x000008, "Member 'FGroupsUnblockEntityRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsUnblockEntityRequest, Entity) == 0x000010, "Member 'FGroupsUnblockEntityRequest::Entity' has a wrong offset!");
static_assert(offsetof(FGroupsUnblockEntityRequest, Group) == 0x000018, "Member 'FGroupsUnblockEntityRequest::Group' has a wrong offset!");

// ScriptStruct PlayFab.GroupsUpdateGroupRequest
// 0x0048 (0x0050 - 0x0008)
struct FGroupsUpdateGroupRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AdminRoleId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedProfileVersion;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DF[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Group;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberRoleId;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsUpdateGroupRequest) == 0x000008, "Wrong alignment on FGroupsUpdateGroupRequest");
static_assert(sizeof(FGroupsUpdateGroupRequest) == 0x000050, "Wrong size on FGroupsUpdateGroupRequest");
static_assert(offsetof(FGroupsUpdateGroupRequest, AdminRoleId) == 0x000008, "Member 'FGroupsUpdateGroupRequest::AdminRoleId' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRequest, CustomTags) == 0x000018, "Member 'FGroupsUpdateGroupRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRequest, ExpectedProfileVersion) == 0x000020, "Member 'FGroupsUpdateGroupRequest::ExpectedProfileVersion' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRequest, Group) == 0x000028, "Member 'FGroupsUpdateGroupRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRequest, GroupName) == 0x000030, "Member 'FGroupsUpdateGroupRequest::GroupName' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRequest, MemberRoleId) == 0x000040, "Member 'FGroupsUpdateGroupRequest::MemberRoleId' has a wrong offset!");

// ScriptStruct PlayFab.GroupsUpdateGroupRoleRequest
// 0x0038 (0x0040 - 0x0008)
struct FGroupsUpdateGroupRoleRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedProfileVersion;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E0[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Group;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleName;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroupsUpdateGroupRoleRequest) == 0x000008, "Wrong alignment on FGroupsUpdateGroupRoleRequest");
static_assert(sizeof(FGroupsUpdateGroupRoleRequest) == 0x000040, "Wrong size on FGroupsUpdateGroupRoleRequest");
static_assert(offsetof(FGroupsUpdateGroupRoleRequest, CustomTags) == 0x000008, "Member 'FGroupsUpdateGroupRoleRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRoleRequest, ExpectedProfileVersion) == 0x000010, "Member 'FGroupsUpdateGroupRoleRequest::ExpectedProfileVersion' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRoleRequest, Group) == 0x000018, "Member 'FGroupsUpdateGroupRoleRequest::Group' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRoleRequest, RoleId) == 0x000020, "Member 'FGroupsUpdateGroupRoleRequest::RoleId' has a wrong offset!");
static_assert(offsetof(FGroupsUpdateGroupRoleRequest, RoleName) == 0x000030, "Member 'FGroupsUpdateGroupRoleRequest::RoleName' has a wrong offset!");

// ScriptStruct PlayFab.InsightsInsightsGetLimitsResponse
// 0x0020 (0x0028 - 0x0008)
struct FInsightsInsightsGetLimitsResponse final : public FPlayFabResultCommon
{
public:
	int32                                         DefaultPerformanceLevel;                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultStorageRetentionDays;                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorageMaxRetentionDays;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorageMinRetentionDays;                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             SubMeters;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInsightsInsightsGetLimitsResponse) == 0x000008, "Wrong alignment on FInsightsInsightsGetLimitsResponse");
static_assert(sizeof(FInsightsInsightsGetLimitsResponse) == 0x000028, "Wrong size on FInsightsInsightsGetLimitsResponse");
static_assert(offsetof(FInsightsInsightsGetLimitsResponse, DefaultPerformanceLevel) == 0x000008, "Member 'FInsightsInsightsGetLimitsResponse::DefaultPerformanceLevel' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetLimitsResponse, DefaultStorageRetentionDays) == 0x00000C, "Member 'FInsightsInsightsGetLimitsResponse::DefaultStorageRetentionDays' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetLimitsResponse, StorageMaxRetentionDays) == 0x000010, "Member 'FInsightsInsightsGetLimitsResponse::StorageMaxRetentionDays' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetLimitsResponse, StorageMinRetentionDays) == 0x000014, "Member 'FInsightsInsightsGetLimitsResponse::StorageMinRetentionDays' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetLimitsResponse, SubMeters) == 0x000018, "Member 'FInsightsInsightsGetLimitsResponse::SubMeters' has a wrong offset!");

// ScriptStruct PlayFab.InsightsInsightsGetOperationStatusResponse
// 0x0078 (0x0080 - 0x0008)
struct FInsightsInsightsGetOperationStatusResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 Message;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationCompletedTime;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationId;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationLastUpdated;                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationStartedTime;                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationType;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OperationValue;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E1[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInsightsInsightsGetOperationStatusResponse) == 0x000008, "Wrong alignment on FInsightsInsightsGetOperationStatusResponse");
static_assert(sizeof(FInsightsInsightsGetOperationStatusResponse) == 0x000080, "Wrong size on FInsightsInsightsGetOperationStatusResponse");
static_assert(offsetof(FInsightsInsightsGetOperationStatusResponse, Message) == 0x000008, "Member 'FInsightsInsightsGetOperationStatusResponse::Message' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetOperationStatusResponse, OperationCompletedTime) == 0x000018, "Member 'FInsightsInsightsGetOperationStatusResponse::OperationCompletedTime' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetOperationStatusResponse, OperationId) == 0x000028, "Member 'FInsightsInsightsGetOperationStatusResponse::OperationId' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetOperationStatusResponse, OperationLastUpdated) == 0x000038, "Member 'FInsightsInsightsGetOperationStatusResponse::OperationLastUpdated' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetOperationStatusResponse, OperationStartedTime) == 0x000048, "Member 'FInsightsInsightsGetOperationStatusResponse::OperationStartedTime' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetOperationStatusResponse, OperationType) == 0x000058, "Member 'FInsightsInsightsGetOperationStatusResponse::OperationType' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetOperationStatusResponse, OperationValue) == 0x000068, "Member 'FInsightsInsightsGetOperationStatusResponse::OperationValue' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetOperationStatusResponse, Status) == 0x000070, "Member 'FInsightsInsightsGetOperationStatusResponse::Status' has a wrong offset!");

// ScriptStruct PlayFab.InsightsInsightsOperationResponse
// 0x0030 (0x0038 - 0x0008)
struct FInsightsInsightsOperationResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 Message;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationType;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInsightsInsightsOperationResponse) == 0x000008, "Wrong alignment on FInsightsInsightsOperationResponse");
static_assert(sizeof(FInsightsInsightsOperationResponse) == 0x000038, "Wrong size on FInsightsInsightsOperationResponse");
static_assert(offsetof(FInsightsInsightsOperationResponse, Message) == 0x000008, "Member 'FInsightsInsightsOperationResponse::Message' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsOperationResponse, OperationId) == 0x000018, "Member 'FInsightsInsightsOperationResponse::OperationId' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsOperationResponse, OperationType) == 0x000028, "Member 'FInsightsInsightsOperationResponse::OperationType' has a wrong offset!");

// ScriptStruct PlayFab.ServerNotifyMatchmakerPlayerLeftResult
// 0x0008 (0x0010 - 0x0008)
struct FServerNotifyMatchmakerPlayerLeftResult final : public FPlayFabResultCommon
{
public:
	EPlayerConnectionState                        PlayerState;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerNotifyMatchmakerPlayerLeftResult) == 0x000008, "Wrong alignment on FServerNotifyMatchmakerPlayerLeftResult");
static_assert(sizeof(FServerNotifyMatchmakerPlayerLeftResult) == 0x000010, "Wrong size on FServerNotifyMatchmakerPlayerLeftResult");
static_assert(offsetof(FServerNotifyMatchmakerPlayerLeftResult, PlayerState) == 0x000008, "Member 'FServerNotifyMatchmakerPlayerLeftResult::PlayerState' has a wrong offset!");

// ScriptStruct PlayFab.InsightsInsightsGetOperationStatusRequest
// 0x0018 (0x0020 - 0x0008)
struct FInsightsInsightsGetOperationStatusRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInsightsInsightsGetOperationStatusRequest) == 0x000008, "Wrong alignment on FInsightsInsightsGetOperationStatusRequest");
static_assert(sizeof(FInsightsInsightsGetOperationStatusRequest) == 0x000020, "Wrong size on FInsightsInsightsGetOperationStatusRequest");
static_assert(offsetof(FInsightsInsightsGetOperationStatusRequest, CustomTags) == 0x000008, "Member 'FInsightsInsightsGetOperationStatusRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetOperationStatusRequest, OperationId) == 0x000010, "Member 'FInsightsInsightsGetOperationStatusRequest::OperationId' has a wrong offset!");

// ScriptStruct PlayFab.InsightsInsightsGetPendingOperationsRequest
// 0x0018 (0x0020 - 0x0008)
struct FInsightsInsightsGetPendingOperationsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperationType;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInsightsInsightsGetPendingOperationsRequest) == 0x000008, "Wrong alignment on FInsightsInsightsGetPendingOperationsRequest");
static_assert(sizeof(FInsightsInsightsGetPendingOperationsRequest) == 0x000020, "Wrong size on FInsightsInsightsGetPendingOperationsRequest");
static_assert(offsetof(FInsightsInsightsGetPendingOperationsRequest, CustomTags) == 0x000008, "Member 'FInsightsInsightsGetPendingOperationsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsGetPendingOperationsRequest, OperationType) == 0x000010, "Member 'FInsightsInsightsGetPendingOperationsRequest::OperationType' has a wrong offset!");

// ScriptStruct PlayFab.InsightsInsightsSetPerformanceRequest
// 0x0010 (0x0018 - 0x0008)
struct FInsightsInsightsSetPerformanceRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerformanceLevel;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E3[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInsightsInsightsSetPerformanceRequest) == 0x000008, "Wrong alignment on FInsightsInsightsSetPerformanceRequest");
static_assert(sizeof(FInsightsInsightsSetPerformanceRequest) == 0x000018, "Wrong size on FInsightsInsightsSetPerformanceRequest");
static_assert(offsetof(FInsightsInsightsSetPerformanceRequest, CustomTags) == 0x000008, "Member 'FInsightsInsightsSetPerformanceRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FInsightsInsightsSetPerformanceRequest, PerformanceLevel) == 0x000010, "Member 'FInsightsInsightsSetPerformanceRequest::PerformanceLevel' has a wrong offset!");

// ScriptStruct PlayFab.ServerDeregisterGameResponse
// 0x0000 (0x0008 - 0x0008)
struct FServerDeregisterGameResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerDeregisterGameResponse) == 0x000008, "Wrong alignment on FServerDeregisterGameResponse");
static_assert(sizeof(FServerDeregisterGameResponse) == 0x000008, "Wrong size on FServerDeregisterGameResponse");

// ScriptStruct PlayFab.LocalizationGetLanguageListRequest
// 0x0008 (0x0010 - 0x0008)
struct FLocalizationGetLanguageListRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocalizationGetLanguageListRequest) == 0x000008, "Wrong alignment on FLocalizationGetLanguageListRequest");
static_assert(sizeof(FLocalizationGetLanguageListRequest) == 0x000010, "Wrong size on FLocalizationGetLanguageListRequest");
static_assert(offsetof(FLocalizationGetLanguageListRequest, CustomTags) == 0x000008, "Member 'FLocalizationGetLanguageListRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MatchmakerAuthUserResponse
// 0x0018 (0x0020 - 0x0008)
struct FMatchmakerAuthUserResponse final : public FPlayFabResultCommon
{
public:
	bool                                          Authorized;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E4[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakerAuthUserResponse) == 0x000008, "Wrong alignment on FMatchmakerAuthUserResponse");
static_assert(sizeof(FMatchmakerAuthUserResponse) == 0x000020, "Wrong size on FMatchmakerAuthUserResponse");
static_assert(offsetof(FMatchmakerAuthUserResponse, Authorized) == 0x000008, "Member 'FMatchmakerAuthUserResponse::Authorized' has a wrong offset!");
static_assert(offsetof(FMatchmakerAuthUserResponse, PlayFabId) == 0x000010, "Member 'FMatchmakerAuthUserResponse::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.MatchmakerAuthUserRequest
// 0x0010 (0x0018 - 0x0008)
struct FMatchmakerAuthUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AuthorizationTicket;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakerAuthUserRequest) == 0x000008, "Wrong alignment on FMatchmakerAuthUserRequest");
static_assert(sizeof(FMatchmakerAuthUserRequest) == 0x000018, "Wrong size on FMatchmakerAuthUserRequest");
static_assert(offsetof(FMatchmakerAuthUserRequest, AuthorizationTicket) == 0x000008, "Member 'FMatchmakerAuthUserRequest::AuthorizationTicket' has a wrong offset!");

// ScriptStruct PlayFab.MatchmakerPlayerLeftResponse
// 0x0000 (0x0008 - 0x0008)
struct FMatchmakerPlayerLeftResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FMatchmakerPlayerLeftResponse) == 0x000008, "Wrong alignment on FMatchmakerPlayerLeftResponse");
static_assert(sizeof(FMatchmakerPlayerLeftResponse) == 0x000008, "Wrong size on FMatchmakerPlayerLeftResponse");

// ScriptStruct PlayFab.MatchmakerUserInfoResponse
// 0x0068 (0x0070 - 0x0008)
struct FMatchmakerUserInfoResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Inventory;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsDeveloper;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E5[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleDisplayName;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrency;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrencyRechargeTimes;                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakerUserInfoResponse) == 0x000008, "Wrong alignment on FMatchmakerUserInfoResponse");
static_assert(sizeof(FMatchmakerUserInfoResponse) == 0x000070, "Wrong size on FMatchmakerUserInfoResponse");
static_assert(offsetof(FMatchmakerUserInfoResponse, Inventory) == 0x000008, "Member 'FMatchmakerUserInfoResponse::Inventory' has a wrong offset!");
static_assert(offsetof(FMatchmakerUserInfoResponse, IsDeveloper) == 0x000018, "Member 'FMatchmakerUserInfoResponse::IsDeveloper' has a wrong offset!");
static_assert(offsetof(FMatchmakerUserInfoResponse, PlayFabId) == 0x000020, "Member 'FMatchmakerUserInfoResponse::PlayFabId' has a wrong offset!");
static_assert(offsetof(FMatchmakerUserInfoResponse, SteamID) == 0x000030, "Member 'FMatchmakerUserInfoResponse::SteamID' has a wrong offset!");
static_assert(offsetof(FMatchmakerUserInfoResponse, TitleDisplayName) == 0x000040, "Member 'FMatchmakerUserInfoResponse::TitleDisplayName' has a wrong offset!");
static_assert(offsetof(FMatchmakerUserInfoResponse, Username) == 0x000050, "Member 'FMatchmakerUserInfoResponse::Username' has a wrong offset!");
static_assert(offsetof(FMatchmakerUserInfoResponse, VirtualCurrency) == 0x000060, "Member 'FMatchmakerUserInfoResponse::VirtualCurrency' has a wrong offset!");
static_assert(offsetof(FMatchmakerUserInfoResponse, VirtualCurrencyRechargeTimes) == 0x000068, "Member 'FMatchmakerUserInfoResponse::VirtualCurrencyRechargeTimes' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesGetGlobalPolicyResponse
// 0x0010 (0x0018 - 0x0008)
struct FProfilesGetGlobalPolicyResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Permissions;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetGlobalPolicyResponse) == 0x000008, "Wrong alignment on FProfilesGetGlobalPolicyResponse");
static_assert(sizeof(FProfilesGetGlobalPolicyResponse) == 0x000018, "Wrong size on FProfilesGetGlobalPolicyResponse");
static_assert(offsetof(FProfilesGetGlobalPolicyResponse, Permissions) == 0x000008, "Member 'FProfilesGetGlobalPolicyResponse::Permissions' has a wrong offset!");

// ScriptStruct PlayFab.MatchmakerUserInfoRequest
// 0x0020 (0x0028 - 0x0008)
struct FMatchmakerUserInfoRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCatalogVersion;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E6[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakerUserInfoRequest) == 0x000008, "Wrong alignment on FMatchmakerUserInfoRequest");
static_assert(sizeof(FMatchmakerUserInfoRequest) == 0x000028, "Wrong size on FMatchmakerUserInfoRequest");
static_assert(offsetof(FMatchmakerUserInfoRequest, CustomTags) == 0x000008, "Member 'FMatchmakerUserInfoRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMatchmakerUserInfoRequest, MinCatalogVersion) == 0x000010, "Member 'FMatchmakerUserInfoRequest::MinCatalogVersion' has a wrong offset!");
static_assert(offsetof(FMatchmakerUserInfoRequest, PlayFabId) == 0x000018, "Member 'FMatchmakerUserInfoRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCancelAllMatchmakingTicketsForPlayerResult
// 0x0000 (0x0008 - 0x0008)
struct FMultiplayerCancelAllMatchmakingTicketsForPlayerResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FMultiplayerCancelAllMatchmakingTicketsForPlayerResult) == 0x000008, "Wrong alignment on FMultiplayerCancelAllMatchmakingTicketsForPlayerResult");
static_assert(sizeof(FMultiplayerCancelAllMatchmakingTicketsForPlayerResult) == 0x000008, "Wrong size on FMultiplayerCancelAllMatchmakingTicketsForPlayerResult");

// ScriptStruct PlayFab.MultiplayerCancelServerBackfillTicketRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerCancelServerBackfillTicketRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCancelServerBackfillTicketRequest) == 0x000008, "Wrong alignment on FMultiplayerCancelServerBackfillTicketRequest");
static_assert(sizeof(FMultiplayerCancelServerBackfillTicketRequest) == 0x000030, "Wrong size on FMultiplayerCancelServerBackfillTicketRequest");
static_assert(offsetof(FMultiplayerCancelServerBackfillTicketRequest, CustomTags) == 0x000008, "Member 'FMultiplayerCancelServerBackfillTicketRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCancelServerBackfillTicketRequest, QueueName) == 0x000010, "Member 'FMultiplayerCancelServerBackfillTicketRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCancelServerBackfillTicketRequest, TicketId) == 0x000020, "Member 'FMultiplayerCancelServerBackfillTicketRequest::TicketId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetAllSegmentsRequest
// 0x0000 (0x0008 - 0x0008)
struct FServerGetAllSegmentsRequest final : public FPlayFabRequestCommon
{
};
static_assert(alignof(FServerGetAllSegmentsRequest) == 0x000008, "Wrong alignment on FServerGetAllSegmentsRequest");
static_assert(sizeof(FServerGetAllSegmentsRequest) == 0x000008, "Wrong size on FServerGetAllSegmentsRequest");

// ScriptStruct PlayFab.ServerRevokeInventoryItemsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerRevokeInventoryItemsRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Items;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRevokeInventoryItemsRequest) == 0x000008, "Wrong alignment on FServerRevokeInventoryItemsRequest");
static_assert(sizeof(FServerRevokeInventoryItemsRequest) == 0x000018, "Wrong size on FServerRevokeInventoryItemsRequest");
static_assert(offsetof(FServerRevokeInventoryItemsRequest, Items) == 0x000008, "Member 'FServerRevokeInventoryItemsRequest::Items' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateBuildWithManagedContainerRequest
// 0x00C8 (0x00D0 - 0x0008)
struct FMultiplayerCreateBuildWithManagedContainerRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          AreAssetsReadonly;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E7[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContainerFlavor                              ContainerFlavor;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E8[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameAssetReferences;                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameCertificateReferences;                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 GameWorkingDirectory;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InstrumentationConfiguration;                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MetaData;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MonitoringApplicationConfiguration;                // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiplayerServerCountPerVm;                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E9[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Ports;                                             // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             RegionConfigurations;                              // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ServerResourceConstraints;                         // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartMultiplayerServerCommand;                     // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStreamingForAssetDownloads;                     // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzureVmSize                                  VmSize;                                            // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EA[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     VmStartupScriptConfiguration;                      // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     WindowsCrashDumpConfiguration;                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateBuildWithManagedContainerRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateBuildWithManagedContainerRequest");
static_assert(sizeof(FMultiplayerCreateBuildWithManagedContainerRequest) == 0x0000D0, "Wrong size on FMultiplayerCreateBuildWithManagedContainerRequest");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, AreAssetsReadonly) == 0x000008, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::AreAssetsReadonly' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, BuildName) == 0x000010, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::BuildName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, ContainerFlavor) == 0x000020, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::ContainerFlavor' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, CustomTags) == 0x000028, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, GameAssetReferences) == 0x000030, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::GameAssetReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, GameCertificateReferences) == 0x000040, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::GameCertificateReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, GameWorkingDirectory) == 0x000050, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::GameWorkingDirectory' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, InstrumentationConfiguration) == 0x000060, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::InstrumentationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, MetaData) == 0x000068, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::MetaData' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, MonitoringApplicationConfiguration) == 0x000070, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::MonitoringApplicationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, MultiplayerServerCountPerVm) == 0x000078, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::MultiplayerServerCountPerVm' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, Ports) == 0x000080, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::Ports' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, RegionConfigurations) == 0x000090, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::RegionConfigurations' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, ServerResourceConstraints) == 0x0000A0, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::ServerResourceConstraints' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, StartMultiplayerServerCommand) == 0x0000A8, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::StartMultiplayerServerCommand' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, UseStreamingForAssetDownloads) == 0x0000B8, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::UseStreamingForAssetDownloads' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, VmSize) == 0x0000B9, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::VmSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, VmStartupScriptConfiguration) == 0x0000C0, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::VmStartupScriptConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithManagedContainerRequest, WindowsCrashDumpConfiguration) == 0x0000C8, "Member 'FMultiplayerCreateBuildWithManagedContainerRequest::WindowsCrashDumpConfiguration' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateBuildWithProcessBasedServerResponse
// 0x00F8 (0x0100 - 0x0008)
struct FMultiplayerCreateBuildWithProcessBasedServerResponse final : public FPlayFabResultCommon
{
public:
	bool                                          AreAssetsReadonly;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EB[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContainerFlavor                              ContainerFlavor;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EC[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CreationTime;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameAssetReferences;                               // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameCertificateReferences;                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 GameWorkingDirectory;                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InstrumentationConfiguration;                      // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOSPreview;                                       // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21ED[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     MetaData;                                          // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MonitoringApplicationConfiguration;                // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiplayerServerCountPerVm;                       // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EE[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OsPlatform;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Ports;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             RegionConfigurations;                              // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ServerType;                                        // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartMultiplayerServerCommand;                     // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStreamingForAssetDownloads;                     // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzureVmSize                                  VmSize;                                            // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EF[0x6];                                     // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     VmStartupScriptConfiguration;                      // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateBuildWithProcessBasedServerResponse) == 0x000008, "Wrong alignment on FMultiplayerCreateBuildWithProcessBasedServerResponse");
static_assert(sizeof(FMultiplayerCreateBuildWithProcessBasedServerResponse) == 0x000100, "Wrong size on FMultiplayerCreateBuildWithProcessBasedServerResponse");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, AreAssetsReadonly) == 0x000008, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::AreAssetsReadonly' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, BuildId) == 0x000010, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, BuildName) == 0x000020, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::BuildName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, ContainerFlavor) == 0x000030, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::ContainerFlavor' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, CreationTime) == 0x000038, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::CreationTime' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, GameAssetReferences) == 0x000048, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::GameAssetReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, GameCertificateReferences) == 0x000058, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::GameCertificateReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, GameWorkingDirectory) == 0x000068, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::GameWorkingDirectory' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, InstrumentationConfiguration) == 0x000078, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::InstrumentationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, IsOSPreview) == 0x000080, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::IsOSPreview' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, MetaData) == 0x000088, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::MetaData' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, MonitoringApplicationConfiguration) == 0x000090, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::MonitoringApplicationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, MultiplayerServerCountPerVm) == 0x000098, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::MultiplayerServerCountPerVm' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, OsPlatform) == 0x0000A0, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::OsPlatform' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, Ports) == 0x0000B0, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::Ports' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, RegionConfigurations) == 0x0000C0, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::RegionConfigurations' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, ServerType) == 0x0000D0, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::ServerType' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, StartMultiplayerServerCommand) == 0x0000E0, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::StartMultiplayerServerCommand' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, UseStreamingForAssetDownloads) == 0x0000F0, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::UseStreamingForAssetDownloads' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, VmSize) == 0x0000F1, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::VmSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerResponse, VmStartupScriptConfiguration) == 0x0000F8, "Member 'FMultiplayerCreateBuildWithProcessBasedServerResponse::VmStartupScriptConfiguration' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateBuildWithProcessBasedServerRequest
// 0x00C8 (0x00D0 - 0x0008)
struct FMultiplayerCreateBuildWithProcessBasedServerRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          AreAssetsReadonly;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F0[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameAssetReferences;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             GameCertificateReferences;                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 GameWorkingDirectory;                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InstrumentationConfiguration;                      // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOSPreview;                                       // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F1[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     MetaData;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MonitoringApplicationConfiguration;                // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiplayerServerCountPerVm;                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F2[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OsPlatform;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Ports;                                             // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             RegionConfigurations;                              // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StartMultiplayerServerCommand;                     // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseStreamingForAssetDownloads;                     // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAzureVmSize                                  VmSize;                                            // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F3[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     VmStartupScriptConfiguration;                      // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateBuildWithProcessBasedServerRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateBuildWithProcessBasedServerRequest");
static_assert(sizeof(FMultiplayerCreateBuildWithProcessBasedServerRequest) == 0x0000D0, "Wrong size on FMultiplayerCreateBuildWithProcessBasedServerRequest");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, AreAssetsReadonly) == 0x000008, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::AreAssetsReadonly' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, BuildName) == 0x000010, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::BuildName' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, CustomTags) == 0x000020, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, GameAssetReferences) == 0x000028, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::GameAssetReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, GameCertificateReferences) == 0x000038, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::GameCertificateReferences' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, GameWorkingDirectory) == 0x000048, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::GameWorkingDirectory' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, InstrumentationConfiguration) == 0x000058, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::InstrumentationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, IsOSPreview) == 0x000060, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::IsOSPreview' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, MetaData) == 0x000068, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::MetaData' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, MonitoringApplicationConfiguration) == 0x000070, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::MonitoringApplicationConfiguration' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, MultiplayerServerCountPerVm) == 0x000078, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::MultiplayerServerCountPerVm' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, OsPlatform) == 0x000080, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::OsPlatform' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, Ports) == 0x000090, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::Ports' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, RegionConfigurations) == 0x0000A0, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::RegionConfigurations' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, StartMultiplayerServerCommand) == 0x0000B0, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::StartMultiplayerServerCommand' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, UseStreamingForAssetDownloads) == 0x0000C0, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::UseStreamingForAssetDownloads' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, VmSize) == 0x0000C1, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::VmSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateBuildWithProcessBasedServerRequest, VmStartupScriptConfiguration) == 0x0000C8, "Member 'FMultiplayerCreateBuildWithProcessBasedServerRequest::VmStartupScriptConfiguration' has a wrong offset!");

// ScriptStruct PlayFab.ServerSendPushNotificationRequest
// 0x0060 (0x0068 - 0x0008)
struct FServerSendPushNotificationRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             AdvancedPlatformDelivery;                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Package;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Recipient;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Subject;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetPlatforms;                                   // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSendPushNotificationRequest) == 0x000008, "Wrong alignment on FServerSendPushNotificationRequest");
static_assert(sizeof(FServerSendPushNotificationRequest) == 0x000068, "Wrong size on FServerSendPushNotificationRequest");
static_assert(offsetof(FServerSendPushNotificationRequest, AdvancedPlatformDelivery) == 0x000008, "Member 'FServerSendPushNotificationRequest::AdvancedPlatformDelivery' has a wrong offset!");
static_assert(offsetof(FServerSendPushNotificationRequest, CustomTags) == 0x000018, "Member 'FServerSendPushNotificationRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerSendPushNotificationRequest, Message) == 0x000020, "Member 'FServerSendPushNotificationRequest::Message' has a wrong offset!");
static_assert(offsetof(FServerSendPushNotificationRequest, Package) == 0x000030, "Member 'FServerSendPushNotificationRequest::Package' has a wrong offset!");
static_assert(offsetof(FServerSendPushNotificationRequest, Recipient) == 0x000038, "Member 'FServerSendPushNotificationRequest::Recipient' has a wrong offset!");
static_assert(offsetof(FServerSendPushNotificationRequest, Subject) == 0x000048, "Member 'FServerSendPushNotificationRequest::Subject' has a wrong offset!");
static_assert(offsetof(FServerSendPushNotificationRequest, TargetPlatforms) == 0x000058, "Member 'FServerSendPushNotificationRequest::TargetPlatforms' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateLobbyRequest
// 0x0050 (0x0058 - 0x0008)
struct FMultiplayerCreateLobbyRequest final : public FPlayFabRequestCommon
{
public:
	EAccessPolicy                                 AccessPolicy;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F4[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     LobbyData;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F5[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Owner;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOwnerMigrationPolicy                         OwnerMigrationPolicy;                              // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F6[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     SearchData;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseConnections;                                    // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F7[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerCreateLobbyRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateLobbyRequest");
static_assert(sizeof(FMultiplayerCreateLobbyRequest) == 0x000058, "Wrong size on FMultiplayerCreateLobbyRequest");
static_assert(offsetof(FMultiplayerCreateLobbyRequest, AccessPolicy) == 0x000008, "Member 'FMultiplayerCreateLobbyRequest::AccessPolicy' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateLobbyRequest, CustomTags) == 0x000010, "Member 'FMultiplayerCreateLobbyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateLobbyRequest, LobbyData) == 0x000018, "Member 'FMultiplayerCreateLobbyRequest::LobbyData' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateLobbyRequest, MaxPlayers) == 0x000020, "Member 'FMultiplayerCreateLobbyRequest::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateLobbyRequest, Members) == 0x000028, "Member 'FMultiplayerCreateLobbyRequest::Members' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateLobbyRequest, Owner) == 0x000038, "Member 'FMultiplayerCreateLobbyRequest::Owner' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateLobbyRequest, OwnerMigrationPolicy) == 0x000040, "Member 'FMultiplayerCreateLobbyRequest::OwnerMigrationPolicy' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateLobbyRequest, SearchData) == 0x000048, "Member 'FMultiplayerCreateLobbyRequest::SearchData' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateLobbyRequest, UseConnections) == 0x000050, "Member 'FMultiplayerCreateLobbyRequest::UseConnections' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateMatchmakingTicketRequest
// 0x0038 (0x0040 - 0x0008)
struct FMultiplayerCreateMatchmakingTicketRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Creator;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiveUpAfterSeconds;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             MembersToMatchWith;                                // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateMatchmakingTicketRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateMatchmakingTicketRequest");
static_assert(sizeof(FMultiplayerCreateMatchmakingTicketRequest) == 0x000040, "Wrong size on FMultiplayerCreateMatchmakingTicketRequest");
static_assert(offsetof(FMultiplayerCreateMatchmakingTicketRequest, Creator) == 0x000008, "Member 'FMultiplayerCreateMatchmakingTicketRequest::Creator' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateMatchmakingTicketRequest, CustomTags) == 0x000010, "Member 'FMultiplayerCreateMatchmakingTicketRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateMatchmakingTicketRequest, GiveUpAfterSeconds) == 0x000018, "Member 'FMultiplayerCreateMatchmakingTicketRequest::GiveUpAfterSeconds' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateMatchmakingTicketRequest, MembersToMatchWith) == 0x000020, "Member 'FMultiplayerCreateMatchmakingTicketRequest::MembersToMatchWith' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateMatchmakingTicketRequest, QueueName) == 0x000030, "Member 'FMultiplayerCreateMatchmakingTicketRequest::QueueName' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateRemoteUserRequest
// 0x0058 (0x0060 - 0x0008)
struct FMultiplayerCreateRemoteUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpirationTime;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VmId;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerCreateRemoteUserRequest) == 0x000008, "Wrong alignment on FMultiplayerCreateRemoteUserRequest");
static_assert(sizeof(FMultiplayerCreateRemoteUserRequest) == 0x000060, "Wrong size on FMultiplayerCreateRemoteUserRequest");
static_assert(offsetof(FMultiplayerCreateRemoteUserRequest, BuildId) == 0x000008, "Member 'FMultiplayerCreateRemoteUserRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateRemoteUserRequest, CustomTags) == 0x000018, "Member 'FMultiplayerCreateRemoteUserRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateRemoteUserRequest, ExpirationTime) == 0x000020, "Member 'FMultiplayerCreateRemoteUserRequest::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateRemoteUserRequest, Region) == 0x000030, "Member 'FMultiplayerCreateRemoteUserRequest::Region' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateRemoteUserRequest, Username) == 0x000040, "Member 'FMultiplayerCreateRemoteUserRequest::Username' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateRemoteUserRequest, VmId) == 0x000050, "Member 'FMultiplayerCreateRemoteUserRequest::VmId' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkNintendoServiceAccountRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerLinkNintendoServiceAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F9[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IdentityToken;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLinkNintendoServiceAccountRequest) == 0x000008, "Wrong alignment on FServerLinkNintendoServiceAccountRequest");
static_assert(sizeof(FServerLinkNintendoServiceAccountRequest) == 0x000038, "Wrong size on FServerLinkNintendoServiceAccountRequest");
static_assert(offsetof(FServerLinkNintendoServiceAccountRequest, CustomTags) == 0x000008, "Member 'FServerLinkNintendoServiceAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLinkNintendoServiceAccountRequest, ForceLink) == 0x000010, "Member 'FServerLinkNintendoServiceAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FServerLinkNintendoServiceAccountRequest, IdentityToken) == 0x000018, "Member 'FServerLinkNintendoServiceAccountRequest::IdentityToken' has a wrong offset!");
static_assert(offsetof(FServerLinkNintendoServiceAccountRequest, PlayFabId) == 0x000028, "Member 'FServerLinkNintendoServiceAccountRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerCreateTitleMultiplayerServersQuotaChangeResponse
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 RequestId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasApproved;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse) == 0x000008, "Wrong alignment on FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse");
static_assert(sizeof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse) == 0x000020, "Wrong size on FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse");
static_assert(offsetof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, RequestId) == 0x000008, "Member 'FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse::RequestId' has a wrong offset!");
static_assert(offsetof(FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, WasApproved) == 0x000018, "Member 'FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse::WasApproved' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerEnableMultiplayerServersForTitleResponse
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerEnableMultiplayerServersForTitleResponse final : public FPlayFabResultCommon
{
public:
	ETitleMultiplayerServerEnabledStatus          Status;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerEnableMultiplayerServersForTitleResponse) == 0x000008, "Wrong alignment on FMultiplayerEnableMultiplayerServersForTitleResponse");
static_assert(sizeof(FMultiplayerEnableMultiplayerServersForTitleResponse) == 0x000010, "Wrong size on FMultiplayerEnableMultiplayerServersForTitleResponse");
static_assert(offsetof(FMultiplayerEnableMultiplayerServersForTitleResponse, Status) == 0x000008, "Member 'FMultiplayerEnableMultiplayerServersForTitleResponse::Status' has a wrong offset!");

// ScriptStruct PlayFab.ServerModifyItemUsesRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerModifyItemUsesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemInstanceId;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsesToAdd;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FC[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerModifyItemUsesRequest) == 0x000008, "Wrong alignment on FServerModifyItemUsesRequest");
static_assert(sizeof(FServerModifyItemUsesRequest) == 0x000038, "Wrong size on FServerModifyItemUsesRequest");
static_assert(offsetof(FServerModifyItemUsesRequest, CustomTags) == 0x000008, "Member 'FServerModifyItemUsesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerModifyItemUsesRequest, ItemInstanceId) == 0x000010, "Member 'FServerModifyItemUsesRequest::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerModifyItemUsesRequest, PlayFabId) == 0x000020, "Member 'FServerModifyItemUsesRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerModifyItemUsesRequest, UsesToAdd) == 0x000030, "Member 'FServerModifyItemUsesRequest::UsesToAdd' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerFindLobbiesResult
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerFindLobbiesResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Lobbies;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Pagination;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerFindLobbiesResult) == 0x000008, "Wrong alignment on FMultiplayerFindLobbiesResult");
static_assert(sizeof(FMultiplayerFindLobbiesResult) == 0x000020, "Wrong size on FMultiplayerFindLobbiesResult");
static_assert(offsetof(FMultiplayerFindLobbiesResult, Lobbies) == 0x000008, "Member 'FMultiplayerFindLobbiesResult::Lobbies' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindLobbiesResult, Pagination) == 0x000018, "Member 'FMultiplayerFindLobbiesResult::Pagination' has a wrong offset!");

// ScriptStruct PlayFab.ServerRemoveFriendRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerRemoveFriendRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FriendPlayFabId;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRemoveFriendRequest) == 0x000008, "Wrong alignment on FServerRemoveFriendRequest");
static_assert(sizeof(FServerRemoveFriendRequest) == 0x000028, "Wrong size on FServerRemoveFriendRequest");
static_assert(offsetof(FServerRemoveFriendRequest, FriendPlayFabId) == 0x000008, "Member 'FServerRemoveFriendRequest::FriendPlayFabId' has a wrong offset!");
static_assert(offsetof(FServerRemoveFriendRequest, PlayFabId) == 0x000018, "Member 'FServerRemoveFriendRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetAssetDownloadUrlResponse
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerGetAssetDownloadUrlResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 AssetDownloadUrl;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetAssetDownloadUrlResponse) == 0x000008, "Wrong alignment on FMultiplayerGetAssetDownloadUrlResponse");
static_assert(sizeof(FMultiplayerGetAssetDownloadUrlResponse) == 0x000028, "Wrong size on FMultiplayerGetAssetDownloadUrlResponse");
static_assert(offsetof(FMultiplayerGetAssetDownloadUrlResponse, AssetDownloadUrl) == 0x000008, "Member 'FMultiplayerGetAssetDownloadUrlResponse::AssetDownloadUrl' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetAssetDownloadUrlResponse, Filename) == 0x000018, "Member 'FMultiplayerGetAssetDownloadUrlResponse::Filename' has a wrong offset!");

// ScriptStruct PlayFab.ServerRedeemMatchmakerTicketRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerRedeemMatchmakerTicketRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ticket;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRedeemMatchmakerTicketRequest) == 0x000008, "Wrong alignment on FServerRedeemMatchmakerTicketRequest");
static_assert(sizeof(FServerRedeemMatchmakerTicketRequest) == 0x000030, "Wrong size on FServerRedeemMatchmakerTicketRequest");
static_assert(offsetof(FServerRedeemMatchmakerTicketRequest, CustomTags) == 0x000008, "Member 'FServerRedeemMatchmakerTicketRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerRedeemMatchmakerTicketRequest, LobbyId) == 0x000010, "Member 'FServerRedeemMatchmakerTicketRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FServerRedeemMatchmakerTicketRequest, Ticket) == 0x000020, "Member 'FServerRedeemMatchmakerTicketRequest::Ticket' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetAssetUploadUrlResponse
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerGetAssetUploadUrlResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 AssetUploadUrl;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetAssetUploadUrlResponse) == 0x000008, "Wrong alignment on FMultiplayerGetAssetUploadUrlResponse");
static_assert(sizeof(FMultiplayerGetAssetUploadUrlResponse) == 0x000028, "Wrong size on FMultiplayerGetAssetUploadUrlResponse");
static_assert(offsetof(FMultiplayerGetAssetUploadUrlResponse, AssetUploadUrl) == 0x000008, "Member 'FMultiplayerGetAssetUploadUrlResponse::AssetUploadUrl' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetAssetUploadUrlResponse, Filename) == 0x000018, "Member 'FMultiplayerGetAssetUploadUrlResponse::Filename' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetContainerRegistryCredentialsResponse
// 0x0030 (0x0038 - 0x0008)
struct FMultiplayerGetContainerRegistryCredentialsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 DnsName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetContainerRegistryCredentialsResponse) == 0x000008, "Wrong alignment on FMultiplayerGetContainerRegistryCredentialsResponse");
static_assert(sizeof(FMultiplayerGetContainerRegistryCredentialsResponse) == 0x000038, "Wrong size on FMultiplayerGetContainerRegistryCredentialsResponse");
static_assert(offsetof(FMultiplayerGetContainerRegistryCredentialsResponse, DnsName) == 0x000008, "Member 'FMultiplayerGetContainerRegistryCredentialsResponse::DnsName' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetContainerRegistryCredentialsResponse, Password) == 0x000018, "Member 'FMultiplayerGetContainerRegistryCredentialsResponse::Password' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetContainerRegistryCredentialsResponse, Username) == 0x000028, "Member 'FMultiplayerGetContainerRegistryCredentialsResponse::Username' has a wrong offset!");

// ScriptStruct PlayFab.ServerExecuteCloudScriptResult
// 0x0058 (0x0060 - 0x0008)
struct FServerExecuteCloudScriptResult final : public FPlayFabResultCommon
{
public:
	int32                                         APIRequestsIssued;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FD[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Error;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExecutionTimeSeconds;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FE[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FunctionName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionResult;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FunctionResultTooLarge;                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FF[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HttpRequestsIssued;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Logs;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          LogsTooLarge;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2200[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MemoryConsumedBytes;                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcessorTimeSeconds;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revision;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerExecuteCloudScriptResult) == 0x000008, "Wrong alignment on FServerExecuteCloudScriptResult");
static_assert(sizeof(FServerExecuteCloudScriptResult) == 0x000060, "Wrong size on FServerExecuteCloudScriptResult");
static_assert(offsetof(FServerExecuteCloudScriptResult, APIRequestsIssued) == 0x000008, "Member 'FServerExecuteCloudScriptResult::APIRequestsIssued' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, Error) == 0x000010, "Member 'FServerExecuteCloudScriptResult::Error' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, ExecutionTimeSeconds) == 0x000018, "Member 'FServerExecuteCloudScriptResult::ExecutionTimeSeconds' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, FunctionName) == 0x000020, "Member 'FServerExecuteCloudScriptResult::FunctionName' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, FunctionResult) == 0x000030, "Member 'FServerExecuteCloudScriptResult::FunctionResult' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, FunctionResultTooLarge) == 0x000038, "Member 'FServerExecuteCloudScriptResult::FunctionResultTooLarge' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, HttpRequestsIssued) == 0x00003C, "Member 'FServerExecuteCloudScriptResult::HttpRequestsIssued' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, Logs) == 0x000040, "Member 'FServerExecuteCloudScriptResult::Logs' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, LogsTooLarge) == 0x000050, "Member 'FServerExecuteCloudScriptResult::LogsTooLarge' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, MemoryConsumedBytes) == 0x000054, "Member 'FServerExecuteCloudScriptResult::MemoryConsumedBytes' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, ProcessorTimeSeconds) == 0x000058, "Member 'FServerExecuteCloudScriptResult::ProcessorTimeSeconds' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptResult, Revision) == 0x00005C, "Member 'FServerExecuteCloudScriptResult::Revision' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetLobbyResult
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerGetLobbyResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Lobby;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetLobbyResult) == 0x000008, "Wrong alignment on FMultiplayerGetLobbyResult");
static_assert(sizeof(FMultiplayerGetLobbyResult) == 0x000010, "Wrong size on FMultiplayerGetLobbyResult");
static_assert(offsetof(FMultiplayerGetLobbyResult, Lobby) == 0x000008, "Member 'FMultiplayerGetLobbyResult::Lobby' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetMatchmakingTicketResult
// 0x0098 (0x00A0 - 0x0008)
struct FMultiplayerGetMatchmakingTicketResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CancellationReasonString;                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeNumber;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2201[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Created;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Creator;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiveUpAfterSeconds;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2202[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             MembersToMatchWith;                                // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetMatchmakingTicketResult) == 0x000008, "Wrong alignment on FMultiplayerGetMatchmakingTicketResult");
static_assert(sizeof(FMultiplayerGetMatchmakingTicketResult) == 0x0000A0, "Wrong size on FMultiplayerGetMatchmakingTicketResult");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, CancellationReasonString) == 0x000008, "Member 'FMultiplayerGetMatchmakingTicketResult::CancellationReasonString' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, ChangeNumber) == 0x000018, "Member 'FMultiplayerGetMatchmakingTicketResult::ChangeNumber' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, Created) == 0x000020, "Member 'FMultiplayerGetMatchmakingTicketResult::Created' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, Creator) == 0x000030, "Member 'FMultiplayerGetMatchmakingTicketResult::Creator' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, GiveUpAfterSeconds) == 0x000038, "Member 'FMultiplayerGetMatchmakingTicketResult::GiveUpAfterSeconds' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, MatchID) == 0x000040, "Member 'FMultiplayerGetMatchmakingTicketResult::MatchID' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, Members) == 0x000050, "Member 'FMultiplayerGetMatchmakingTicketResult::Members' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, MembersToMatchWith) == 0x000060, "Member 'FMultiplayerGetMatchmakingTicketResult::MembersToMatchWith' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, QueueName) == 0x000070, "Member 'FMultiplayerGetMatchmakingTicketResult::QueueName' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, Status) == 0x000080, "Member 'FMultiplayerGetMatchmakingTicketResult::Status' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketResult, TicketId) == 0x000090, "Member 'FMultiplayerGetMatchmakingTicketResult::TicketId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetStoreItemsServerRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerGetStoreItemsServerRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StoreId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetStoreItemsServerRequest) == 0x000008, "Wrong alignment on FServerGetStoreItemsServerRequest");
static_assert(sizeof(FServerGetStoreItemsServerRequest) == 0x000040, "Wrong size on FServerGetStoreItemsServerRequest");
static_assert(offsetof(FServerGetStoreItemsServerRequest, CatalogVersion) == 0x000008, "Member 'FServerGetStoreItemsServerRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerGetStoreItemsServerRequest, CustomTags) == 0x000018, "Member 'FServerGetStoreItemsServerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetStoreItemsServerRequest, PlayFabId) == 0x000020, "Member 'FServerGetStoreItemsServerRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetStoreItemsServerRequest, StoreId) == 0x000030, "Member 'FServerGetStoreItemsServerRequest::StoreId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetMultiplayerServerLogsResponse
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerGetMultiplayerServerLogsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 LogDownloadUrl;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetMultiplayerServerLogsResponse) == 0x000008, "Wrong alignment on FMultiplayerGetMultiplayerServerLogsResponse");
static_assert(sizeof(FMultiplayerGetMultiplayerServerLogsResponse) == 0x000018, "Wrong size on FMultiplayerGetMultiplayerServerLogsResponse");
static_assert(offsetof(FMultiplayerGetMultiplayerServerLogsResponse, LogDownloadUrl) == 0x000008, "Member 'FMultiplayerGetMultiplayerServerLogsResponse::LogDownloadUrl' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetRemoteLoginEndpointResponse
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetRemoteLoginEndpointResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 IPV4Address;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2203[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerGetRemoteLoginEndpointResponse) == 0x000008, "Wrong alignment on FMultiplayerGetRemoteLoginEndpointResponse");
static_assert(sizeof(FMultiplayerGetRemoteLoginEndpointResponse) == 0x000020, "Wrong size on FMultiplayerGetRemoteLoginEndpointResponse");
static_assert(offsetof(FMultiplayerGetRemoteLoginEndpointResponse, IPV4Address) == 0x000008, "Member 'FMultiplayerGetRemoteLoginEndpointResponse::IPV4Address' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetRemoteLoginEndpointResponse, Port) == 0x000018, "Member 'FMultiplayerGetRemoteLoginEndpointResponse::Port' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetServerBackfillTicketResult
// 0x0080 (0x0088 - 0x0008)
struct FMultiplayerGetServerBackfillTicketResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CancellationReasonString;                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Created;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GiveUpAfterSeconds;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2204[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Members;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ServerDetails;                                     // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetServerBackfillTicketResult) == 0x000008, "Wrong alignment on FMultiplayerGetServerBackfillTicketResult");
static_assert(sizeof(FMultiplayerGetServerBackfillTicketResult) == 0x000088, "Wrong size on FMultiplayerGetServerBackfillTicketResult");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketResult, CancellationReasonString) == 0x000008, "Member 'FMultiplayerGetServerBackfillTicketResult::CancellationReasonString' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketResult, Created) == 0x000018, "Member 'FMultiplayerGetServerBackfillTicketResult::Created' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketResult, GiveUpAfterSeconds) == 0x000028, "Member 'FMultiplayerGetServerBackfillTicketResult::GiveUpAfterSeconds' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketResult, MatchID) == 0x000030, "Member 'FMultiplayerGetServerBackfillTicketResult::MatchID' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketResult, Members) == 0x000040, "Member 'FMultiplayerGetServerBackfillTicketResult::Members' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketResult, QueueName) == 0x000050, "Member 'FMultiplayerGetServerBackfillTicketResult::QueueName' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketResult, ServerDetails) == 0x000060, "Member 'FMultiplayerGetServerBackfillTicketResult::ServerDetails' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketResult, Status) == 0x000068, "Member 'FMultiplayerGetServerBackfillTicketResult::Status' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketResult, TicketId) == 0x000078, "Member 'FMultiplayerGetServerBackfillTicketResult::TicketId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse final : public FPlayFabResultCommon
{
public:
	ETitleMultiplayerServerEnabledStatus          Status;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2205[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse) == 0x000008, "Wrong alignment on FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse");
static_assert(sizeof(FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse) == 0x000010, "Wrong size on FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse");
static_assert(offsetof(FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse, Status) == 0x000008, "Member 'FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse::Status' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetTitleMultiplayerServersQuotasResponse
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerGetTitleMultiplayerServersQuotasResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Quotas;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetTitleMultiplayerServersQuotasResponse) == 0x000008, "Wrong alignment on FMultiplayerGetTitleMultiplayerServersQuotasResponse");
static_assert(sizeof(FMultiplayerGetTitleMultiplayerServersQuotasResponse) == 0x000010, "Wrong size on FMultiplayerGetTitleMultiplayerServersQuotasResponse");
static_assert(offsetof(FMultiplayerGetTitleMultiplayerServersQuotasResponse, Quotas) == 0x000008, "Member 'FMultiplayerGetTitleMultiplayerServersQuotasResponse::Quotas' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListPartyQosServersRequest
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerListPartyQosServersRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListPartyQosServersRequest) == 0x000008, "Wrong alignment on FMultiplayerListPartyQosServersRequest");
static_assert(sizeof(FMultiplayerListPartyQosServersRequest) == 0x000010, "Wrong size on FMultiplayerListPartyQosServersRequest");
static_assert(offsetof(FMultiplayerListPartyQosServersRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListPartyQosServersRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ServerGrantItemsToUsersRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerGrantItemsToUsersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             ItemGrants;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGrantItemsToUsersRequest) == 0x000008, "Wrong alignment on FServerGrantItemsToUsersRequest");
static_assert(sizeof(FServerGrantItemsToUsersRequest) == 0x000030, "Wrong size on FServerGrantItemsToUsersRequest");
static_assert(offsetof(FServerGrantItemsToUsersRequest, CatalogVersion) == 0x000008, "Member 'FServerGrantItemsToUsersRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToUsersRequest, CustomTags) == 0x000018, "Member 'FServerGrantItemsToUsersRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGrantItemsToUsersRequest, ItemGrants) == 0x000020, "Member 'FServerGrantItemsToUsersRequest::ItemGrants' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerJoinLobbyResult
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerJoinLobbyResult final : public FPlayFabResultCommon
{
public:
	class FString                                 LobbyId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerJoinLobbyResult) == 0x000008, "Wrong alignment on FMultiplayerJoinLobbyResult");
static_assert(sizeof(FMultiplayerJoinLobbyResult) == 0x000018, "Wrong size on FMultiplayerJoinLobbyResult");
static_assert(offsetof(FMultiplayerJoinLobbyResult, LobbyId) == 0x000008, "Member 'FMultiplayerJoinLobbyResult::LobbyId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListAssetSummariesResponse
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerListAssetSummariesResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             AssetSummaries;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2206[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListAssetSummariesResponse) == 0x000008, "Wrong alignment on FMultiplayerListAssetSummariesResponse");
static_assert(sizeof(FMultiplayerListAssetSummariesResponse) == 0x000030, "Wrong size on FMultiplayerListAssetSummariesResponse");
static_assert(offsetof(FMultiplayerListAssetSummariesResponse, AssetSummaries) == 0x000008, "Member 'FMultiplayerListAssetSummariesResponse::AssetSummaries' has a wrong offset!");
static_assert(offsetof(FMultiplayerListAssetSummariesResponse, PageSize) == 0x000018, "Member 'FMultiplayerListAssetSummariesResponse::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListAssetSummariesResponse, SkipToken) == 0x000020, "Member 'FMultiplayerListAssetSummariesResponse::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListCertificateSummariesResponse
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerListCertificateSummariesResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             CertificateSummaries;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2207[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListCertificateSummariesResponse) == 0x000008, "Wrong alignment on FMultiplayerListCertificateSummariesResponse");
static_assert(sizeof(FMultiplayerListCertificateSummariesResponse) == 0x000030, "Wrong size on FMultiplayerListCertificateSummariesResponse");
static_assert(offsetof(FMultiplayerListCertificateSummariesResponse, CertificateSummaries) == 0x000008, "Member 'FMultiplayerListCertificateSummariesResponse::CertificateSummaries' has a wrong offset!");
static_assert(offsetof(FMultiplayerListCertificateSummariesResponse, PageSize) == 0x000018, "Member 'FMultiplayerListCertificateSummariesResponse::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListCertificateSummariesResponse, SkipToken) == 0x000020, "Member 'FMultiplayerListCertificateSummariesResponse::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListServerBackfillTicketsForPlayerResult
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerListServerBackfillTicketsForPlayerResult final : public FPlayFabResultCommon
{
public:
	class FString                                 TicketIds;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListServerBackfillTicketsForPlayerResult) == 0x000008, "Wrong alignment on FMultiplayerListServerBackfillTicketsForPlayerResult");
static_assert(sizeof(FMultiplayerListServerBackfillTicketsForPlayerResult) == 0x000018, "Wrong size on FMultiplayerListServerBackfillTicketsForPlayerResult");
static_assert(offsetof(FMultiplayerListServerBackfillTicketsForPlayerResult, TicketIds) == 0x000008, "Member 'FMultiplayerListServerBackfillTicketsForPlayerResult::TicketIds' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListTitleMultiplayerServersQuotaChangesResponse
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerListTitleMultiplayerServersQuotaChangesResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Changes;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListTitleMultiplayerServersQuotaChangesResponse) == 0x000008, "Wrong alignment on FMultiplayerListTitleMultiplayerServersQuotaChangesResponse");
static_assert(sizeof(FMultiplayerListTitleMultiplayerServersQuotaChangesResponse) == 0x000018, "Wrong size on FMultiplayerListTitleMultiplayerServersQuotaChangesResponse");
static_assert(offsetof(FMultiplayerListTitleMultiplayerServersQuotaChangesResponse, Changes) == 0x000008, "Member 'FMultiplayerListTitleMultiplayerServersQuotaChangesResponse::Changes' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerRequestMultiplayerServerResponse
// 0x00C0 (0x00C8 - 0x0008)
struct FMultiplayerRequestMultiplayerServerResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             ConnectedPlayers;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FQDN;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IPV4Address;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastStateTransitionTime;                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Ports;                                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             PublicIPV4Addresses;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 State;                                             // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VmId;                                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerRequestMultiplayerServerResponse) == 0x000008, "Wrong alignment on FMultiplayerRequestMultiplayerServerResponse");
static_assert(sizeof(FMultiplayerRequestMultiplayerServerResponse) == 0x0000C8, "Wrong size on FMultiplayerRequestMultiplayerServerResponse");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, BuildId) == 0x000008, "Member 'FMultiplayerRequestMultiplayerServerResponse::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, ConnectedPlayers) == 0x000018, "Member 'FMultiplayerRequestMultiplayerServerResponse::ConnectedPlayers' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, FQDN) == 0x000028, "Member 'FMultiplayerRequestMultiplayerServerResponse::FQDN' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, IPV4Address) == 0x000038, "Member 'FMultiplayerRequestMultiplayerServerResponse::IPV4Address' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, LastStateTransitionTime) == 0x000048, "Member 'FMultiplayerRequestMultiplayerServerResponse::LastStateTransitionTime' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, Ports) == 0x000058, "Member 'FMultiplayerRequestMultiplayerServerResponse::Ports' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, PublicIPV4Addresses) == 0x000068, "Member 'FMultiplayerRequestMultiplayerServerResponse::PublicIPV4Addresses' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, Region) == 0x000078, "Member 'FMultiplayerRequestMultiplayerServerResponse::Region' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, ServerId) == 0x000088, "Member 'FMultiplayerRequestMultiplayerServerResponse::ServerId' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, SessionId) == 0x000098, "Member 'FMultiplayerRequestMultiplayerServerResponse::SessionId' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, State) == 0x0000A8, "Member 'FMultiplayerRequestMultiplayerServerResponse::State' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerResponse, VmId) == 0x0000B8, "Member 'FMultiplayerRequestMultiplayerServerResponse::VmId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 NintendoSwitchDeviceIds;                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest");
static_assert(sizeof(FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest");
static_assert(offsetof(FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, NintendoSwitchDeviceIds) == 0x000008, "Member 'FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest::NintendoSwitchDeviceIds' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerRolloverContainerRegistryCredentialsResponse
// 0x0030 (0x0038 - 0x0008)
struct FMultiplayerRolloverContainerRegistryCredentialsResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 DnsName;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerRolloverContainerRegistryCredentialsResponse) == 0x000008, "Wrong alignment on FMultiplayerRolloverContainerRegistryCredentialsResponse");
static_assert(sizeof(FMultiplayerRolloverContainerRegistryCredentialsResponse) == 0x000038, "Wrong size on FMultiplayerRolloverContainerRegistryCredentialsResponse");
static_assert(offsetof(FMultiplayerRolloverContainerRegistryCredentialsResponse, DnsName) == 0x000008, "Member 'FMultiplayerRolloverContainerRegistryCredentialsResponse::DnsName' has a wrong offset!");
static_assert(offsetof(FMultiplayerRolloverContainerRegistryCredentialsResponse, Password) == 0x000018, "Member 'FMultiplayerRolloverContainerRegistryCredentialsResponse::Password' has a wrong offset!");
static_assert(offsetof(FMultiplayerRolloverContainerRegistryCredentialsResponse, Username) == 0x000028, "Member 'FMultiplayerRolloverContainerRegistryCredentialsResponse::Username' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPublisherDataRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPublisherDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Keys;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPublisherDataRequest) == 0x000008, "Wrong alignment on FServerGetPublisherDataRequest");
static_assert(sizeof(FServerGetPublisherDataRequest) == 0x000018, "Wrong size on FServerGetPublisherDataRequest");
static_assert(offsetof(FServerGetPublisherDataRequest, Keys) == 0x000008, "Member 'FServerGetPublisherDataRequest::Keys' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerRequestMultiplayerServerRequest
// 0x0060 (0x0068 - 0x0008)
struct FMultiplayerRequestMultiplayerServerRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     BuildAliasParams;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InitialPlayers;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreferredRegions;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionCookie;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerRequestMultiplayerServerRequest) == 0x000008, "Wrong alignment on FMultiplayerRequestMultiplayerServerRequest");
static_assert(sizeof(FMultiplayerRequestMultiplayerServerRequest) == 0x000068, "Wrong size on FMultiplayerRequestMultiplayerServerRequest");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerRequest, BuildAliasParams) == 0x000008, "Member 'FMultiplayerRequestMultiplayerServerRequest::BuildAliasParams' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerRequest, BuildId) == 0x000010, "Member 'FMultiplayerRequestMultiplayerServerRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerRequest, CustomTags) == 0x000020, "Member 'FMultiplayerRequestMultiplayerServerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerRequest, InitialPlayers) == 0x000028, "Member 'FMultiplayerRequestMultiplayerServerRequest::InitialPlayers' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerRequest, PreferredRegions) == 0x000038, "Member 'FMultiplayerRequestMultiplayerServerRequest::PreferredRegions' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerRequest, SessionCookie) == 0x000048, "Member 'FMultiplayerRequestMultiplayerServerRequest::SessionCookie' has a wrong offset!");
static_assert(offsetof(FMultiplayerRequestMultiplayerServerRequest, SessionId) == 0x000058, "Member 'FMultiplayerRequestMultiplayerServerRequest::SessionId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerDeleteAssetRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerDeleteAssetRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerDeleteAssetRequest) == 0x000008, "Wrong alignment on FMultiplayerDeleteAssetRequest");
static_assert(sizeof(FMultiplayerDeleteAssetRequest) == 0x000020, "Wrong size on FMultiplayerDeleteAssetRequest");
static_assert(offsetof(FMultiplayerDeleteAssetRequest, CustomTags) == 0x000008, "Member 'FMultiplayerDeleteAssetRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteAssetRequest, Filename) == 0x000010, "Member 'FMultiplayerDeleteAssetRequest::Filename' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerDeleteLobbyRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerDeleteLobbyRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerDeleteLobbyRequest) == 0x000008, "Wrong alignment on FMultiplayerDeleteLobbyRequest");
static_assert(sizeof(FMultiplayerDeleteLobbyRequest) == 0x000020, "Wrong size on FMultiplayerDeleteLobbyRequest");
static_assert(offsetof(FMultiplayerDeleteLobbyRequest, CustomTags) == 0x000008, "Member 'FMultiplayerDeleteLobbyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteLobbyRequest, LobbyId) == 0x000010, "Member 'FMultiplayerDeleteLobbyRequest::LobbyId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerDeleteRemoteUserRequest
// 0x0048 (0x0050 - 0x0008)
struct FMultiplayerDeleteRemoteUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VmId;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerDeleteRemoteUserRequest) == 0x000008, "Wrong alignment on FMultiplayerDeleteRemoteUserRequest");
static_assert(sizeof(FMultiplayerDeleteRemoteUserRequest) == 0x000050, "Wrong size on FMultiplayerDeleteRemoteUserRequest");
static_assert(offsetof(FMultiplayerDeleteRemoteUserRequest, BuildId) == 0x000008, "Member 'FMultiplayerDeleteRemoteUserRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteRemoteUserRequest, CustomTags) == 0x000018, "Member 'FMultiplayerDeleteRemoteUserRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteRemoteUserRequest, Region) == 0x000020, "Member 'FMultiplayerDeleteRemoteUserRequest::Region' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteRemoteUserRequest, Username) == 0x000030, "Member 'FMultiplayerDeleteRemoteUserRequest::Username' has a wrong offset!");
static_assert(offsetof(FMultiplayerDeleteRemoteUserRequest, VmId) == 0x000040, "Member 'FMultiplayerDeleteRemoteUserRequest::VmId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerEnableMultiplayerServersForTitleRequest
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerEnableMultiplayerServersForTitleRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerEnableMultiplayerServersForTitleRequest) == 0x000008, "Wrong alignment on FMultiplayerEnableMultiplayerServersForTitleRequest");
static_assert(sizeof(FMultiplayerEnableMultiplayerServersForTitleRequest) == 0x000010, "Wrong size on FMultiplayerEnableMultiplayerServersForTitleRequest");
static_assert(offsetof(FMultiplayerEnableMultiplayerServersForTitleRequest, CustomTags) == 0x000008, "Member 'FMultiplayerEnableMultiplayerServersForTitleRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerFindFriendLobbiesRequest
// 0x0048 (0x0050 - 0x0008)
struct FMultiplayerFindFriendLobbiesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExternalFriendSources                        ExternalPlatformFriends;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2208[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filter;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrderBy;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Pagination;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerFindFriendLobbiesRequest) == 0x000008, "Wrong alignment on FMultiplayerFindFriendLobbiesRequest");
static_assert(sizeof(FMultiplayerFindFriendLobbiesRequest) == 0x000050, "Wrong size on FMultiplayerFindFriendLobbiesRequest");
static_assert(offsetof(FMultiplayerFindFriendLobbiesRequest, CustomTags) == 0x000008, "Member 'FMultiplayerFindFriendLobbiesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindFriendLobbiesRequest, ExternalPlatformFriends) == 0x000010, "Member 'FMultiplayerFindFriendLobbiesRequest::ExternalPlatformFriends' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindFriendLobbiesRequest, Filter) == 0x000018, "Member 'FMultiplayerFindFriendLobbiesRequest::Filter' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindFriendLobbiesRequest, OrderBy) == 0x000028, "Member 'FMultiplayerFindFriendLobbiesRequest::OrderBy' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindFriendLobbiesRequest, Pagination) == 0x000038, "Member 'FMultiplayerFindFriendLobbiesRequest::Pagination' has a wrong offset!");
static_assert(offsetof(FMultiplayerFindFriendLobbiesRequest, XboxToken) == 0x000040, "Member 'FMultiplayerFindFriendLobbiesRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetUserDataResult
// 0x0020 (0x0028 - 0x0008)
struct FServerGetUserDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataVersion;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2209[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetUserDataResult) == 0x000008, "Wrong alignment on FServerGetUserDataResult");
static_assert(sizeof(FServerGetUserDataResult) == 0x000028, "Wrong size on FServerGetUserDataResult");
static_assert(offsetof(FServerGetUserDataResult, Data) == 0x000008, "Member 'FServerGetUserDataResult::Data' has a wrong offset!");
static_assert(offsetof(FServerGetUserDataResult, DataVersion) == 0x000010, "Member 'FServerGetUserDataResult::DataVersion' has a wrong offset!");
static_assert(offsetof(FServerGetUserDataResult, PlayFabId) == 0x000018, "Member 'FServerGetUserDataResult::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetBuildAliasRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetBuildAliasRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AliasId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetBuildAliasRequest) == 0x000008, "Wrong alignment on FMultiplayerGetBuildAliasRequest");
static_assert(sizeof(FMultiplayerGetBuildAliasRequest) == 0x000020, "Wrong size on FMultiplayerGetBuildAliasRequest");
static_assert(offsetof(FMultiplayerGetBuildAliasRequest, AliasId) == 0x000008, "Member 'FMultiplayerGetBuildAliasRequest::AliasId' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetBuildAliasRequest, CustomTags) == 0x000018, "Member 'FMultiplayerGetBuildAliasRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerShutdownMultiplayerServerRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerShutdownMultiplayerServerRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerShutdownMultiplayerServerRequest) == 0x000008, "Wrong alignment on FMultiplayerShutdownMultiplayerServerRequest");
static_assert(sizeof(FMultiplayerShutdownMultiplayerServerRequest) == 0x000020, "Wrong size on FMultiplayerShutdownMultiplayerServerRequest");
static_assert(offsetof(FMultiplayerShutdownMultiplayerServerRequest, CustomTags) == 0x000008, "Member 'FMultiplayerShutdownMultiplayerServerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerShutdownMultiplayerServerRequest, SessionId) == 0x000010, "Member 'FMultiplayerShutdownMultiplayerServerRequest::SessionId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetLobbyRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetLobbyRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetLobbyRequest) == 0x000008, "Wrong alignment on FMultiplayerGetLobbyRequest");
static_assert(sizeof(FMultiplayerGetLobbyRequest) == 0x000020, "Wrong size on FMultiplayerGetLobbyRequest");
static_assert(offsetof(FMultiplayerGetLobbyRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetLobbyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetLobbyRequest, LobbyId) == 0x000010, "Member 'FMultiplayerGetLobbyRequest::LobbyId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetMatchmakingTicketRequest
// 0x0030 (0x0038 - 0x0008)
struct FMultiplayerGetMatchmakingTicketRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EscapeObject;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220A[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueueName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetMatchmakingTicketRequest) == 0x000008, "Wrong alignment on FMultiplayerGetMatchmakingTicketRequest");
static_assert(sizeof(FMultiplayerGetMatchmakingTicketRequest) == 0x000038, "Wrong size on FMultiplayerGetMatchmakingTicketRequest");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetMatchmakingTicketRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketRequest, EscapeObject) == 0x000010, "Member 'FMultiplayerGetMatchmakingTicketRequest::EscapeObject' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketRequest, QueueName) == 0x000018, "Member 'FMultiplayerGetMatchmakingTicketRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMatchmakingTicketRequest, TicketId) == 0x000028, "Member 'FMultiplayerGetMatchmakingTicketRequest::TicketId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetMultiplayerServerLogsRequest
// 0x0018 (0x0020 - 0x0008)
struct FMultiplayerGetMultiplayerServerLogsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetMultiplayerServerLogsRequest) == 0x000008, "Wrong alignment on FMultiplayerGetMultiplayerServerLogsRequest");
static_assert(sizeof(FMultiplayerGetMultiplayerServerLogsRequest) == 0x000020, "Wrong size on FMultiplayerGetMultiplayerServerLogsRequest");
static_assert(offsetof(FMultiplayerGetMultiplayerServerLogsRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetMultiplayerServerLogsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetMultiplayerServerLogsRequest, ServerId) == 0x000010, "Member 'FMultiplayerGetMultiplayerServerLogsRequest::ServerId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerGetServerBackfillTicketRequest
// 0x0030 (0x0038 - 0x0008)
struct FMultiplayerGetServerBackfillTicketRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EscapeObject;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueueName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerGetServerBackfillTicketRequest) == 0x000008, "Wrong alignment on FMultiplayerGetServerBackfillTicketRequest");
static_assert(sizeof(FMultiplayerGetServerBackfillTicketRequest) == 0x000038, "Wrong size on FMultiplayerGetServerBackfillTicketRequest");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketRequest, CustomTags) == 0x000008, "Member 'FMultiplayerGetServerBackfillTicketRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketRequest, EscapeObject) == 0x000010, "Member 'FMultiplayerGetServerBackfillTicketRequest::EscapeObject' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketRequest, QueueName) == 0x000018, "Member 'FMultiplayerGetServerBackfillTicketRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FMultiplayerGetServerBackfillTicketRequest, TicketId) == 0x000028, "Member 'FMultiplayerGetServerBackfillTicketRequest::TicketId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerInviteToLobbyRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerInviteToLobbyRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InviteeEntity;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MemberEntity;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerInviteToLobbyRequest) == 0x000008, "Wrong alignment on FMultiplayerInviteToLobbyRequest");
static_assert(sizeof(FMultiplayerInviteToLobbyRequest) == 0x000030, "Wrong size on FMultiplayerInviteToLobbyRequest");
static_assert(offsetof(FMultiplayerInviteToLobbyRequest, CustomTags) == 0x000008, "Member 'FMultiplayerInviteToLobbyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerInviteToLobbyRequest, InviteeEntity) == 0x000010, "Member 'FMultiplayerInviteToLobbyRequest::InviteeEntity' has a wrong offset!");
static_assert(offsetof(FMultiplayerInviteToLobbyRequest, LobbyId) == 0x000018, "Member 'FMultiplayerInviteToLobbyRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FMultiplayerInviteToLobbyRequest, MemberEntity) == 0x000028, "Member 'FMultiplayerInviteToLobbyRequest::MemberEntity' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerJoinMatchmakingTicketRequest
// 0x0030 (0x0038 - 0x0008)
struct FMultiplayerJoinMatchmakingTicketRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Member;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TicketId;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerJoinMatchmakingTicketRequest) == 0x000008, "Wrong alignment on FMultiplayerJoinMatchmakingTicketRequest");
static_assert(sizeof(FMultiplayerJoinMatchmakingTicketRequest) == 0x000038, "Wrong size on FMultiplayerJoinMatchmakingTicketRequest");
static_assert(offsetof(FMultiplayerJoinMatchmakingTicketRequest, CustomTags) == 0x000008, "Member 'FMultiplayerJoinMatchmakingTicketRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinMatchmakingTicketRequest, Member) == 0x000010, "Member 'FMultiplayerJoinMatchmakingTicketRequest::Member' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinMatchmakingTicketRequest, QueueName) == 0x000018, "Member 'FMultiplayerJoinMatchmakingTicketRequest::QueueName' has a wrong offset!");
static_assert(offsetof(FMultiplayerJoinMatchmakingTicketRequest, TicketId) == 0x000028, "Member 'FMultiplayerJoinMatchmakingTicketRequest::TicketId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlinkXboxAccountRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerUnlinkXboxAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUnlinkXboxAccountRequest) == 0x000008, "Wrong alignment on FServerUnlinkXboxAccountRequest");
static_assert(sizeof(FServerUnlinkXboxAccountRequest) == 0x000020, "Wrong size on FServerUnlinkXboxAccountRequest");
static_assert(offsetof(FServerUnlinkXboxAccountRequest, CustomTags) == 0x000008, "Member 'FServerUnlinkXboxAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUnlinkXboxAccountRequest, PlayFabId) == 0x000010, "Member 'FServerUnlinkXboxAccountRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerLeaveLobbyRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerLeaveLobbyRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MemberEntity;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerLeaveLobbyRequest) == 0x000008, "Wrong alignment on FMultiplayerLeaveLobbyRequest");
static_assert(sizeof(FMultiplayerLeaveLobbyRequest) == 0x000028, "Wrong size on FMultiplayerLeaveLobbyRequest");
static_assert(offsetof(FMultiplayerLeaveLobbyRequest, CustomTags) == 0x000008, "Member 'FMultiplayerLeaveLobbyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerLeaveLobbyRequest, LobbyId) == 0x000010, "Member 'FMultiplayerLeaveLobbyRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FMultiplayerLeaveLobbyRequest, MemberEntity) == 0x000020, "Member 'FMultiplayerLeaveLobbyRequest::MemberEntity' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListCertificateSummariesRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerListCertificateSummariesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipToken;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListCertificateSummariesRequest) == 0x000008, "Wrong alignment on FMultiplayerListCertificateSummariesRequest");
static_assert(sizeof(FMultiplayerListCertificateSummariesRequest) == 0x000028, "Wrong size on FMultiplayerListCertificateSummariesRequest");
static_assert(offsetof(FMultiplayerListCertificateSummariesRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListCertificateSummariesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListCertificateSummariesRequest, PageSize) == 0x000010, "Member 'FMultiplayerListCertificateSummariesRequest::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListCertificateSummariesRequest, SkipToken) == 0x000018, "Member 'FMultiplayerListCertificateSummariesRequest::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListMatchmakingTicketsForPlayerRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerListMatchmakingTicketsForPlayerRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListMatchmakingTicketsForPlayerRequest) == 0x000008, "Wrong alignment on FMultiplayerListMatchmakingTicketsForPlayerRequest");
static_assert(sizeof(FMultiplayerListMatchmakingTicketsForPlayerRequest) == 0x000028, "Wrong size on FMultiplayerListMatchmakingTicketsForPlayerRequest");
static_assert(offsetof(FMultiplayerListMatchmakingTicketsForPlayerRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListMatchmakingTicketsForPlayerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListMatchmakingTicketsForPlayerRequest, Entity) == 0x000010, "Member 'FMultiplayerListMatchmakingTicketsForPlayerRequest::Entity' has a wrong offset!");
static_assert(offsetof(FMultiplayerListMatchmakingTicketsForPlayerRequest, QueueName) == 0x000018, "Member 'FMultiplayerListMatchmakingTicketsForPlayerRequest::QueueName' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListServerBackfillTicketsForPlayerRequest
// 0x0020 (0x0028 - 0x0008)
struct FMultiplayerListServerBackfillTicketsForPlayerRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListServerBackfillTicketsForPlayerRequest) == 0x000008, "Wrong alignment on FMultiplayerListServerBackfillTicketsForPlayerRequest");
static_assert(sizeof(FMultiplayerListServerBackfillTicketsForPlayerRequest) == 0x000028, "Wrong size on FMultiplayerListServerBackfillTicketsForPlayerRequest");
static_assert(offsetof(FMultiplayerListServerBackfillTicketsForPlayerRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListServerBackfillTicketsForPlayerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListServerBackfillTicketsForPlayerRequest, Entity) == 0x000010, "Member 'FMultiplayerListServerBackfillTicketsForPlayerRequest::Entity' has a wrong offset!");
static_assert(offsetof(FMultiplayerListServerBackfillTicketsForPlayerRequest, QueueName) == 0x000018, "Member 'FMultiplayerListServerBackfillTicketsForPlayerRequest::QueueName' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListTitleMultiplayerServersQuotaChangesRequest
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerListTitleMultiplayerServersQuotaChangesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListTitleMultiplayerServersQuotaChangesRequest) == 0x000008, "Wrong alignment on FMultiplayerListTitleMultiplayerServersQuotaChangesRequest");
static_assert(sizeof(FMultiplayerListTitleMultiplayerServersQuotaChangesRequest) == 0x000010, "Wrong size on FMultiplayerListTitleMultiplayerServersQuotaChangesRequest");
static_assert(offsetof(FMultiplayerListTitleMultiplayerServersQuotaChangesRequest, CustomTags) == 0x000008, "Member 'FMultiplayerListTitleMultiplayerServersQuotaChangesRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerListVirtualMachineSummariesRequest
// 0x0040 (0x0048 - 0x0008)
struct FMultiplayerListVirtualMachineSummariesRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220D[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Region;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkipToken;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerListVirtualMachineSummariesRequest) == 0x000008, "Wrong alignment on FMultiplayerListVirtualMachineSummariesRequest");
static_assert(sizeof(FMultiplayerListVirtualMachineSummariesRequest) == 0x000048, "Wrong size on FMultiplayerListVirtualMachineSummariesRequest");
static_assert(offsetof(FMultiplayerListVirtualMachineSummariesRequest, BuildId) == 0x000008, "Member 'FMultiplayerListVirtualMachineSummariesRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerListVirtualMachineSummariesRequest, CustomTags) == 0x000018, "Member 'FMultiplayerListVirtualMachineSummariesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerListVirtualMachineSummariesRequest, PageSize) == 0x000020, "Member 'FMultiplayerListVirtualMachineSummariesRequest::PageSize' has a wrong offset!");
static_assert(offsetof(FMultiplayerListVirtualMachineSummariesRequest, Region) == 0x000028, "Member 'FMultiplayerListVirtualMachineSummariesRequest::Region' has a wrong offset!");
static_assert(offsetof(FMultiplayerListVirtualMachineSummariesRequest, SkipToken) == 0x000038, "Member 'FMultiplayerListVirtualMachineSummariesRequest::SkipToken' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerRolloverContainerRegistryCredentialsRequest
// 0x0008 (0x0010 - 0x0008)
struct FMultiplayerRolloverContainerRegistryCredentialsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerRolloverContainerRegistryCredentialsRequest) == 0x000008, "Wrong alignment on FMultiplayerRolloverContainerRegistryCredentialsRequest");
static_assert(sizeof(FMultiplayerRolloverContainerRegistryCredentialsRequest) == 0x000010, "Wrong size on FMultiplayerRolloverContainerRegistryCredentialsRequest");
static_assert(offsetof(FMultiplayerRolloverContainerRegistryCredentialsRequest, CustomTags) == 0x000008, "Member 'FMultiplayerRolloverContainerRegistryCredentialsRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerUntagContainerImageRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerUntagContainerImageRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerUntagContainerImageRequest) == 0x000008, "Wrong alignment on FMultiplayerUntagContainerImageRequest");
static_assert(sizeof(FMultiplayerUntagContainerImageRequest) == 0x000030, "Wrong size on FMultiplayerUntagContainerImageRequest");
static_assert(offsetof(FMultiplayerUntagContainerImageRequest, CustomTags) == 0x000008, "Member 'FMultiplayerUntagContainerImageRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerUntagContainerImageRequest, ImageName) == 0x000010, "Member 'FMultiplayerUntagContainerImageRequest::ImageName' has a wrong offset!");
static_assert(offsetof(FMultiplayerUntagContainerImageRequest, Tag) == 0x000020, "Member 'FMultiplayerUntagContainerImageRequest::Tag' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerUpdateBuildAliasRequest
// 0x0038 (0x0040 - 0x0008)
struct FMultiplayerUpdateBuildAliasRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AliasId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AliasName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             BuildSelectionCriteria;                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerUpdateBuildAliasRequest) == 0x000008, "Wrong alignment on FMultiplayerUpdateBuildAliasRequest");
static_assert(sizeof(FMultiplayerUpdateBuildAliasRequest) == 0x000040, "Wrong size on FMultiplayerUpdateBuildAliasRequest");
static_assert(offsetof(FMultiplayerUpdateBuildAliasRequest, AliasId) == 0x000008, "Member 'FMultiplayerUpdateBuildAliasRequest::AliasId' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateBuildAliasRequest, AliasName) == 0x000018, "Member 'FMultiplayerUpdateBuildAliasRequest::AliasName' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateBuildAliasRequest, BuildSelectionCriteria) == 0x000028, "Member 'FMultiplayerUpdateBuildAliasRequest::BuildSelectionCriteria' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateBuildAliasRequest, CustomTags) == 0x000038, "Member 'FMultiplayerUpdateBuildAliasRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerUpdateBuildNameRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerUpdateBuildNameRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerUpdateBuildNameRequest) == 0x000008, "Wrong alignment on FMultiplayerUpdateBuildNameRequest");
static_assert(sizeof(FMultiplayerUpdateBuildNameRequest) == 0x000030, "Wrong size on FMultiplayerUpdateBuildNameRequest");
static_assert(offsetof(FMultiplayerUpdateBuildNameRequest, BuildId) == 0x000008, "Member 'FMultiplayerUpdateBuildNameRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateBuildNameRequest, BuildName) == 0x000018, "Member 'FMultiplayerUpdateBuildNameRequest::BuildName' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateBuildNameRequest, CustomTags) == 0x000028, "Member 'FMultiplayerUpdateBuildNameRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerUpdateBuildRegionsRequest
// 0x0028 (0x0030 - 0x0008)
struct FMultiplayerUpdateBuildRegionsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BuildId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             BuildRegions;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerUpdateBuildRegionsRequest) == 0x000008, "Wrong alignment on FMultiplayerUpdateBuildRegionsRequest");
static_assert(sizeof(FMultiplayerUpdateBuildRegionsRequest) == 0x000030, "Wrong size on FMultiplayerUpdateBuildRegionsRequest");
static_assert(offsetof(FMultiplayerUpdateBuildRegionsRequest, BuildId) == 0x000008, "Member 'FMultiplayerUpdateBuildRegionsRequest::BuildId' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateBuildRegionsRequest, BuildRegions) == 0x000018, "Member 'FMultiplayerUpdateBuildRegionsRequest::BuildRegions' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateBuildRegionsRequest, CustomTags) == 0x000028, "Member 'FMultiplayerUpdateBuildRegionsRequest::CustomTags' has a wrong offset!");

// ScriptStruct PlayFab.ServerSubtractUserVirtualCurrencyRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerSubtractUserVirtualCurrencyRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSubtractUserVirtualCurrencyRequest) == 0x000008, "Wrong alignment on FServerSubtractUserVirtualCurrencyRequest");
static_assert(sizeof(FServerSubtractUserVirtualCurrencyRequest) == 0x000038, "Wrong size on FServerSubtractUserVirtualCurrencyRequest");
static_assert(offsetof(FServerSubtractUserVirtualCurrencyRequest, Amount) == 0x000008, "Member 'FServerSubtractUserVirtualCurrencyRequest::Amount' has a wrong offset!");
static_assert(offsetof(FServerSubtractUserVirtualCurrencyRequest, CustomTags) == 0x000010, "Member 'FServerSubtractUserVirtualCurrencyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerSubtractUserVirtualCurrencyRequest, PlayFabId) == 0x000018, "Member 'FServerSubtractUserVirtualCurrencyRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerSubtractUserVirtualCurrencyRequest, VirtualCurrency) == 0x000028, "Member 'FServerSubtractUserVirtualCurrencyRequest::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerUpdateLobbyRequest
// 0x0088 (0x0090 - 0x0008)
struct FMultiplayerUpdateLobbyRequest final : public FPlayFabRequestCommon
{
public:
	EAccessPolicy                                 AccessPolicy;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220F[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     LobbyData;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyDataToDelete;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2210[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     MemberData;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MemberDataToDelete;                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     MemberEntity;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMembershipLock                               MembershipLock;                                    // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2211[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     Owner;                                             // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     SearchData;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SearchDataToDelete;                                // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerUpdateLobbyRequest) == 0x000008, "Wrong alignment on FMultiplayerUpdateLobbyRequest");
static_assert(sizeof(FMultiplayerUpdateLobbyRequest) == 0x000090, "Wrong size on FMultiplayerUpdateLobbyRequest");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, AccessPolicy) == 0x000008, "Member 'FMultiplayerUpdateLobbyRequest::AccessPolicy' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, CustomTags) == 0x000010, "Member 'FMultiplayerUpdateLobbyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, LobbyData) == 0x000018, "Member 'FMultiplayerUpdateLobbyRequest::LobbyData' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, LobbyDataToDelete) == 0x000020, "Member 'FMultiplayerUpdateLobbyRequest::LobbyDataToDelete' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, LobbyId) == 0x000030, "Member 'FMultiplayerUpdateLobbyRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, MaxPlayers) == 0x000040, "Member 'FMultiplayerUpdateLobbyRequest::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, MemberData) == 0x000048, "Member 'FMultiplayerUpdateLobbyRequest::MemberData' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, MemberDataToDelete) == 0x000050, "Member 'FMultiplayerUpdateLobbyRequest::MemberDataToDelete' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, MemberEntity) == 0x000060, "Member 'FMultiplayerUpdateLobbyRequest::MemberEntity' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, MembershipLock) == 0x000068, "Member 'FMultiplayerUpdateLobbyRequest::MembershipLock' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, Owner) == 0x000070, "Member 'FMultiplayerUpdateLobbyRequest::Owner' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, SearchData) == 0x000078, "Member 'FMultiplayerUpdateLobbyRequest::SearchData' has a wrong offset!");
static_assert(offsetof(FMultiplayerUpdateLobbyRequest, SearchDataToDelete) == 0x000080, "Member 'FMultiplayerUpdateLobbyRequest::SearchDataToDelete' has a wrong offset!");

// ScriptStruct PlayFab.MultiplayerUploadCertificateRequest
// 0x0010 (0x0018 - 0x0008)
struct FMultiplayerUploadCertificateRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     GameCertificate;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerUploadCertificateRequest) == 0x000008, "Wrong alignment on FMultiplayerUploadCertificateRequest");
static_assert(sizeof(FMultiplayerUploadCertificateRequest) == 0x000018, "Wrong size on FMultiplayerUploadCertificateRequest");
static_assert(offsetof(FMultiplayerUploadCertificateRequest, CustomTags) == 0x000008, "Member 'FMultiplayerUploadCertificateRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FMultiplayerUploadCertificateRequest, GameCertificate) == 0x000010, "Member 'FMultiplayerUploadCertificateRequest::GameCertificate' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlinkServerCustomIdRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerUnlinkServerCustomIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerCustomId;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUnlinkServerCustomIdRequest) == 0x000008, "Wrong alignment on FServerUnlinkServerCustomIdRequest");
static_assert(sizeof(FServerUnlinkServerCustomIdRequest) == 0x000030, "Wrong size on FServerUnlinkServerCustomIdRequest");
static_assert(offsetof(FServerUnlinkServerCustomIdRequest, CustomTags) == 0x000008, "Member 'FServerUnlinkServerCustomIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUnlinkServerCustomIdRequest, PlayFabId) == 0x000010, "Member 'FServerUnlinkServerCustomIdRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerUnlinkServerCustomIdRequest, ServerCustomId) == 0x000020, "Member 'FServerUnlinkServerCustomIdRequest::ServerCustomId' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesGetEntityProfileResponse
// 0x0008 (0x0010 - 0x0008)
struct FProfilesGetEntityProfileResponse final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Profile;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetEntityProfileResponse) == 0x000008, "Wrong alignment on FProfilesGetEntityProfileResponse");
static_assert(sizeof(FProfilesGetEntityProfileResponse) == 0x000010, "Wrong size on FProfilesGetEntityProfileResponse");
static_assert(offsetof(FProfilesGetEntityProfileResponse, Profile) == 0x000008, "Member 'FProfilesGetEntityProfileResponse::Profile' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesGetEntityProfilesResponse
// 0x0010 (0x0018 - 0x0008)
struct FProfilesGetEntityProfilesResponse final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Profiles;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetEntityProfilesResponse) == 0x000008, "Wrong alignment on FProfilesGetEntityProfilesResponse");
static_assert(sizeof(FProfilesGetEntityProfilesResponse) == 0x000018, "Wrong size on FProfilesGetEntityProfilesResponse");
static_assert(offsetof(FProfilesGetEntityProfilesResponse, Profiles) == 0x000008, "Member 'FProfilesGetEntityProfilesResponse::Profiles' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesSetGlobalPolicyResponse
// 0x0000 (0x0008 - 0x0008)
struct FProfilesSetGlobalPolicyResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FProfilesSetGlobalPolicyResponse) == 0x000008, "Wrong alignment on FProfilesSetGlobalPolicyResponse");
static_assert(sizeof(FProfilesSetGlobalPolicyResponse) == 0x000008, "Wrong size on FProfilesSetGlobalPolicyResponse");

// ScriptStruct PlayFab.ProfilesGetGlobalPolicyRequest
// 0x0010 (0x0018 - 0x0008)
struct FProfilesGetGlobalPolicyRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetGlobalPolicyRequest) == 0x000008, "Wrong alignment on FProfilesGetGlobalPolicyRequest");
static_assert(sizeof(FProfilesGetGlobalPolicyRequest) == 0x000018, "Wrong size on FProfilesGetGlobalPolicyRequest");
static_assert(offsetof(FProfilesGetGlobalPolicyRequest, CustomTags) == 0x000008, "Member 'FProfilesGetGlobalPolicyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FProfilesGetGlobalPolicyRequest, Entity) == 0x000010, "Member 'FProfilesGetGlobalPolicyRequest::Entity' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesGetEntityProfilesRequest
// 0x0020 (0x0028 - 0x0008)
struct FProfilesGetEntityProfilesRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DataAsObject;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2212[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPlayFabJsonObject*>             Entities;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetEntityProfilesRequest) == 0x000008, "Wrong alignment on FProfilesGetEntityProfilesRequest");
static_assert(sizeof(FProfilesGetEntityProfilesRequest) == 0x000028, "Wrong size on FProfilesGetEntityProfilesRequest");
static_assert(offsetof(FProfilesGetEntityProfilesRequest, CustomTags) == 0x000008, "Member 'FProfilesGetEntityProfilesRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FProfilesGetEntityProfilesRequest, DataAsObject) == 0x000010, "Member 'FProfilesGetEntityProfilesRequest::DataAsObject' has a wrong offset!");
static_assert(offsetof(FProfilesGetEntityProfilesRequest, Entities) == 0x000018, "Member 'FProfilesGetEntityProfilesRequest::Entities' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdatePlayerStatisticsRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerUpdatePlayerStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceUpdate;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2213[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Statistics;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdatePlayerStatisticsRequest) == 0x000008, "Wrong alignment on FServerUpdatePlayerStatisticsRequest");
static_assert(sizeof(FServerUpdatePlayerStatisticsRequest) == 0x000038, "Wrong size on FServerUpdatePlayerStatisticsRequest");
static_assert(offsetof(FServerUpdatePlayerStatisticsRequest, CustomTags) == 0x000008, "Member 'FServerUpdatePlayerStatisticsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUpdatePlayerStatisticsRequest, ForceUpdate) == 0x000010, "Member 'FServerUpdatePlayerStatisticsRequest::ForceUpdate' has a wrong offset!");
static_assert(offsetof(FServerUpdatePlayerStatisticsRequest, PlayFabId) == 0x000018, "Member 'FServerUpdatePlayerStatisticsRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerUpdatePlayerStatisticsRequest, Statistics) == 0x000028, "Member 'FServerUpdatePlayerStatisticsRequest::Statistics' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest
// 0x0018 (0x0020 - 0x0008)
struct FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MasterPlayerAccountIds;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest) == 0x000008, "Wrong alignment on FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest");
static_assert(sizeof(FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest) == 0x000020, "Wrong size on FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest");
static_assert(offsetof(FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest, CustomTags) == 0x000008, "Member 'FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest, MasterPlayerAccountIds) == 0x000010, "Member 'FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest::MasterPlayerAccountIds' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesGetTitlePlayersFromXboxLiveIDsRequest
// 0x0028 (0x0030 - 0x0008)
struct FProfilesGetTitlePlayersFromXboxLiveIDsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sandbox;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxLiveIds;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesGetTitlePlayersFromXboxLiveIDsRequest) == 0x000008, "Wrong alignment on FProfilesGetTitlePlayersFromXboxLiveIDsRequest");
static_assert(sizeof(FProfilesGetTitlePlayersFromXboxLiveIDsRequest) == 0x000030, "Wrong size on FProfilesGetTitlePlayersFromXboxLiveIDsRequest");
static_assert(offsetof(FProfilesGetTitlePlayersFromXboxLiveIDsRequest, CustomTags) == 0x000008, "Member 'FProfilesGetTitlePlayersFromXboxLiveIDsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FProfilesGetTitlePlayersFromXboxLiveIDsRequest, Sandbox) == 0x000010, "Member 'FProfilesGetTitlePlayersFromXboxLiveIDsRequest::Sandbox' has a wrong offset!");
static_assert(offsetof(FProfilesGetTitlePlayersFromXboxLiveIDsRequest, XboxLiveIds) == 0x000020, "Member 'FProfilesGetTitlePlayersFromXboxLiveIDsRequest::XboxLiveIds' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesSetGlobalPolicyRequest
// 0x0018 (0x0020 - 0x0008)
struct FProfilesSetGlobalPolicyRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Permissions;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesSetGlobalPolicyRequest) == 0x000008, "Wrong alignment on FProfilesSetGlobalPolicyRequest");
static_assert(sizeof(FProfilesSetGlobalPolicyRequest) == 0x000020, "Wrong size on FProfilesSetGlobalPolicyRequest");
static_assert(offsetof(FProfilesSetGlobalPolicyRequest, CustomTags) == 0x000008, "Member 'FProfilesSetGlobalPolicyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FProfilesSetGlobalPolicyRequest, Permissions) == 0x000010, "Member 'FProfilesSetGlobalPolicyRequest::Permissions' has a wrong offset!");

// ScriptStruct PlayFab.ServerSendPushNotificationFromTemplateRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerSendPushNotificationFromTemplateRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PushNotificationTemplateId;                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Recipient;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSendPushNotificationFromTemplateRequest) == 0x000008, "Wrong alignment on FServerSendPushNotificationFromTemplateRequest");
static_assert(sizeof(FServerSendPushNotificationFromTemplateRequest) == 0x000030, "Wrong size on FServerSendPushNotificationFromTemplateRequest");
static_assert(offsetof(FServerSendPushNotificationFromTemplateRequest, CustomTags) == 0x000008, "Member 'FServerSendPushNotificationFromTemplateRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerSendPushNotificationFromTemplateRequest, PushNotificationTemplateId) == 0x000010, "Member 'FServerSendPushNotificationFromTemplateRequest::PushNotificationTemplateId' has a wrong offset!");
static_assert(offsetof(FServerSendPushNotificationFromTemplateRequest, Recipient) == 0x000020, "Member 'FServerSendPushNotificationFromTemplateRequest::Recipient' has a wrong offset!");

// ScriptStruct PlayFab.ProfilesSetEntityProfilePolicyRequest
// 0x0020 (0x0028 - 0x0008)
struct FProfilesSetEntityProfilePolicyRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Entity;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Statements;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProfilesSetEntityProfilePolicyRequest) == 0x000008, "Wrong alignment on FProfilesSetEntityProfilePolicyRequest");
static_assert(sizeof(FProfilesSetEntityProfilePolicyRequest) == 0x000028, "Wrong size on FProfilesSetEntityProfilePolicyRequest");
static_assert(offsetof(FProfilesSetEntityProfilePolicyRequest, CustomTags) == 0x000008, "Member 'FProfilesSetEntityProfilePolicyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FProfilesSetEntityProfilePolicyRequest, Entity) == 0x000010, "Member 'FProfilesSetEntityProfilePolicyRequest::Entity' has a wrong offset!");
static_assert(offsetof(FProfilesSetEntityProfilePolicyRequest, Statements) == 0x000018, "Member 'FProfilesSetEntityProfilePolicyRequest::Statements' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetGameServerInstanceDataRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerSetGameServerInstanceDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 GameServerData;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSetGameServerInstanceDataRequest) == 0x000008, "Wrong alignment on FServerSetGameServerInstanceDataRequest");
static_assert(sizeof(FServerSetGameServerInstanceDataRequest) == 0x000028, "Wrong size on FServerSetGameServerInstanceDataRequest");
static_assert(offsetof(FServerSetGameServerInstanceDataRequest, GameServerData) == 0x000008, "Member 'FServerSetGameServerInstanceDataRequest::GameServerData' has a wrong offset!");
static_assert(offsetof(FServerSetGameServerInstanceDataRequest, LobbyId) == 0x000018, "Member 'FServerSetGameServerInstanceDataRequest::LobbyId' has a wrong offset!");

// ScriptStruct PlayFab.ServerModifyCharacterVirtualCurrencyResult
// 0x0018 (0x0020 - 0x0008)
struct FServerModifyCharacterVirtualCurrencyResult final : public FPlayFabResultCommon
{
public:
	int32                                         Balance;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2214[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VirtualCurrency;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerModifyCharacterVirtualCurrencyResult) == 0x000008, "Wrong alignment on FServerModifyCharacterVirtualCurrencyResult");
static_assert(sizeof(FServerModifyCharacterVirtualCurrencyResult) == 0x000020, "Wrong size on FServerModifyCharacterVirtualCurrencyResult");
static_assert(offsetof(FServerModifyCharacterVirtualCurrencyResult, Balance) == 0x000008, "Member 'FServerModifyCharacterVirtualCurrencyResult::Balance' has a wrong offset!");
static_assert(offsetof(FServerModifyCharacterVirtualCurrencyResult, VirtualCurrency) == 0x000010, "Member 'FServerModifyCharacterVirtualCurrencyResult::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ServerAddCharacterVirtualCurrencyRequest
// 0x0040 (0x0048 - 0x0008)
struct FServerAddCharacterVirtualCurrencyRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2215[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VirtualCurrency;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAddCharacterVirtualCurrencyRequest) == 0x000008, "Wrong alignment on FServerAddCharacterVirtualCurrencyRequest");
static_assert(sizeof(FServerAddCharacterVirtualCurrencyRequest) == 0x000048, "Wrong size on FServerAddCharacterVirtualCurrencyRequest");
static_assert(offsetof(FServerAddCharacterVirtualCurrencyRequest, Amount) == 0x000008, "Member 'FServerAddCharacterVirtualCurrencyRequest::Amount' has a wrong offset!");
static_assert(offsetof(FServerAddCharacterVirtualCurrencyRequest, CharacterId) == 0x000010, "Member 'FServerAddCharacterVirtualCurrencyRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerAddCharacterVirtualCurrencyRequest, CustomTags) == 0x000020, "Member 'FServerAddCharacterVirtualCurrencyRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerAddCharacterVirtualCurrencyRequest, PlayFabId) == 0x000028, "Member 'FServerAddCharacterVirtualCurrencyRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerAddCharacterVirtualCurrencyRequest, VirtualCurrency) == 0x000038, "Member 'FServerAddCharacterVirtualCurrencyRequest::VirtualCurrency' has a wrong offset!");

// ScriptStruct PlayFab.ServerEmptyResponse
// 0x0000 (0x0008 - 0x0008)
struct FServerEmptyResponse final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerEmptyResponse) == 0x000008, "Wrong alignment on FServerEmptyResponse");
static_assert(sizeof(FServerEmptyResponse) == 0x000008, "Wrong size on FServerEmptyResponse");

// ScriptStruct PlayFab.ServerEmptyResult
// 0x0000 (0x0008 - 0x0008)
struct FServerEmptyResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerEmptyResult) == 0x000008, "Wrong alignment on FServerEmptyResult");
static_assert(sizeof(FServerEmptyResult) == 0x000008, "Wrong size on FServerEmptyResult");

// ScriptStruct PlayFab.ServerAddPlayerTagRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerAddPlayerTagRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAddPlayerTagRequest) == 0x000008, "Wrong alignment on FServerAddPlayerTagRequest");
static_assert(sizeof(FServerAddPlayerTagRequest) == 0x000030, "Wrong size on FServerAddPlayerTagRequest");
static_assert(offsetof(FServerAddPlayerTagRequest, CustomTags) == 0x000008, "Member 'FServerAddPlayerTagRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerAddPlayerTagRequest, PlayFabId) == 0x000010, "Member 'FServerAddPlayerTagRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerAddPlayerTagRequest, TagName) == 0x000020, "Member 'FServerAddPlayerTagRequest::TagName' has a wrong offset!");

// ScriptStruct PlayFab.ServerAuthenticateSessionTicketResult
// 0x0010 (0x0018 - 0x0008)
struct FServerAuthenticateSessionTicketResult final : public FPlayFabResultCommon
{
public:
	bool                                          IsSessionTicketExpired;                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2216[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     UserInfo;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAuthenticateSessionTicketResult) == 0x000008, "Wrong alignment on FServerAuthenticateSessionTicketResult");
static_assert(sizeof(FServerAuthenticateSessionTicketResult) == 0x000018, "Wrong size on FServerAuthenticateSessionTicketResult");
static_assert(offsetof(FServerAuthenticateSessionTicketResult, IsSessionTicketExpired) == 0x000008, "Member 'FServerAuthenticateSessionTicketResult::IsSessionTicketExpired' has a wrong offset!");
static_assert(offsetof(FServerAuthenticateSessionTicketResult, UserInfo) == 0x000010, "Member 'FServerAuthenticateSessionTicketResult::UserInfo' has a wrong offset!");

// ScriptStruct PlayFab.ServerAwardSteamAchievementResult
// 0x0010 (0x0018 - 0x0008)
struct FServerAwardSteamAchievementResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             AchievementResults;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAwardSteamAchievementResult) == 0x000008, "Wrong alignment on FServerAwardSteamAchievementResult");
static_assert(sizeof(FServerAwardSteamAchievementResult) == 0x000018, "Wrong size on FServerAwardSteamAchievementResult");
static_assert(offsetof(FServerAwardSteamAchievementResult, AchievementResults) == 0x000008, "Member 'FServerAwardSteamAchievementResult::AchievementResults' has a wrong offset!");

// ScriptStruct PlayFab.ServerAwardSteamAchievementRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerAwardSteamAchievementRequest final : public FPlayFabRequestCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Achievements;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerAwardSteamAchievementRequest) == 0x000008, "Wrong alignment on FServerAwardSteamAchievementRequest");
static_assert(sizeof(FServerAwardSteamAchievementRequest) == 0x000018, "Wrong size on FServerAwardSteamAchievementRequest");
static_assert(offsetof(FServerAwardSteamAchievementRequest, Achievements) == 0x000008, "Member 'FServerAwardSteamAchievementRequest::Achievements' has a wrong offset!");

// ScriptStruct PlayFab.ServerWriteServerPlayerEventRequest
// 0x0040 (0x0048 - 0x0008)
struct FServerWriteServerPlayerEventRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Body;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerWriteServerPlayerEventRequest) == 0x000008, "Wrong alignment on FServerWriteServerPlayerEventRequest");
static_assert(sizeof(FServerWriteServerPlayerEventRequest) == 0x000048, "Wrong size on FServerWriteServerPlayerEventRequest");
static_assert(offsetof(FServerWriteServerPlayerEventRequest, Body) == 0x000008, "Member 'FServerWriteServerPlayerEventRequest::Body' has a wrong offset!");
static_assert(offsetof(FServerWriteServerPlayerEventRequest, CustomTags) == 0x000010, "Member 'FServerWriteServerPlayerEventRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerWriteServerPlayerEventRequest, EventName) == 0x000018, "Member 'FServerWriteServerPlayerEventRequest::EventName' has a wrong offset!");
static_assert(offsetof(FServerWriteServerPlayerEventRequest, PlayFabId) == 0x000028, "Member 'FServerWriteServerPlayerEventRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerWriteServerPlayerEventRequest, Timestamp) == 0x000038, "Member 'FServerWriteServerPlayerEventRequest::Timestamp' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCatalogItemsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetCatalogItemsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Catalog;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCatalogItemsResult) == 0x000008, "Wrong alignment on FServerGetCatalogItemsResult");
static_assert(sizeof(FServerGetCatalogItemsResult) == 0x000018, "Wrong size on FServerGetCatalogItemsResult");
static_assert(offsetof(FServerGetCatalogItemsResult, Catalog) == 0x000008, "Member 'FServerGetCatalogItemsResult::Catalog' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCharacterInventoryResult
// 0x0040 (0x0048 - 0x0008)
struct FServerGetCharacterInventoryResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             Inventory;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrency;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrencyRechargeTimes;                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCharacterInventoryResult) == 0x000008, "Wrong alignment on FServerGetCharacterInventoryResult");
static_assert(sizeof(FServerGetCharacterInventoryResult) == 0x000048, "Wrong size on FServerGetCharacterInventoryResult");
static_assert(offsetof(FServerGetCharacterInventoryResult, CharacterId) == 0x000008, "Member 'FServerGetCharacterInventoryResult::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterInventoryResult, Inventory) == 0x000018, "Member 'FServerGetCharacterInventoryResult::Inventory' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterInventoryResult, PlayFabId) == 0x000028, "Member 'FServerGetCharacterInventoryResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterInventoryResult, VirtualCurrency) == 0x000038, "Member 'FServerGetCharacterInventoryResult::VirtualCurrency' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterInventoryResult, VirtualCurrencyRechargeTimes) == 0x000040, "Member 'FServerGetCharacterInventoryResult::VirtualCurrencyRechargeTimes' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetContentDownloadUrlResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetContentDownloadUrlResult final : public FPlayFabResultCommon
{
public:
	class FString                                 URL;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetContentDownloadUrlResult) == 0x000008, "Wrong alignment on FServerGetContentDownloadUrlResult");
static_assert(sizeof(FServerGetContentDownloadUrlResult) == 0x000018, "Wrong size on FServerGetContentDownloadUrlResult");
static_assert(offsetof(FServerGetContentDownloadUrlResult, URL) == 0x000008, "Member 'FServerGetContentDownloadUrlResult::URL' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetLeaderboardResult
// 0x0028 (0x0030 - 0x0008)
struct FServerGetLeaderboardResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Leaderboard;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NextReset;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2217[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerGetLeaderboardResult) == 0x000008, "Wrong alignment on FServerGetLeaderboardResult");
static_assert(sizeof(FServerGetLeaderboardResult) == 0x000030, "Wrong size on FServerGetLeaderboardResult");
static_assert(offsetof(FServerGetLeaderboardResult, Leaderboard) == 0x000008, "Member 'FServerGetLeaderboardResult::Leaderboard' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardResult, NextReset) == 0x000018, "Member 'FServerGetLeaderboardResult::NextReset' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardResult, Version) == 0x000028, "Member 'FServerGetLeaderboardResult::Version' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerCombinedInfoResult
// 0x0018 (0x0020 - 0x0008)
struct FServerGetPlayerCombinedInfoResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     InfoResultPayload;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerCombinedInfoResult) == 0x000008, "Wrong alignment on FServerGetPlayerCombinedInfoResult");
static_assert(sizeof(FServerGetPlayerCombinedInfoResult) == 0x000020, "Wrong size on FServerGetPlayerCombinedInfoResult");
static_assert(offsetof(FServerGetPlayerCombinedInfoResult, InfoResultPayload) == 0x000008, "Member 'FServerGetPlayerCombinedInfoResult::InfoResultPayload' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerCombinedInfoResult, PlayFabId) == 0x000010, "Member 'FServerGetPlayerCombinedInfoResult::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerProfileResult
// 0x0008 (0x0010 - 0x0008)
struct FServerGetPlayerProfileResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     PlayerProfile;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerProfileResult) == 0x000008, "Wrong alignment on FServerGetPlayerProfileResult");
static_assert(sizeof(FServerGetPlayerProfileResult) == 0x000010, "Wrong size on FServerGetPlayerProfileResult");
static_assert(offsetof(FServerGetPlayerProfileResult, PlayerProfile) == 0x000008, "Member 'FServerGetPlayerProfileResult::PlayerProfile' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayersInSegmentResult
// 0x0028 (0x0030 - 0x0008)
struct FServerGetPlayersInSegmentResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ContinuationToken;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPlayFabJsonObject*>             PlayerProfiles;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ProfilesInSegment;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2218[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerGetPlayersInSegmentResult) == 0x000008, "Wrong alignment on FServerGetPlayersInSegmentResult");
static_assert(sizeof(FServerGetPlayersInSegmentResult) == 0x000030, "Wrong size on FServerGetPlayersInSegmentResult");
static_assert(offsetof(FServerGetPlayersInSegmentResult, ContinuationToken) == 0x000008, "Member 'FServerGetPlayersInSegmentResult::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FServerGetPlayersInSegmentResult, PlayerProfiles) == 0x000018, "Member 'FServerGetPlayersInSegmentResult::PlayerProfiles' has a wrong offset!");
static_assert(offsetof(FServerGetPlayersInSegmentResult, ProfilesInSegment) == 0x000028, "Member 'FServerGetPlayersInSegmentResult::ProfilesInSegment' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult");
static_assert(sizeof(FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult");
static_assert(offsetof(FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult, Data) == 0x000008, "Member 'FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromNintendoServiceAccountIdsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromNintendoServiceAccountIdsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromNintendoServiceAccountIdsResult) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromNintendoServiceAccountIdsResult");
static_assert(sizeof(FServerGetPlayFabIDsFromNintendoServiceAccountIdsResult) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromNintendoServiceAccountIdsResult");
static_assert(offsetof(FServerGetPlayFabIDsFromNintendoServiceAccountIdsResult, Data) == 0x000008, "Member 'FServerGetPlayFabIDsFromNintendoServiceAccountIdsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromPSNAccountIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromPSNAccountIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromPSNAccountIDsResult) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromPSNAccountIDsResult");
static_assert(sizeof(FServerGetPlayFabIDsFromPSNAccountIDsResult) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromPSNAccountIDsResult");
static_assert(offsetof(FServerGetPlayFabIDsFromPSNAccountIDsResult, Data) == 0x000008, "Member 'FServerGetPlayFabIDsFromPSNAccountIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromTwitchIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromTwitchIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromTwitchIDsResult) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromTwitchIDsResult");
static_assert(sizeof(FServerGetPlayFabIDsFromTwitchIDsResult) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromTwitchIDsResult");
static_assert(offsetof(FServerGetPlayFabIDsFromTwitchIDsResult, Data) == 0x000008, "Member 'FServerGetPlayFabIDsFromTwitchIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromXboxLiveIDsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromXboxLiveIDsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromXboxLiveIDsResult) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromXboxLiveIDsResult");
static_assert(sizeof(FServerGetPlayFabIDsFromXboxLiveIDsResult) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromXboxLiveIDsResult");
static_assert(offsetof(FServerGetPlayFabIDsFromXboxLiveIDsResult, Data) == 0x000008, "Member 'FServerGetPlayFabIDsFromXboxLiveIDsResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetRandomResultTablesResult
// 0x0008 (0x0010 - 0x0008)
struct FServerGetRandomResultTablesResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Tables;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetRandomResultTablesResult) == 0x000008, "Wrong alignment on FServerGetRandomResultTablesResult");
static_assert(sizeof(FServerGetRandomResultTablesResult) == 0x000010, "Wrong size on FServerGetRandomResultTablesResult");
static_assert(offsetof(FServerGetRandomResultTablesResult, Tables) == 0x000008, "Member 'FServerGetRandomResultTablesResult::Tables' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetTimeResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGetTimeResult final : public FPlayFabResultCommon
{
public:
	class FString                                 Time;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetTimeResult) == 0x000008, "Wrong alignment on FServerGetTimeResult");
static_assert(sizeof(FServerGetTimeResult) == 0x000018, "Wrong size on FServerGetTimeResult");
static_assert(offsetof(FServerGetTimeResult, Time) == 0x000008, "Member 'FServerGetTimeResult::Time' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetTitleDataResult
// 0x0008 (0x0010 - 0x0008)
struct FServerGetTitleDataResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     Data;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetTitleDataResult) == 0x000008, "Wrong alignment on FServerGetTitleDataResult");
static_assert(sizeof(FServerGetTitleDataResult) == 0x000010, "Wrong size on FServerGetTitleDataResult");
static_assert(offsetof(FServerGetTitleDataResult, Data) == 0x000008, "Member 'FServerGetTitleDataResult::Data' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetUserAccountInfoResult
// 0x0008 (0x0010 - 0x0008)
struct FServerGetUserAccountInfoResult final : public FPlayFabResultCommon
{
public:
	class UPlayFabJsonObject*                     UserInfo;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetUserAccountInfoResult) == 0x000008, "Wrong alignment on FServerGetUserAccountInfoResult");
static_assert(sizeof(FServerGetUserAccountInfoResult) == 0x000010, "Wrong size on FServerGetUserAccountInfoResult");
static_assert(offsetof(FServerGetUserAccountInfoResult, UserInfo) == 0x000008, "Member 'FServerGetUserAccountInfoResult::UserInfo' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetUserInventoryResult
// 0x0030 (0x0038 - 0x0008)
struct FServerGetUserInventoryResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Inventory;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrency;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     VirtualCurrencyRechargeTimes;                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetUserInventoryResult) == 0x000008, "Wrong alignment on FServerGetUserInventoryResult");
static_assert(sizeof(FServerGetUserInventoryResult) == 0x000038, "Wrong size on FServerGetUserInventoryResult");
static_assert(offsetof(FServerGetUserInventoryResult, Inventory) == 0x000008, "Member 'FServerGetUserInventoryResult::Inventory' has a wrong offset!");
static_assert(offsetof(FServerGetUserInventoryResult, PlayFabId) == 0x000018, "Member 'FServerGetUserInventoryResult::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetUserInventoryResult, VirtualCurrency) == 0x000028, "Member 'FServerGetUserInventoryResult::VirtualCurrency' has a wrong offset!");
static_assert(offsetof(FServerGetUserInventoryResult, VirtualCurrencyRechargeTimes) == 0x000030, "Member 'FServerGetUserInventoryResult::VirtualCurrencyRechargeTimes' has a wrong offset!");

// ScriptStruct PlayFab.ServerGrantCharacterToUserResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGrantCharacterToUserResult final : public FPlayFabResultCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGrantCharacterToUserResult) == 0x000008, "Wrong alignment on FServerGrantCharacterToUserResult");
static_assert(sizeof(FServerGrantCharacterToUserResult) == 0x000018, "Wrong size on FServerGrantCharacterToUserResult");
static_assert(offsetof(FServerGrantCharacterToUserResult, CharacterId) == 0x000008, "Member 'FServerGrantCharacterToUserResult::CharacterId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGrantItemsToCharacterResult
// 0x0010 (0x0018 - 0x0008)
struct FServerGrantItemsToCharacterResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             ItemGrantResults;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGrantItemsToCharacterResult) == 0x000008, "Wrong alignment on FServerGrantItemsToCharacterResult");
static_assert(sizeof(FServerGrantItemsToCharacterResult) == 0x000018, "Wrong size on FServerGrantItemsToCharacterResult");
static_assert(offsetof(FServerGrantItemsToCharacterResult, ItemGrantResults) == 0x000008, "Member 'FServerGrantItemsToCharacterResult::ItemGrantResults' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkNintendoSwitchDeviceIdResult
// 0x0000 (0x0008 - 0x0008)
struct FServerLinkNintendoSwitchDeviceIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerLinkNintendoSwitchDeviceIdResult) == 0x000008, "Wrong alignment on FServerLinkNintendoSwitchDeviceIdResult");
static_assert(sizeof(FServerLinkNintendoSwitchDeviceIdResult) == 0x000008, "Wrong size on FServerLinkNintendoSwitchDeviceIdResult");

// ScriptStruct PlayFab.ServerGetUserBansRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetUserBansRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetUserBansRequest) == 0x000008, "Wrong alignment on FServerGetUserBansRequest");
static_assert(sizeof(FServerGetUserBansRequest) == 0x000018, "Wrong size on FServerGetUserBansRequest");
static_assert(offsetof(FServerGetUserBansRequest, PlayFabId) == 0x000008, "Member 'FServerGetUserBansRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkServerCustomIdResult
// 0x0000 (0x0008 - 0x0008)
struct FServerLinkServerCustomIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerLinkServerCustomIdResult) == 0x000008, "Wrong alignment on FServerLinkServerCustomIdResult");
static_assert(sizeof(FServerLinkServerCustomIdResult) == 0x000008, "Wrong size on FServerLinkServerCustomIdResult");

// ScriptStruct PlayFab.ServerLinkSteamIdResult
// 0x0000 (0x0008 - 0x0008)
struct FServerLinkSteamIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerLinkSteamIdResult) == 0x000008, "Wrong alignment on FServerLinkSteamIdResult");
static_assert(sizeof(FServerLinkSteamIdResult) == 0x000008, "Wrong size on FServerLinkSteamIdResult");

// ScriptStruct PlayFab.ServerModifyItemUsesResult
// 0x0018 (0x0020 - 0x0008)
struct FServerModifyItemUsesResult final : public FPlayFabResultCommon
{
public:
	class FString                                 ItemInstanceId;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingUses;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2219[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerModifyItemUsesResult) == 0x000008, "Wrong alignment on FServerModifyItemUsesResult");
static_assert(sizeof(FServerModifyItemUsesResult) == 0x000020, "Wrong size on FServerModifyItemUsesResult");
static_assert(offsetof(FServerModifyItemUsesResult, ItemInstanceId) == 0x000008, "Member 'FServerModifyItemUsesResult::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerModifyItemUsesResult, RemainingUses) == 0x000018, "Member 'FServerModifyItemUsesResult::RemainingUses' has a wrong offset!");

// ScriptStruct PlayFab.ServerMoveItemToCharacterFromUserResult
// 0x0000 (0x0008 - 0x0008)
struct FServerMoveItemToCharacterFromUserResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerMoveItemToCharacterFromUserResult) == 0x000008, "Wrong alignment on FServerMoveItemToCharacterFromUserResult");
static_assert(sizeof(FServerMoveItemToCharacterFromUserResult) == 0x000008, "Wrong size on FServerMoveItemToCharacterFromUserResult");

// ScriptStruct PlayFab.ServerMoveItemToUserFromCharacterResult
// 0x0000 (0x0008 - 0x0008)
struct FServerMoveItemToUserFromCharacterResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerMoveItemToUserFromCharacterResult) == 0x000008, "Wrong alignment on FServerMoveItemToUserFromCharacterResult");
static_assert(sizeof(FServerMoveItemToUserFromCharacterResult) == 0x000008, "Wrong size on FServerMoveItemToUserFromCharacterResult");

// ScriptStruct PlayFab.ServerRedeemMatchmakerTicketResult
// 0x0020 (0x0028 - 0x0008)
struct FServerRedeemMatchmakerTicketResult final : public FPlayFabResultCommon
{
public:
	class FString                                 Error;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TicketIsValid;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     UserInfo;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRedeemMatchmakerTicketResult) == 0x000008, "Wrong alignment on FServerRedeemMatchmakerTicketResult");
static_assert(sizeof(FServerRedeemMatchmakerTicketResult) == 0x000028, "Wrong size on FServerRedeemMatchmakerTicketResult");
static_assert(offsetof(FServerRedeemMatchmakerTicketResult, Error) == 0x000008, "Member 'FServerRedeemMatchmakerTicketResult::Error' has a wrong offset!");
static_assert(offsetof(FServerRedeemMatchmakerTicketResult, TicketIsValid) == 0x000018, "Member 'FServerRedeemMatchmakerTicketResult::TicketIsValid' has a wrong offset!");
static_assert(offsetof(FServerRedeemMatchmakerTicketResult, UserInfo) == 0x000020, "Member 'FServerRedeemMatchmakerTicketResult::UserInfo' has a wrong offset!");

// ScriptStruct PlayFab.ServerRemoveSharedGroupMembersResult
// 0x0000 (0x0008 - 0x0008)
struct FServerRemoveSharedGroupMembersResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerRemoveSharedGroupMembersResult) == 0x000008, "Wrong alignment on FServerRemoveSharedGroupMembersResult");
static_assert(sizeof(FServerRemoveSharedGroupMembersResult) == 0x000008, "Wrong size on FServerRemoveSharedGroupMembersResult");

// ScriptStruct PlayFab.ServerRevokeAllBansForUserResult
// 0x0010 (0x0018 - 0x0008)
struct FServerRevokeAllBansForUserResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             BanData;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRevokeAllBansForUserResult) == 0x000008, "Wrong alignment on FServerRevokeAllBansForUserResult");
static_assert(sizeof(FServerRevokeAllBansForUserResult) == 0x000018, "Wrong size on FServerRevokeAllBansForUserResult");
static_assert(offsetof(FServerRevokeAllBansForUserResult, BanData) == 0x000008, "Member 'FServerRevokeAllBansForUserResult::BanData' has a wrong offset!");

// ScriptStruct PlayFab.ServerRevokeInventoryItemsResult
// 0x0010 (0x0018 - 0x0008)
struct FServerRevokeInventoryItemsResult final : public FPlayFabResultCommon
{
public:
	TArray<class UPlayFabJsonObject*>             Errors;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRevokeInventoryItemsResult) == 0x000008, "Wrong alignment on FServerRevokeInventoryItemsResult");
static_assert(sizeof(FServerRevokeInventoryItemsResult) == 0x000018, "Wrong size on FServerRevokeInventoryItemsResult");
static_assert(offsetof(FServerRevokeInventoryItemsResult, Errors) == 0x000008, "Member 'FServerRevokeInventoryItemsResult::Errors' has a wrong offset!");

// ScriptStruct PlayFab.ServerSendCustomAccountRecoveryEmailResult
// 0x0000 (0x0008 - 0x0008)
struct FServerSendCustomAccountRecoveryEmailResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerSendCustomAccountRecoveryEmailResult) == 0x000008, "Wrong alignment on FServerSendCustomAccountRecoveryEmailResult");
static_assert(sizeof(FServerSendCustomAccountRecoveryEmailResult) == 0x000008, "Wrong size on FServerSendCustomAccountRecoveryEmailResult");

// ScriptStruct PlayFab.ServerSendEmailFromTemplateResult
// 0x0000 (0x0008 - 0x0008)
struct FServerSendEmailFromTemplateResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerSendEmailFromTemplateResult) == 0x000008, "Wrong alignment on FServerSendEmailFromTemplateResult");
static_assert(sizeof(FServerSendEmailFromTemplateResult) == 0x000008, "Wrong size on FServerSendEmailFromTemplateResult");

// ScriptStruct PlayFab.ServerSendPushNotificationResult
// 0x0000 (0x0008 - 0x0008)
struct FServerSendPushNotificationResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerSendPushNotificationResult) == 0x000008, "Wrong alignment on FServerSendPushNotificationResult");
static_assert(sizeof(FServerSendPushNotificationResult) == 0x000008, "Wrong size on FServerSendPushNotificationResult");

// ScriptStruct PlayFab.ServerSetGameServerInstanceStateResult
// 0x0000 (0x0008 - 0x0008)
struct FServerSetGameServerInstanceStateResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerSetGameServerInstanceStateResult) == 0x000008, "Wrong alignment on FServerSetGameServerInstanceStateResult");
static_assert(sizeof(FServerSetGameServerInstanceStateResult) == 0x000008, "Wrong size on FServerSetGameServerInstanceStateResult");

// ScriptStruct PlayFab.ServerSetGameServerInstanceTagsResult
// 0x0000 (0x0008 - 0x0008)
struct FServerSetGameServerInstanceTagsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerSetGameServerInstanceTagsResult) == 0x000008, "Wrong alignment on FServerSetGameServerInstanceTagsResult");
static_assert(sizeof(FServerSetGameServerInstanceTagsResult) == 0x000008, "Wrong size on FServerSetGameServerInstanceTagsResult");

// ScriptStruct PlayFab.ServerUnlinkNintendoSwitchDeviceIdResult
// 0x0000 (0x0008 - 0x0008)
struct FServerUnlinkNintendoSwitchDeviceIdResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerUnlinkNintendoSwitchDeviceIdResult) == 0x000008, "Wrong alignment on FServerUnlinkNintendoSwitchDeviceIdResult");
static_assert(sizeof(FServerUnlinkNintendoSwitchDeviceIdResult) == 0x000008, "Wrong size on FServerUnlinkNintendoSwitchDeviceIdResult");

// ScriptStruct PlayFab.ServerUnlinkXboxAccountResult
// 0x0000 (0x0008 - 0x0008)
struct FServerUnlinkXboxAccountResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerUnlinkXboxAccountResult) == 0x000008, "Wrong alignment on FServerUnlinkXboxAccountResult");
static_assert(sizeof(FServerUnlinkXboxAccountResult) == 0x000008, "Wrong size on FServerUnlinkXboxAccountResult");

// ScriptStruct PlayFab.ServerUpdateCharacterDataResult
// 0x0008 (0x0010 - 0x0008)
struct FServerUpdateCharacterDataResult final : public FPlayFabResultCommon
{
public:
	int32                                         DataVersion;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221B[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerUpdateCharacterDataResult) == 0x000008, "Wrong alignment on FServerUpdateCharacterDataResult");
static_assert(sizeof(FServerUpdateCharacterDataResult) == 0x000010, "Wrong size on FServerUpdateCharacterDataResult");
static_assert(offsetof(FServerUpdateCharacterDataResult, DataVersion) == 0x000008, "Member 'FServerUpdateCharacterDataResult::DataVersion' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateCharacterStatisticsResult
// 0x0000 (0x0008 - 0x0008)
struct FServerUpdateCharacterStatisticsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerUpdateCharacterStatisticsResult) == 0x000008, "Wrong alignment on FServerUpdateCharacterStatisticsResult");
static_assert(sizeof(FServerUpdateCharacterStatisticsResult) == 0x000008, "Wrong size on FServerUpdateCharacterStatisticsResult");

// ScriptStruct PlayFab.ServerUpdatePlayerStatisticsResult
// 0x0000 (0x0008 - 0x0008)
struct FServerUpdatePlayerStatisticsResult final : public FPlayFabResultCommon
{
};
static_assert(alignof(FServerUpdatePlayerStatisticsResult) == 0x000008, "Wrong alignment on FServerUpdatePlayerStatisticsResult");
static_assert(sizeof(FServerUpdatePlayerStatisticsResult) == 0x000008, "Wrong size on FServerUpdatePlayerStatisticsResult");

// ScriptStruct PlayFab.ServerUpdateUserDataResult
// 0x0008 (0x0010 - 0x0008)
struct FServerUpdateUserDataResult final : public FPlayFabResultCommon
{
public:
	int32                                         DataVersion;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221C[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerUpdateUserDataResult) == 0x000008, "Wrong alignment on FServerUpdateUserDataResult");
static_assert(sizeof(FServerUpdateUserDataResult) == 0x000010, "Wrong size on FServerUpdateUserDataResult");
static_assert(offsetof(FServerUpdateUserDataResult, DataVersion) == 0x000008, "Member 'FServerUpdateUserDataResult::DataVersion' has a wrong offset!");

// ScriptStruct PlayFab.ServerWriteEventResponse
// 0x0010 (0x0018 - 0x0008)
struct FServerWriteEventResponse final : public FPlayFabResultCommon
{
public:
	class FString                                 EventId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerWriteEventResponse) == 0x000008, "Wrong alignment on FServerWriteEventResponse");
static_assert(sizeof(FServerWriteEventResponse) == 0x000018, "Wrong size on FServerWriteEventResponse");
static_assert(offsetof(FServerWriteEventResponse, EventId) == 0x000008, "Member 'FServerWriteEventResponse::EventId' has a wrong offset!");

// ScriptStruct PlayFab.ServerDeletePlayerRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerDeletePlayerRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerDeletePlayerRequest) == 0x000008, "Wrong alignment on FServerDeletePlayerRequest");
static_assert(sizeof(FServerDeletePlayerRequest) == 0x000018, "Wrong size on FServerDeletePlayerRequest");
static_assert(offsetof(FServerDeletePlayerRequest, PlayFabId) == 0x000008, "Member 'FServerDeletePlayerRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerEvaluateRandomResultTableRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerEvaluateRandomResultTableRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TableId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerEvaluateRandomResultTableRequest) == 0x000008, "Wrong alignment on FServerEvaluateRandomResultTableRequest");
static_assert(sizeof(FServerEvaluateRandomResultTableRequest) == 0x000028, "Wrong size on FServerEvaluateRandomResultTableRequest");
static_assert(offsetof(FServerEvaluateRandomResultTableRequest, CatalogVersion) == 0x000008, "Member 'FServerEvaluateRandomResultTableRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerEvaluateRandomResultTableRequest, TableId) == 0x000018, "Member 'FServerEvaluateRandomResultTableRequest::TableId' has a wrong offset!");

// ScriptStruct PlayFab.ServerExecuteCloudScriptServerRequest
// 0x0040 (0x0048 - 0x0008)
struct FServerExecuteCloudScriptServerRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     FunctionParameter;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GeneratePlayStreamEvent;                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudScriptRevisionOption                    RevisionSelection;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221E[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpecificRevision;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerExecuteCloudScriptServerRequest) == 0x000008, "Wrong alignment on FServerExecuteCloudScriptServerRequest");
static_assert(sizeof(FServerExecuteCloudScriptServerRequest) == 0x000048, "Wrong size on FServerExecuteCloudScriptServerRequest");
static_assert(offsetof(FServerExecuteCloudScriptServerRequest, CustomTags) == 0x000008, "Member 'FServerExecuteCloudScriptServerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptServerRequest, FunctionName) == 0x000010, "Member 'FServerExecuteCloudScriptServerRequest::FunctionName' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptServerRequest, FunctionParameter) == 0x000020, "Member 'FServerExecuteCloudScriptServerRequest::FunctionParameter' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptServerRequest, GeneratePlayStreamEvent) == 0x000028, "Member 'FServerExecuteCloudScriptServerRequest::GeneratePlayStreamEvent' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptServerRequest, PlayFabId) == 0x000030, "Member 'FServerExecuteCloudScriptServerRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptServerRequest, RevisionSelection) == 0x000040, "Member 'FServerExecuteCloudScriptServerRequest::RevisionSelection' has a wrong offset!");
static_assert(offsetof(FServerExecuteCloudScriptServerRequest, SpecificRevision) == 0x000044, "Member 'FServerExecuteCloudScriptServerRequest::SpecificRevision' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCatalogItemsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetCatalogItemsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCatalogItemsRequest) == 0x000008, "Wrong alignment on FServerGetCatalogItemsRequest");
static_assert(sizeof(FServerGetCatalogItemsRequest) == 0x000018, "Wrong size on FServerGetCatalogItemsRequest");
static_assert(offsetof(FServerGetCatalogItemsRequest, CatalogVersion) == 0x000008, "Member 'FServerGetCatalogItemsRequest::CatalogVersion' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCharacterDataRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerGetCharacterDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IfChangedFromDataVersion;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221F[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keys;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCharacterDataRequest) == 0x000008, "Wrong alignment on FServerGetCharacterDataRequest");
static_assert(sizeof(FServerGetCharacterDataRequest) == 0x000040, "Wrong size on FServerGetCharacterDataRequest");
static_assert(offsetof(FServerGetCharacterDataRequest, CharacterId) == 0x000008, "Member 'FServerGetCharacterDataRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterDataRequest, IfChangedFromDataVersion) == 0x000018, "Member 'FServerGetCharacterDataRequest::IfChangedFromDataVersion' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterDataRequest, Keys) == 0x000020, "Member 'FServerGetCharacterDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterDataRequest, PlayFabId) == 0x000030, "Member 'FServerGetCharacterDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetCharacterStatisticsRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerGetCharacterStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetCharacterStatisticsRequest) == 0x000008, "Wrong alignment on FServerGetCharacterStatisticsRequest");
static_assert(sizeof(FServerGetCharacterStatisticsRequest) == 0x000028, "Wrong size on FServerGetCharacterStatisticsRequest");
static_assert(offsetof(FServerGetCharacterStatisticsRequest, CharacterId) == 0x000008, "Member 'FServerGetCharacterStatisticsRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerGetCharacterStatisticsRequest, PlayFabId) == 0x000018, "Member 'FServerGetCharacterStatisticsRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetContentDownloadUrlRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerGetContentDownloadUrlRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 HttpMethod;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ThruCDN;                                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2220[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerGetContentDownloadUrlRequest) == 0x000008, "Wrong alignment on FServerGetContentDownloadUrlRequest");
static_assert(sizeof(FServerGetContentDownloadUrlRequest) == 0x000030, "Wrong size on FServerGetContentDownloadUrlRequest");
static_assert(offsetof(FServerGetContentDownloadUrlRequest, HttpMethod) == 0x000008, "Member 'FServerGetContentDownloadUrlRequest::HttpMethod' has a wrong offset!");
static_assert(offsetof(FServerGetContentDownloadUrlRequest, Key) == 0x000018, "Member 'FServerGetContentDownloadUrlRequest::Key' has a wrong offset!");
static_assert(offsetof(FServerGetContentDownloadUrlRequest, ThruCDN) == 0x000028, "Member 'FServerGetContentDownloadUrlRequest::ThruCDN' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetFriendLeaderboardRequest
// 0x0058 (0x0060 - 0x0008)
struct FServerGetFriendLeaderboardRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExternalFriendSources                        ExternalPlatformFriends;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2221[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxResultsCount;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPosition;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2222[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatisticName;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpecificVersion;                                // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2223[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetFriendLeaderboardRequest) == 0x000008, "Wrong alignment on FServerGetFriendLeaderboardRequest");
static_assert(sizeof(FServerGetFriendLeaderboardRequest) == 0x000060, "Wrong size on FServerGetFriendLeaderboardRequest");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, CustomTags) == 0x000008, "Member 'FServerGetFriendLeaderboardRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, ExternalPlatformFriends) == 0x000010, "Member 'FServerGetFriendLeaderboardRequest::ExternalPlatformFriends' has a wrong offset!");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, MaxResultsCount) == 0x000014, "Member 'FServerGetFriendLeaderboardRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, PlayFabId) == 0x000018, "Member 'FServerGetFriendLeaderboardRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, ProfileConstraints) == 0x000028, "Member 'FServerGetFriendLeaderboardRequest::ProfileConstraints' has a wrong offset!");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, StartPosition) == 0x000030, "Member 'FServerGetFriendLeaderboardRequest::StartPosition' has a wrong offset!");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, StatisticName) == 0x000038, "Member 'FServerGetFriendLeaderboardRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, UseSpecificVersion) == 0x000048, "Member 'FServerGetFriendLeaderboardRequest::UseSpecificVersion' has a wrong offset!");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, Version) == 0x00004C, "Member 'FServerGetFriendLeaderboardRequest::Version' has a wrong offset!");
static_assert(offsetof(FServerGetFriendLeaderboardRequest, XboxToken) == 0x000050, "Member 'FServerGetFriendLeaderboardRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetLeaderboardAroundCharacterRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerGetLeaderboardAroundCharacterRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResultsCount;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2224[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetLeaderboardAroundCharacterRequest) == 0x000008, "Wrong alignment on FServerGetLeaderboardAroundCharacterRequest");
static_assert(sizeof(FServerGetLeaderboardAroundCharacterRequest) == 0x000040, "Wrong size on FServerGetLeaderboardAroundCharacterRequest");
static_assert(offsetof(FServerGetLeaderboardAroundCharacterRequest, CharacterId) == 0x000008, "Member 'FServerGetLeaderboardAroundCharacterRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundCharacterRequest, MaxResultsCount) == 0x000018, "Member 'FServerGetLeaderboardAroundCharacterRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundCharacterRequest, PlayFabId) == 0x000020, "Member 'FServerGetLeaderboardAroundCharacterRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundCharacterRequest, StatisticName) == 0x000030, "Member 'FServerGetLeaderboardAroundCharacterRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetLeaderboardAroundUserRequest
// 0x0040 (0x0048 - 0x0008)
struct FServerGetLeaderboardAroundUserRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResultsCount;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2225[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     ProfileConstraints;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpecificVersion;                                // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2226[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Version;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetLeaderboardAroundUserRequest) == 0x000008, "Wrong alignment on FServerGetLeaderboardAroundUserRequest");
static_assert(sizeof(FServerGetLeaderboardAroundUserRequest) == 0x000048, "Wrong size on FServerGetLeaderboardAroundUserRequest");
static_assert(offsetof(FServerGetLeaderboardAroundUserRequest, CustomTags) == 0x000008, "Member 'FServerGetLeaderboardAroundUserRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundUserRequest, MaxResultsCount) == 0x000010, "Member 'FServerGetLeaderboardAroundUserRequest::MaxResultsCount' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundUserRequest, PlayFabId) == 0x000018, "Member 'FServerGetLeaderboardAroundUserRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundUserRequest, ProfileConstraints) == 0x000028, "Member 'FServerGetLeaderboardAroundUserRequest::ProfileConstraints' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundUserRequest, StatisticName) == 0x000030, "Member 'FServerGetLeaderboardAroundUserRequest::StatisticName' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundUserRequest, UseSpecificVersion) == 0x000040, "Member 'FServerGetLeaderboardAroundUserRequest::UseSpecificVersion' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardAroundUserRequest, Version) == 0x000044, "Member 'FServerGetLeaderboardAroundUserRequest::Version' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetLeaderboardForUsersCharactersRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerGetLeaderboardForUsersCharactersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetLeaderboardForUsersCharactersRequest) == 0x000008, "Wrong alignment on FServerGetLeaderboardForUsersCharactersRequest");
static_assert(sizeof(FServerGetLeaderboardForUsersCharactersRequest) == 0x000028, "Wrong size on FServerGetLeaderboardForUsersCharactersRequest");
static_assert(offsetof(FServerGetLeaderboardForUsersCharactersRequest, PlayFabId) == 0x000008, "Member 'FServerGetLeaderboardForUsersCharactersRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerGetLeaderboardForUsersCharactersRequest, StatisticName) == 0x000018, "Member 'FServerGetLeaderboardForUsersCharactersRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayerStatisticVersionsRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerGetPlayerStatisticVersionsRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatisticName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayerStatisticVersionsRequest) == 0x000008, "Wrong alignment on FServerGetPlayerStatisticVersionsRequest");
static_assert(sizeof(FServerGetPlayerStatisticVersionsRequest) == 0x000020, "Wrong size on FServerGetPlayerStatisticVersionsRequest");
static_assert(offsetof(FServerGetPlayerStatisticVersionsRequest, CustomTags) == 0x000008, "Member 'FServerGetPlayerStatisticVersionsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGetPlayerStatisticVersionsRequest, StatisticName) == 0x000010, "Member 'FServerGetPlayerStatisticVersionsRequest::StatisticName' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 FacebookInstantGamesIds;                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest");
static_assert(sizeof(FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest");
static_assert(offsetof(FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest, FacebookInstantGamesIds) == 0x000008, "Member 'FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest::FacebookInstantGamesIds' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromNintendoServiceAccountIdsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetPlayFabIDsFromNintendoServiceAccountIdsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 NintendoAccountIds;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromNintendoServiceAccountIdsRequest) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromNintendoServiceAccountIdsRequest");
static_assert(sizeof(FServerGetPlayFabIDsFromNintendoServiceAccountIdsRequest) == 0x000018, "Wrong size on FServerGetPlayFabIDsFromNintendoServiceAccountIdsRequest");
static_assert(offsetof(FServerGetPlayFabIDsFromNintendoServiceAccountIdsRequest, NintendoAccountIds) == 0x000008, "Member 'FServerGetPlayFabIDsFromNintendoServiceAccountIdsRequest::NintendoAccountIds' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromPSNAccountIDsRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerGetPlayFabIDsFromPSNAccountIDsRequest final : public FPlayFabRequestCommon
{
public:
	int32                                         IssuerId;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2227[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PSNAccountIDs;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromPSNAccountIDsRequest) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromPSNAccountIDsRequest");
static_assert(sizeof(FServerGetPlayFabIDsFromPSNAccountIDsRequest) == 0x000020, "Wrong size on FServerGetPlayFabIDsFromPSNAccountIDsRequest");
static_assert(offsetof(FServerGetPlayFabIDsFromPSNAccountIDsRequest, IssuerId) == 0x000008, "Member 'FServerGetPlayFabIDsFromPSNAccountIDsRequest::IssuerId' has a wrong offset!");
static_assert(offsetof(FServerGetPlayFabIDsFromPSNAccountIDsRequest, PSNAccountIDs) == 0x000010, "Member 'FServerGetPlayFabIDsFromPSNAccountIDsRequest::PSNAccountIDs' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetPlayFabIDsFromXboxLiveIDsRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerGetPlayFabIDsFromXboxLiveIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Sandbox;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxLiveAccountIDs;                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetPlayFabIDsFromXboxLiveIDsRequest) == 0x000008, "Wrong alignment on FServerGetPlayFabIDsFromXboxLiveIDsRequest");
static_assert(sizeof(FServerGetPlayFabIDsFromXboxLiveIDsRequest) == 0x000028, "Wrong size on FServerGetPlayFabIDsFromXboxLiveIDsRequest");
static_assert(offsetof(FServerGetPlayFabIDsFromXboxLiveIDsRequest, Sandbox) == 0x000008, "Member 'FServerGetPlayFabIDsFromXboxLiveIDsRequest::Sandbox' has a wrong offset!");
static_assert(offsetof(FServerGetPlayFabIDsFromXboxLiveIDsRequest, XboxLiveAccountIDs) == 0x000018, "Member 'FServerGetPlayFabIDsFromXboxLiveIDsRequest::XboxLiveAccountIDs' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetServerCustomIDsFromPlayFabIDsRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetServerCustomIDsFromPlayFabIDsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabIds;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetServerCustomIDsFromPlayFabIDsRequest) == 0x000008, "Wrong alignment on FServerGetServerCustomIDsFromPlayFabIDsRequest");
static_assert(sizeof(FServerGetServerCustomIDsFromPlayFabIDsRequest) == 0x000018, "Wrong size on FServerGetServerCustomIDsFromPlayFabIDsRequest");
static_assert(offsetof(FServerGetServerCustomIDsFromPlayFabIDsRequest, PlayFabIds) == 0x000008, "Member 'FServerGetServerCustomIDsFromPlayFabIDsRequest::PlayFabIds' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetSharedGroupDataRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerGetSharedGroupDataRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          GetMembers;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2228[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Keys;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SharedGroupId;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetSharedGroupDataRequest) == 0x000008, "Wrong alignment on FServerGetSharedGroupDataRequest");
static_assert(sizeof(FServerGetSharedGroupDataRequest) == 0x000030, "Wrong size on FServerGetSharedGroupDataRequest");
static_assert(offsetof(FServerGetSharedGroupDataRequest, GetMembers) == 0x000008, "Member 'FServerGetSharedGroupDataRequest::GetMembers' has a wrong offset!");
static_assert(offsetof(FServerGetSharedGroupDataRequest, Keys) == 0x000010, "Member 'FServerGetSharedGroupDataRequest::Keys' has a wrong offset!");
static_assert(offsetof(FServerGetSharedGroupDataRequest, SharedGroupId) == 0x000020, "Member 'FServerGetSharedGroupDataRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGetUserAccountInfoRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerGetUserAccountInfoRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabId;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGetUserAccountInfoRequest) == 0x000008, "Wrong alignment on FServerGetUserAccountInfoRequest");
static_assert(sizeof(FServerGetUserAccountInfoRequest) == 0x000018, "Wrong size on FServerGetUserAccountInfoRequest");
static_assert(offsetof(FServerGetUserAccountInfoRequest, PlayFabId) == 0x000008, "Member 'FServerGetUserAccountInfoRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerGrantCharacterToUserRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerGrantCharacterToUserRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterName;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterType;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerGrantCharacterToUserRequest) == 0x000008, "Wrong alignment on FServerGrantCharacterToUserRequest");
static_assert(sizeof(FServerGrantCharacterToUserRequest) == 0x000040, "Wrong size on FServerGrantCharacterToUserRequest");
static_assert(offsetof(FServerGrantCharacterToUserRequest, CharacterName) == 0x000008, "Member 'FServerGrantCharacterToUserRequest::CharacterName' has a wrong offset!");
static_assert(offsetof(FServerGrantCharacterToUserRequest, CharacterType) == 0x000018, "Member 'FServerGrantCharacterToUserRequest::CharacterType' has a wrong offset!");
static_assert(offsetof(FServerGrantCharacterToUserRequest, CustomTags) == 0x000028, "Member 'FServerGrantCharacterToUserRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerGrantCharacterToUserRequest, PlayFabId) == 0x000030, "Member 'FServerGrantCharacterToUserRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkNintendoSwitchDeviceIdRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerLinkNintendoSwitchDeviceIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2229[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NintendoSwitchDeviceId;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLinkNintendoSwitchDeviceIdRequest) == 0x000008, "Wrong alignment on FServerLinkNintendoSwitchDeviceIdRequest");
static_assert(sizeof(FServerLinkNintendoSwitchDeviceIdRequest) == 0x000038, "Wrong size on FServerLinkNintendoSwitchDeviceIdRequest");
static_assert(offsetof(FServerLinkNintendoSwitchDeviceIdRequest, CustomTags) == 0x000008, "Member 'FServerLinkNintendoSwitchDeviceIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLinkNintendoSwitchDeviceIdRequest, ForceLink) == 0x000010, "Member 'FServerLinkNintendoSwitchDeviceIdRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FServerLinkNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId) == 0x000018, "Member 'FServerLinkNintendoSwitchDeviceIdRequest::NintendoSwitchDeviceId' has a wrong offset!");
static_assert(offsetof(FServerLinkNintendoSwitchDeviceIdRequest, PlayFabId) == 0x000028, "Member 'FServerLinkNintendoSwitchDeviceIdRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkPSNAccountRequest
// 0x0040 (0x0048 - 0x0008)
struct FServerLinkPSNAccountRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AuthCode;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222A[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IssuerId;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUri;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLinkPSNAccountRequest) == 0x000008, "Wrong alignment on FServerLinkPSNAccountRequest");
static_assert(sizeof(FServerLinkPSNAccountRequest) == 0x000048, "Wrong size on FServerLinkPSNAccountRequest");
static_assert(offsetof(FServerLinkPSNAccountRequest, AuthCode) == 0x000008, "Member 'FServerLinkPSNAccountRequest::AuthCode' has a wrong offset!");
static_assert(offsetof(FServerLinkPSNAccountRequest, CustomTags) == 0x000018, "Member 'FServerLinkPSNAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLinkPSNAccountRequest, ForceLink) == 0x000020, "Member 'FServerLinkPSNAccountRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FServerLinkPSNAccountRequest, IssuerId) == 0x000024, "Member 'FServerLinkPSNAccountRequest::IssuerId' has a wrong offset!");
static_assert(offsetof(FServerLinkPSNAccountRequest, PlayFabId) == 0x000028, "Member 'FServerLinkPSNAccountRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerLinkPSNAccountRequest, RedirectUri) == 0x000038, "Member 'FServerLinkPSNAccountRequest::RedirectUri' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkServerCustomIdRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerLinkServerCustomIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerCustomId;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLinkServerCustomIdRequest) == 0x000008, "Wrong alignment on FServerLinkServerCustomIdRequest");
static_assert(sizeof(FServerLinkServerCustomIdRequest) == 0x000038, "Wrong size on FServerLinkServerCustomIdRequest");
static_assert(offsetof(FServerLinkServerCustomIdRequest, CustomTags) == 0x000008, "Member 'FServerLinkServerCustomIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLinkServerCustomIdRequest, ForceLink) == 0x000010, "Member 'FServerLinkServerCustomIdRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FServerLinkServerCustomIdRequest, PlayFabId) == 0x000018, "Member 'FServerLinkServerCustomIdRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerLinkServerCustomIdRequest, ServerCustomId) == 0x000028, "Member 'FServerLinkServerCustomIdRequest::ServerCustomId' has a wrong offset!");

// ScriptStruct PlayFab.ServerLinkSteamIdRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerLinkSteamIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLink;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLinkSteamIdRequest) == 0x000008, "Wrong alignment on FServerLinkSteamIdRequest");
static_assert(sizeof(FServerLinkSteamIdRequest) == 0x000038, "Wrong size on FServerLinkSteamIdRequest");
static_assert(offsetof(FServerLinkSteamIdRequest, CustomTags) == 0x000008, "Member 'FServerLinkSteamIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLinkSteamIdRequest, ForceLink) == 0x000010, "Member 'FServerLinkSteamIdRequest::ForceLink' has a wrong offset!");
static_assert(offsetof(FServerLinkSteamIdRequest, PlayFabId) == 0x000018, "Member 'FServerLinkSteamIdRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerLinkSteamIdRequest, SteamID) == 0x000028, "Member 'FServerLinkSteamIdRequest::SteamID' has a wrong offset!");

// ScriptStruct PlayFab.ServerLoginWithSteamIdRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerLoginWithSteamIdRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamID;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLoginWithSteamIdRequest) == 0x000008, "Wrong alignment on FServerLoginWithSteamIdRequest");
static_assert(sizeof(FServerLoginWithSteamIdRequest) == 0x000030, "Wrong size on FServerLoginWithSteamIdRequest");
static_assert(offsetof(FServerLoginWithSteamIdRequest, CreateAccount) == 0x000008, "Member 'FServerLoginWithSteamIdRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FServerLoginWithSteamIdRequest, CustomTags) == 0x000010, "Member 'FServerLoginWithSteamIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLoginWithSteamIdRequest, InfoRequestParameters) == 0x000018, "Member 'FServerLoginWithSteamIdRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FServerLoginWithSteamIdRequest, SteamID) == 0x000020, "Member 'FServerLoginWithSteamIdRequest::SteamID' has a wrong offset!");

// ScriptStruct PlayFab.ServerLoginWithXboxRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerLoginWithXboxRequest final : public FPlayFabRequestCommon
{
public:
	bool                                          CreateAccount;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     InfoRequestParameters;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 XboxToken;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerLoginWithXboxRequest) == 0x000008, "Wrong alignment on FServerLoginWithXboxRequest");
static_assert(sizeof(FServerLoginWithXboxRequest) == 0x000030, "Wrong size on FServerLoginWithXboxRequest");
static_assert(offsetof(FServerLoginWithXboxRequest, CreateAccount) == 0x000008, "Member 'FServerLoginWithXboxRequest::CreateAccount' has a wrong offset!");
static_assert(offsetof(FServerLoginWithXboxRequest, CustomTags) == 0x000010, "Member 'FServerLoginWithXboxRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerLoginWithXboxRequest, InfoRequestParameters) == 0x000018, "Member 'FServerLoginWithXboxRequest::InfoRequestParameters' has a wrong offset!");
static_assert(offsetof(FServerLoginWithXboxRequest, XboxToken) == 0x000020, "Member 'FServerLoginWithXboxRequest::XboxToken' has a wrong offset!");

// ScriptStruct PlayFab.ServerMoveItemToCharacterFromCharacterRequest
// 0x0040 (0x0048 - 0x0008)
struct FServerMoveItemToCharacterFromCharacterRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 GivingCharacterId;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemInstanceId;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceivingCharacterId;                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMoveItemToCharacterFromCharacterRequest) == 0x000008, "Wrong alignment on FServerMoveItemToCharacterFromCharacterRequest");
static_assert(sizeof(FServerMoveItemToCharacterFromCharacterRequest) == 0x000048, "Wrong size on FServerMoveItemToCharacterFromCharacterRequest");
static_assert(offsetof(FServerMoveItemToCharacterFromCharacterRequest, GivingCharacterId) == 0x000008, "Member 'FServerMoveItemToCharacterFromCharacterRequest::GivingCharacterId' has a wrong offset!");
static_assert(offsetof(FServerMoveItemToCharacterFromCharacterRequest, ItemInstanceId) == 0x000018, "Member 'FServerMoveItemToCharacterFromCharacterRequest::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerMoveItemToCharacterFromCharacterRequest, PlayFabId) == 0x000028, "Member 'FServerMoveItemToCharacterFromCharacterRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerMoveItemToCharacterFromCharacterRequest, ReceivingCharacterId) == 0x000038, "Member 'FServerMoveItemToCharacterFromCharacterRequest::ReceivingCharacterId' has a wrong offset!");

// ScriptStruct PlayFab.ServerMoveItemToUserFromCharacterRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerMoveItemToUserFromCharacterRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemInstanceId;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMoveItemToUserFromCharacterRequest) == 0x000008, "Wrong alignment on FServerMoveItemToUserFromCharacterRequest");
static_assert(sizeof(FServerMoveItemToUserFromCharacterRequest) == 0x000038, "Wrong size on FServerMoveItemToUserFromCharacterRequest");
static_assert(offsetof(FServerMoveItemToUserFromCharacterRequest, CharacterId) == 0x000008, "Member 'FServerMoveItemToUserFromCharacterRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerMoveItemToUserFromCharacterRequest, ItemInstanceId) == 0x000018, "Member 'FServerMoveItemToUserFromCharacterRequest::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerMoveItemToUserFromCharacterRequest, PlayFabId) == 0x000028, "Member 'FServerMoveItemToUserFromCharacterRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerRefreshGameServerInstanceHeartbeatRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerRefreshGameServerInstanceHeartbeatRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 LobbyId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRefreshGameServerInstanceHeartbeatRequest) == 0x000008, "Wrong alignment on FServerRefreshGameServerInstanceHeartbeatRequest");
static_assert(sizeof(FServerRefreshGameServerInstanceHeartbeatRequest) == 0x000018, "Wrong size on FServerRefreshGameServerInstanceHeartbeatRequest");
static_assert(offsetof(FServerRefreshGameServerInstanceHeartbeatRequest, LobbyId) == 0x000008, "Member 'FServerRefreshGameServerInstanceHeartbeatRequest::LobbyId' has a wrong offset!");

// ScriptStruct PlayFab.ServerRegisterGameRequest
// 0x0088 (0x0090 - 0x0008)
struct FServerRegisterGameRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Build;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERegion                                       Region;                                            // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222F[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerIPV4Address;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerIPV6Address;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerPort;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerPublicDNSName;                               // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Tags;                                              // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRegisterGameRequest) == 0x000008, "Wrong alignment on FServerRegisterGameRequest");
static_assert(sizeof(FServerRegisterGameRequest) == 0x000090, "Wrong size on FServerRegisterGameRequest");
static_assert(offsetof(FServerRegisterGameRequest, Build) == 0x000008, "Member 'FServerRegisterGameRequest::Build' has a wrong offset!");
static_assert(offsetof(FServerRegisterGameRequest, CustomTags) == 0x000018, "Member 'FServerRegisterGameRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerRegisterGameRequest, GameMode) == 0x000020, "Member 'FServerRegisterGameRequest::GameMode' has a wrong offset!");
static_assert(offsetof(FServerRegisterGameRequest, LobbyId) == 0x000030, "Member 'FServerRegisterGameRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FServerRegisterGameRequest, Region) == 0x000040, "Member 'FServerRegisterGameRequest::Region' has a wrong offset!");
static_assert(offsetof(FServerRegisterGameRequest, ServerIPV4Address) == 0x000048, "Member 'FServerRegisterGameRequest::ServerIPV4Address' has a wrong offset!");
static_assert(offsetof(FServerRegisterGameRequest, ServerIPV6Address) == 0x000058, "Member 'FServerRegisterGameRequest::ServerIPV6Address' has a wrong offset!");
static_assert(offsetof(FServerRegisterGameRequest, ServerPort) == 0x000068, "Member 'FServerRegisterGameRequest::ServerPort' has a wrong offset!");
static_assert(offsetof(FServerRegisterGameRequest, ServerPublicDNSName) == 0x000078, "Member 'FServerRegisterGameRequest::ServerPublicDNSName' has a wrong offset!");
static_assert(offsetof(FServerRegisterGameRequest, Tags) == 0x000088, "Member 'FServerRegisterGameRequest::Tags' has a wrong offset!");

// ScriptStruct PlayFab.ServerRemoveGenericIDRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerRemoveGenericIDRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     GenericId;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRemoveGenericIDRequest) == 0x000008, "Wrong alignment on FServerRemoveGenericIDRequest");
static_assert(sizeof(FServerRemoveGenericIDRequest) == 0x000020, "Wrong size on FServerRemoveGenericIDRequest");
static_assert(offsetof(FServerRemoveGenericIDRequest, GenericId) == 0x000008, "Member 'FServerRemoveGenericIDRequest::GenericId' has a wrong offset!");
static_assert(offsetof(FServerRemoveGenericIDRequest, PlayFabId) == 0x000010, "Member 'FServerRemoveGenericIDRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerRemovePlayerTagRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerRemovePlayerTagRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TagName;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRemovePlayerTagRequest) == 0x000008, "Wrong alignment on FServerRemovePlayerTagRequest");
static_assert(sizeof(FServerRemovePlayerTagRequest) == 0x000030, "Wrong size on FServerRemovePlayerTagRequest");
static_assert(offsetof(FServerRemovePlayerTagRequest, CustomTags) == 0x000008, "Member 'FServerRemovePlayerTagRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerRemovePlayerTagRequest, PlayFabId) == 0x000010, "Member 'FServerRemovePlayerTagRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerRemovePlayerTagRequest, TagName) == 0x000020, "Member 'FServerRemovePlayerTagRequest::TagName' has a wrong offset!");

// ScriptStruct PlayFab.ServerRemoveSharedGroupMembersRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerRemoveSharedGroupMembersRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayFabIds;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SharedGroupId;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRemoveSharedGroupMembersRequest) == 0x000008, "Wrong alignment on FServerRemoveSharedGroupMembersRequest");
static_assert(sizeof(FServerRemoveSharedGroupMembersRequest) == 0x000028, "Wrong size on FServerRemoveSharedGroupMembersRequest");
static_assert(offsetof(FServerRemoveSharedGroupMembersRequest, PlayFabIds) == 0x000008, "Member 'FServerRemoveSharedGroupMembersRequest::PlayFabIds' has a wrong offset!");
static_assert(offsetof(FServerRemoveSharedGroupMembersRequest, SharedGroupId) == 0x000018, "Member 'FServerRemoveSharedGroupMembersRequest::SharedGroupId' has a wrong offset!");

// ScriptStruct PlayFab.ServerReportPlayerServerRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerReportPlayerServerRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Comment;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReporteeId;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReporterId;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerReportPlayerServerRequest) == 0x000008, "Wrong alignment on FServerReportPlayerServerRequest");
static_assert(sizeof(FServerReportPlayerServerRequest) == 0x000040, "Wrong size on FServerReportPlayerServerRequest");
static_assert(offsetof(FServerReportPlayerServerRequest, Comment) == 0x000008, "Member 'FServerReportPlayerServerRequest::Comment' has a wrong offset!");
static_assert(offsetof(FServerReportPlayerServerRequest, CustomTags) == 0x000018, "Member 'FServerReportPlayerServerRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerReportPlayerServerRequest, ReporteeId) == 0x000020, "Member 'FServerReportPlayerServerRequest::ReporteeId' has a wrong offset!");
static_assert(offsetof(FServerReportPlayerServerRequest, ReporterId) == 0x000030, "Member 'FServerReportPlayerServerRequest::ReporterId' has a wrong offset!");

// ScriptStruct PlayFab.ServerRevokeBansRequest
// 0x0010 (0x0018 - 0x0008)
struct FServerRevokeBansRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 BanIds;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerRevokeBansRequest) == 0x000008, "Wrong alignment on FServerRevokeBansRequest");
static_assert(sizeof(FServerRevokeBansRequest) == 0x000018, "Wrong size on FServerRevokeBansRequest");
static_assert(offsetof(FServerRevokeBansRequest, BanIds) == 0x000008, "Member 'FServerRevokeBansRequest::BanIds' has a wrong offset!");

// ScriptStruct PlayFab.ServerSavePushNotificationTemplateRequest
// 0x0048 (0x0050 - 0x0008)
struct FServerSavePushNotificationTemplateRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 AndroidPayload;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IOSPayload;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     LocalizedPushNotificationTemplates;                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSavePushNotificationTemplateRequest) == 0x000008, "Wrong alignment on FServerSavePushNotificationTemplateRequest");
static_assert(sizeof(FServerSavePushNotificationTemplateRequest) == 0x000050, "Wrong size on FServerSavePushNotificationTemplateRequest");
static_assert(offsetof(FServerSavePushNotificationTemplateRequest, AndroidPayload) == 0x000008, "Member 'FServerSavePushNotificationTemplateRequest::AndroidPayload' has a wrong offset!");
static_assert(offsetof(FServerSavePushNotificationTemplateRequest, ID) == 0x000018, "Member 'FServerSavePushNotificationTemplateRequest::ID' has a wrong offset!");
static_assert(offsetof(FServerSavePushNotificationTemplateRequest, IOSPayload) == 0x000028, "Member 'FServerSavePushNotificationTemplateRequest::IOSPayload' has a wrong offset!");
static_assert(offsetof(FServerSavePushNotificationTemplateRequest, LocalizedPushNotificationTemplates) == 0x000038, "Member 'FServerSavePushNotificationTemplateRequest::LocalizedPushNotificationTemplates' has a wrong offset!");
static_assert(offsetof(FServerSavePushNotificationTemplateRequest, Name) == 0x000040, "Member 'FServerSavePushNotificationTemplateRequest::Name' has a wrong offset!");

// ScriptStruct PlayFab.ServerSendCustomAccountRecoveryEmailRequest
// 0x0038 (0x0040 - 0x0008)
struct FServerSendCustomAccountRecoveryEmailRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailTemplateId;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Username;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSendCustomAccountRecoveryEmailRequest) == 0x000008, "Wrong alignment on FServerSendCustomAccountRecoveryEmailRequest");
static_assert(sizeof(FServerSendCustomAccountRecoveryEmailRequest) == 0x000040, "Wrong size on FServerSendCustomAccountRecoveryEmailRequest");
static_assert(offsetof(FServerSendCustomAccountRecoveryEmailRequest, CustomTags) == 0x000008, "Member 'FServerSendCustomAccountRecoveryEmailRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerSendCustomAccountRecoveryEmailRequest, Email) == 0x000010, "Member 'FServerSendCustomAccountRecoveryEmailRequest::Email' has a wrong offset!");
static_assert(offsetof(FServerSendCustomAccountRecoveryEmailRequest, EmailTemplateId) == 0x000020, "Member 'FServerSendCustomAccountRecoveryEmailRequest::EmailTemplateId' has a wrong offset!");
static_assert(offsetof(FServerSendCustomAccountRecoveryEmailRequest, Username) == 0x000030, "Member 'FServerSendCustomAccountRecoveryEmailRequest::Username' has a wrong offset!");

// ScriptStruct PlayFab.ServerSendEmailFromTemplateRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerSendEmailFromTemplateRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmailTemplateId;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSendEmailFromTemplateRequest) == 0x000008, "Wrong alignment on FServerSendEmailFromTemplateRequest");
static_assert(sizeof(FServerSendEmailFromTemplateRequest) == 0x000030, "Wrong size on FServerSendEmailFromTemplateRequest");
static_assert(offsetof(FServerSendEmailFromTemplateRequest, CustomTags) == 0x000008, "Member 'FServerSendEmailFromTemplateRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerSendEmailFromTemplateRequest, EmailTemplateId) == 0x000010, "Member 'FServerSendEmailFromTemplateRequest::EmailTemplateId' has a wrong offset!");
static_assert(offsetof(FServerSendEmailFromTemplateRequest, PlayFabId) == 0x000020, "Member 'FServerSendEmailFromTemplateRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetGameServerInstanceStateRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerSetGameServerInstanceStateRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 LobbyId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameInstanceState                            State;                                             // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2230[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerSetGameServerInstanceStateRequest) == 0x000008, "Wrong alignment on FServerSetGameServerInstanceStateRequest");
static_assert(sizeof(FServerSetGameServerInstanceStateRequest) == 0x000020, "Wrong size on FServerSetGameServerInstanceStateRequest");
static_assert(offsetof(FServerSetGameServerInstanceStateRequest, LobbyId) == 0x000008, "Member 'FServerSetGameServerInstanceStateRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FServerSetGameServerInstanceStateRequest, State) == 0x000018, "Member 'FServerSetGameServerInstanceStateRequest::State' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetGameServerInstanceTagsRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerSetGameServerInstanceTagsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 LobbyId;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Tags;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSetGameServerInstanceTagsRequest) == 0x000008, "Wrong alignment on FServerSetGameServerInstanceTagsRequest");
static_assert(sizeof(FServerSetGameServerInstanceTagsRequest) == 0x000020, "Wrong size on FServerSetGameServerInstanceTagsRequest");
static_assert(offsetof(FServerSetGameServerInstanceTagsRequest, LobbyId) == 0x000008, "Member 'FServerSetGameServerInstanceTagsRequest::LobbyId' has a wrong offset!");
static_assert(offsetof(FServerSetGameServerInstanceTagsRequest, Tags) == 0x000018, "Member 'FServerSetGameServerInstanceTagsRequest::Tags' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetPlayerSecretRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerSetPlayerSecretRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 PlayerSecret;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSetPlayerSecretRequest) == 0x000008, "Wrong alignment on FServerSetPlayerSecretRequest");
static_assert(sizeof(FServerSetPlayerSecretRequest) == 0x000028, "Wrong size on FServerSetPlayerSecretRequest");
static_assert(offsetof(FServerSetPlayerSecretRequest, PlayerSecret) == 0x000008, "Member 'FServerSetPlayerSecretRequest::PlayerSecret' has a wrong offset!");
static_assert(offsetof(FServerSetPlayerSecretRequest, PlayFabId) == 0x000018, "Member 'FServerSetPlayerSecretRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetPublisherDataRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerSetPublisherDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Key;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSetPublisherDataRequest) == 0x000008, "Wrong alignment on FServerSetPublisherDataRequest");
static_assert(sizeof(FServerSetPublisherDataRequest) == 0x000028, "Wrong size on FServerSetPublisherDataRequest");
static_assert(offsetof(FServerSetPublisherDataRequest, Key) == 0x000008, "Member 'FServerSetPublisherDataRequest::Key' has a wrong offset!");
static_assert(offsetof(FServerSetPublisherDataRequest, Value) == 0x000018, "Member 'FServerSetPublisherDataRequest::Value' has a wrong offset!");

// ScriptStruct PlayFab.ServerSetTitleDataRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerSetTitleDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 Key;                                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerSetTitleDataRequest) == 0x000008, "Wrong alignment on FServerSetTitleDataRequest");
static_assert(sizeof(FServerSetTitleDataRequest) == 0x000028, "Wrong size on FServerSetTitleDataRequest");
static_assert(offsetof(FServerSetTitleDataRequest, Key) == 0x000008, "Member 'FServerSetTitleDataRequest::Key' has a wrong offset!");
static_assert(offsetof(FServerSetTitleDataRequest, Value) == 0x000018, "Member 'FServerSetTitleDataRequest::Value' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlinkNintendoServiceAccountRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerUnlinkNintendoServiceAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUnlinkNintendoServiceAccountRequest) == 0x000008, "Wrong alignment on FServerUnlinkNintendoServiceAccountRequest");
static_assert(sizeof(FServerUnlinkNintendoServiceAccountRequest) == 0x000020, "Wrong size on FServerUnlinkNintendoServiceAccountRequest");
static_assert(offsetof(FServerUnlinkNintendoServiceAccountRequest, CustomTags) == 0x000008, "Member 'FServerUnlinkNintendoServiceAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUnlinkNintendoServiceAccountRequest, PlayFabId) == 0x000010, "Member 'FServerUnlinkNintendoServiceAccountRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlinkNintendoSwitchDeviceIdRequest
// 0x0028 (0x0030 - 0x0008)
struct FServerUnlinkNintendoSwitchDeviceIdRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NintendoSwitchDeviceId;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUnlinkNintendoSwitchDeviceIdRequest) == 0x000008, "Wrong alignment on FServerUnlinkNintendoSwitchDeviceIdRequest");
static_assert(sizeof(FServerUnlinkNintendoSwitchDeviceIdRequest) == 0x000030, "Wrong size on FServerUnlinkNintendoSwitchDeviceIdRequest");
static_assert(offsetof(FServerUnlinkNintendoSwitchDeviceIdRequest, CustomTags) == 0x000008, "Member 'FServerUnlinkNintendoSwitchDeviceIdRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUnlinkNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId) == 0x000010, "Member 'FServerUnlinkNintendoSwitchDeviceIdRequest::NintendoSwitchDeviceId' has a wrong offset!");
static_assert(offsetof(FServerUnlinkNintendoSwitchDeviceIdRequest, PlayFabId) == 0x000020, "Member 'FServerUnlinkNintendoSwitchDeviceIdRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlinkPSNAccountRequest
// 0x0018 (0x0020 - 0x0008)
struct FServerUnlinkPSNAccountRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUnlinkPSNAccountRequest) == 0x000008, "Wrong alignment on FServerUnlinkPSNAccountRequest");
static_assert(sizeof(FServerUnlinkPSNAccountRequest) == 0x000020, "Wrong size on FServerUnlinkPSNAccountRequest");
static_assert(offsetof(FServerUnlinkPSNAccountRequest, CustomTags) == 0x000008, "Member 'FServerUnlinkPSNAccountRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUnlinkPSNAccountRequest, PlayFabId) == 0x000010, "Member 'FServerUnlinkPSNAccountRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUnlockContainerInstanceRequest
// 0x0058 (0x0060 - 0x0008)
struct FServerUnlockContainerInstanceRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CatalogVersion;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainerItemInstanceId;                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyItemInstanceId;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUnlockContainerInstanceRequest) == 0x000008, "Wrong alignment on FServerUnlockContainerInstanceRequest");
static_assert(sizeof(FServerUnlockContainerInstanceRequest) == 0x000060, "Wrong size on FServerUnlockContainerInstanceRequest");
static_assert(offsetof(FServerUnlockContainerInstanceRequest, CatalogVersion) == 0x000008, "Member 'FServerUnlockContainerInstanceRequest::CatalogVersion' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerInstanceRequest, CharacterId) == 0x000018, "Member 'FServerUnlockContainerInstanceRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerInstanceRequest, ContainerItemInstanceId) == 0x000028, "Member 'FServerUnlockContainerInstanceRequest::ContainerItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerInstanceRequest, CustomTags) == 0x000038, "Member 'FServerUnlockContainerInstanceRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerInstanceRequest, KeyItemInstanceId) == 0x000040, "Member 'FServerUnlockContainerInstanceRequest::KeyItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerUnlockContainerInstanceRequest, PlayFabId) == 0x000050, "Member 'FServerUnlockContainerInstanceRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateAvatarUrlRequest
// 0x0020 (0x0028 - 0x0008)
struct FServerUpdateAvatarUrlRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 ImageUrl;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdateAvatarUrlRequest) == 0x000008, "Wrong alignment on FServerUpdateAvatarUrlRequest");
static_assert(sizeof(FServerUpdateAvatarUrlRequest) == 0x000028, "Wrong size on FServerUpdateAvatarUrlRequest");
static_assert(offsetof(FServerUpdateAvatarUrlRequest, ImageUrl) == 0x000008, "Member 'FServerUpdateAvatarUrlRequest::ImageUrl' has a wrong offset!");
static_assert(offsetof(FServerUpdateAvatarUrlRequest, PlayFabId) == 0x000018, "Member 'FServerUpdateAvatarUrlRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateCharacterStatisticsRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerUpdateCharacterStatisticsRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CharacterStatistics;                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdateCharacterStatisticsRequest) == 0x000008, "Wrong alignment on FServerUpdateCharacterStatisticsRequest");
static_assert(sizeof(FServerUpdateCharacterStatisticsRequest) == 0x000038, "Wrong size on FServerUpdateCharacterStatisticsRequest");
static_assert(offsetof(FServerUpdateCharacterStatisticsRequest, CharacterId) == 0x000008, "Member 'FServerUpdateCharacterStatisticsRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerUpdateCharacterStatisticsRequest, CharacterStatistics) == 0x000018, "Member 'FServerUpdateCharacterStatisticsRequest::CharacterStatistics' has a wrong offset!");
static_assert(offsetof(FServerUpdateCharacterStatisticsRequest, CustomTags) == 0x000020, "Member 'FServerUpdateCharacterStatisticsRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUpdateCharacterStatisticsRequest, PlayFabId) == 0x000028, "Member 'FServerUpdateCharacterStatisticsRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateUserInternalDataRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerUpdateUserInternalDataRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdateUserInternalDataRequest) == 0x000008, "Wrong alignment on FServerUpdateUserInternalDataRequest");
static_assert(sizeof(FServerUpdateUserInternalDataRequest) == 0x000038, "Wrong size on FServerUpdateUserInternalDataRequest");
static_assert(offsetof(FServerUpdateUserInternalDataRequest, CustomTags) == 0x000008, "Member 'FServerUpdateUserInternalDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserInternalDataRequest, Data) == 0x000010, "Member 'FServerUpdateUserInternalDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserInternalDataRequest, KeysToRemove) == 0x000018, "Member 'FServerUpdateUserInternalDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserInternalDataRequest, PlayFabId) == 0x000028, "Member 'FServerUpdateUserInternalDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerUpdateUserInventoryItemDataRequest
// 0x0050 (0x0058 - 0x0008)
struct FServerUpdateUserInventoryItemDataRequest final : public FPlayFabRequestCommon
{
public:
	class FString                                 CharacterId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     Data;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemInstanceId;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeysToRemove;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUpdateUserInventoryItemDataRequest) == 0x000008, "Wrong alignment on FServerUpdateUserInventoryItemDataRequest");
static_assert(sizeof(FServerUpdateUserInventoryItemDataRequest) == 0x000058, "Wrong size on FServerUpdateUserInventoryItemDataRequest");
static_assert(offsetof(FServerUpdateUserInventoryItemDataRequest, CharacterId) == 0x000008, "Member 'FServerUpdateUserInventoryItemDataRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserInventoryItemDataRequest, CustomTags) == 0x000018, "Member 'FServerUpdateUserInventoryItemDataRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserInventoryItemDataRequest, Data) == 0x000020, "Member 'FServerUpdateUserInventoryItemDataRequest::Data' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserInventoryItemDataRequest, ItemInstanceId) == 0x000028, "Member 'FServerUpdateUserInventoryItemDataRequest::ItemInstanceId' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserInventoryItemDataRequest, KeysToRemove) == 0x000038, "Member 'FServerUpdateUserInventoryItemDataRequest::KeysToRemove' has a wrong offset!");
static_assert(offsetof(FServerUpdateUserInventoryItemDataRequest, PlayFabId) == 0x000048, "Member 'FServerUpdateUserInventoryItemDataRequest::PlayFabId' has a wrong offset!");

// ScriptStruct PlayFab.ServerWriteServerCharacterEventRequest
// 0x0050 (0x0058 - 0x0008)
struct FServerWriteServerCharacterEventRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Body;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayFabId;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerWriteServerCharacterEventRequest) == 0x000008, "Wrong alignment on FServerWriteServerCharacterEventRequest");
static_assert(sizeof(FServerWriteServerCharacterEventRequest) == 0x000058, "Wrong size on FServerWriteServerCharacterEventRequest");
static_assert(offsetof(FServerWriteServerCharacterEventRequest, Body) == 0x000008, "Member 'FServerWriteServerCharacterEventRequest::Body' has a wrong offset!");
static_assert(offsetof(FServerWriteServerCharacterEventRequest, CharacterId) == 0x000010, "Member 'FServerWriteServerCharacterEventRequest::CharacterId' has a wrong offset!");
static_assert(offsetof(FServerWriteServerCharacterEventRequest, CustomTags) == 0x000020, "Member 'FServerWriteServerCharacterEventRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerWriteServerCharacterEventRequest, EventName) == 0x000028, "Member 'FServerWriteServerCharacterEventRequest::EventName' has a wrong offset!");
static_assert(offsetof(FServerWriteServerCharacterEventRequest, PlayFabId) == 0x000038, "Member 'FServerWriteServerCharacterEventRequest::PlayFabId' has a wrong offset!");
static_assert(offsetof(FServerWriteServerCharacterEventRequest, Timestamp) == 0x000048, "Member 'FServerWriteServerCharacterEventRequest::Timestamp' has a wrong offset!");

// ScriptStruct PlayFab.ServerWriteTitleEventRequest
// 0x0030 (0x0038 - 0x0008)
struct FServerWriteTitleEventRequest final : public FPlayFabRequestCommon
{
public:
	class UPlayFabJsonObject*                     Body;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayFabJsonObject*                     CustomTags;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timestamp;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerWriteTitleEventRequest) == 0x000008, "Wrong alignment on FServerWriteTitleEventRequest");
static_assert(sizeof(FServerWriteTitleEventRequest) == 0x000038, "Wrong size on FServerWriteTitleEventRequest");
static_assert(offsetof(FServerWriteTitleEventRequest, Body) == 0x000008, "Member 'FServerWriteTitleEventRequest::Body' has a wrong offset!");
static_assert(offsetof(FServerWriteTitleEventRequest, CustomTags) == 0x000010, "Member 'FServerWriteTitleEventRequest::CustomTags' has a wrong offset!");
static_assert(offsetof(FServerWriteTitleEventRequest, EventName) == 0x000018, "Member 'FServerWriteTitleEventRequest::EventName' has a wrong offset!");
static_assert(offsetof(FServerWriteTitleEventRequest, Timestamp) == 0x000028, "Member 'FServerWriteTitleEventRequest::Timestamp' has a wrong offset!");

}

