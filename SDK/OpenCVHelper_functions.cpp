#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenCVHelper

#include "Basic.hpp"

#include "OpenCVHelper_classes.hpp"
#include "OpenCVHelper_parameters.hpp"


namespace SDK
{

// Function OpenCVHelper.OpenCVBlueprintFunctionLibrary.OpenCVArucoDetectMarkers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           InRenderTarget                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOpenCVArucoDictionary                  InDictionary                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOpenCVArucoDictionarySize              InDictionarySize                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebugDrawMarkers                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEstimatePose                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InMarkerLengthInMeters                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOpenCVLensDistortionParametersBaseInLensDistortionParameters                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UTexture2D*                       OutDebugTexture                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FOpenCVArucoDetectedMarker>OutDetectedMarkers                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOpenCVBlueprintFunctionLibrary::OpenCVArucoDetectMarkers(const class UTextureRenderTarget2D* InRenderTarget, const EOpenCVArucoDictionary InDictionary, const EOpenCVArucoDictionarySize InDictionarySize, const bool bDebugDrawMarkers, const bool bEstimatePose, const float InMarkerLengthInMeters, const struct FOpenCVLensDistortionParametersBase& InLensDistortionParameters, class UTexture2D** OutDebugTexture, TArray<struct FOpenCVArucoDetectedMarker>* OutDetectedMarkers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenCVBlueprintFunctionLibrary", "OpenCVArucoDetectMarkers");

	Params::OpenCVBlueprintFunctionLibrary_OpenCVArucoDetectMarkers Parms{};

	Parms.InRenderTarget = InRenderTarget;
	Parms.InDictionary = InDictionary;
	Parms.InDictionarySize = InDictionarySize;
	Parms.bDebugDrawMarkers = bDebugDrawMarkers;
	Parms.bEstimatePose = bEstimatePose;
	Parms.InMarkerLengthInMeters = InMarkerLengthInMeters;
	Parms.InLensDistortionParameters = std::move(InLensDistortionParameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDebugTexture != nullptr)
		*OutDebugTexture = Parms.OutDebugTexture;

	if (OutDetectedMarkers != nullptr)
		*OutDetectedMarkers = std::move(Parms.OutDetectedMarkers);

	return Parms.ReturnValue;
}


// Function OpenCVHelper.OpenCVBlueprintFunctionLibrary.OpenCVChessboardDetectCorners
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           InRenderTarget                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        InPatternSize                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDebugDrawCorners                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       OutDebugTexture                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                OutDetectedCorners                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOpenCVBlueprintFunctionLibrary::OpenCVChessboardDetectCorners(const class UTextureRenderTarget2D* InRenderTarget, const struct FIntPoint& InPatternSize, const bool bDebugDrawCorners, class UTexture2D** OutDebugTexture, TArray<struct FVector2D>* OutDetectedCorners)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenCVBlueprintFunctionLibrary", "OpenCVChessboardDetectCorners");

	Params::OpenCVBlueprintFunctionLibrary_OpenCVChessboardDetectCorners Parms{};

	Parms.InRenderTarget = InRenderTarget;
	Parms.InPatternSize = std::move(InPatternSize);
	Parms.bDebugDrawCorners = bDebugDrawCorners;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDebugTexture != nullptr)
		*OutDebugTexture = Parms.OutDebugTexture;

	if (OutDetectedCorners != nullptr)
		*OutDetectedCorners = std::move(Parms.OutDetectedCorners);

	return Parms.ReturnValue;
}

}

