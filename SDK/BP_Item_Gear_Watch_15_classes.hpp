#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Item_Gear_Watch_15

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "POLYGON_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Item_Gear_Watch_15.BP_Item_Gear_Watch_15_C
// 0x0058 (0x0368 - 0x0310)
class ABP_Item_Gear_Watch_15_C final : public AItem_Watch_General
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0310(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_Watch_15_Shesternia_04;                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Watch_15_Shesternia_03;                         // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Watch_15_Shesternia_02;                         // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Watch_15_Shesternia_01;                         // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Watch_15_Bezel;                                 // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Watch_15_Background;                            // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sec;                                               // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Minute;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Hour;                                              // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds;                                     // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Item_Gear_Watch_15(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetCorrectiveFovMaterial(bool UseFovMaterial);
	void Watch();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Item_Gear_Watch_15_C">();
	}
	static class ABP_Item_Gear_Watch_15_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Item_Gear_Watch_15_C>();
	}
};
static_assert(alignof(ABP_Item_Gear_Watch_15_C) == 0x000008, "Wrong alignment on ABP_Item_Gear_Watch_15_C");
static_assert(sizeof(ABP_Item_Gear_Watch_15_C) == 0x000368, "Wrong size on ABP_Item_Gear_Watch_15_C");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, UberGraphFrame) == 0x000310, "Member 'ABP_Item_Gear_Watch_15_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, SM_Watch_15_Shesternia_04) == 0x000318, "Member 'ABP_Item_Gear_Watch_15_C::SM_Watch_15_Shesternia_04' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, SM_Watch_15_Shesternia_03) == 0x000320, "Member 'ABP_Item_Gear_Watch_15_C::SM_Watch_15_Shesternia_03' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, SM_Watch_15_Shesternia_02) == 0x000328, "Member 'ABP_Item_Gear_Watch_15_C::SM_Watch_15_Shesternia_02' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, SM_Watch_15_Shesternia_01) == 0x000330, "Member 'ABP_Item_Gear_Watch_15_C::SM_Watch_15_Shesternia_01' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, SM_Watch_15_Bezel) == 0x000338, "Member 'ABP_Item_Gear_Watch_15_C::SM_Watch_15_Bezel' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, SM_Watch_15_Background) == 0x000340, "Member 'ABP_Item_Gear_Watch_15_C::SM_Watch_15_Background' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, Sec) == 0x000348, "Member 'ABP_Item_Gear_Watch_15_C::Sec' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, Minute) == 0x000350, "Member 'ABP_Item_Gear_Watch_15_C::Minute' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, Hour) == 0x000358, "Member 'ABP_Item_Gear_Watch_15_C::Hour' has a wrong offset!");
static_assert(offsetof(ABP_Item_Gear_Watch_15_C, Delta_Seconds) == 0x000360, "Member 'ABP_Item_Gear_Watch_15_C::Delta_Seconds' has a wrong offset!");

}

