#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenCVLensCalibration

#include "Basic.hpp"

#include "OpenCVLensCalibration_classes.hpp"
#include "OpenCVLensCalibration_parameters.hpp"


namespace SDK
{

// Function OpenCVLensCalibration.OpenCVLensCalibrator.CreateCalibrator
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BoardWidth                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoardHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SquareSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseFisheyeModel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOpenCVLensCalibrator*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOpenCVLensCalibrator* UOpenCVLensCalibrator::CreateCalibrator(int32 BoardWidth, int32 BoardHeight, float SquareSize, bool bUseFisheyeModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OpenCVLensCalibrator", "CreateCalibrator");

	Params::OpenCVLensCalibrator_CreateCalibrator Parms{};

	Parms.BoardWidth = BoardWidth;
	Parms.BoardHeight = BoardHeight;
	Parms.SquareSize = SquareSize;
	Parms.bUseFisheyeModel = bUseFisheyeModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OpenCVLensCalibration.OpenCVLensCalibrator.CalculateLensParameters
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOpenCVLensDistortionParameters  LensDistortionParameters                               (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   MarginOfError                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOpenCVCameraViewInfo            CameraViewInfo                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenCVLensCalibrator::CalculateLensParameters(struct FOpenCVLensDistortionParameters* LensDistortionParameters, float* MarginOfError, struct FOpenCVCameraViewInfo* CameraViewInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenCVLensCalibrator", "CalculateLensParameters");

	Params::OpenCVLensCalibrator_CalculateLensParameters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LensDistortionParameters != nullptr)
		*LensDistortionParameters = std::move(Parms.LensDistortionParameters);

	if (MarginOfError != nullptr)
		*MarginOfError = Parms.MarginOfError;

	if (CameraViewInfo != nullptr)
		*CameraViewInfo = std::move(Parms.CameraViewInfo);

	return Parms.ReturnValue;
}


// Function OpenCVLensCalibration.OpenCVLensCalibrator.FeedImage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenCVLensCalibrator::FeedImage(const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenCVLensCalibrator", "FeedImage");

	Params::OpenCVLensCalibrator_FeedImage Parms{};

	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OpenCVLensCalibration.OpenCVLensCalibrator.FeedRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           TextureRenderTarget                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOpenCVLensCalibrator::FeedRenderTarget(class UTextureRenderTarget2D* TextureRenderTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OpenCVLensCalibrator", "FeedRenderTarget");

	Params::OpenCVLensCalibrator_FeedRenderTarget Parms{};

	Parms.TextureRenderTarget = TextureRenderTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

