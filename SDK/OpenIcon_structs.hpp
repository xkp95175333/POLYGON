#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenIcon

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// Enum OpenIcon.EOpenIconSource
// NumValues: 0x0007
enum class EOpenIconSource : uint8
{
	FontAwesome                              = 0,
	ForkAwesome                              = 1,
	MaterialDesign                           = 2,
	FontAudio                                = 3,
	KenneyIcons                              = 4,
	Count                                    = 5,
	EOpenIconSource_MAX                      = 6,
};

// Enum OpenIcon.EOpenIconTextureSize
// NumValues: 0x0006
enum class EOpenIconTextureSize : uint8
{
	Size1                                    = 0,
	Size2                                    = 1,
	Size3                                    = 2,
	Size4                                    = 3,
	Size5                                    = 4,
	EOpenIconTextureSize_MAX                 = 5,
};

// Enum OpenIcon.EFA_Category
// NumValues: 0x0005
enum class EFA_Category : uint8
{
	All                                      = 0,
	Brands                                   = 1,
	Regular                                  = 2,
	Solid                                    = 3,
	EFA_MAX                                  = 4,
};

// Enum OpenIcon.EMD_Category
// NumValues: 0x0013
enum class EMD_Category : uint8
{
	All                                      = 0,
	Action                                   = 1,
	Alert                                    = 2,
	Av                                       = 3,
	Communication                            = 4,
	Content                                  = 5,
	Device                                   = 6,
	Editor                                   = 7,
	File                                     = 8,
	Home                                     = 9,
	Hardware                                 = 10,
	Image                                    = 11,
	Maps                                     = 12,
	Navigation                               = 13,
	Notification                             = 14,
	Places                                   = 15,
	Social                                   = 16,
	Toggle                                   = 17,
	EMD_MAX                                  = 18,
};

// Enum OpenIcon.EFK_Category
// NumValues: 0x0010
enum class EFK_Category : uint8
{
	All                                      = 0,
	Accessibility                            = 1,
	Chart                                    = 2,
	Currency                                 = 3,
	FileType                                 = 4,
	FormControl                              = 5,
	Gender                                   = 6,
	Hand                                     = 7,
	Medical                                  = 8,
	Payment                                  = 9,
	Spinner                                  = 10,
	TextEditor                               = 11,
	Transportation                           = 12,
	VideoPlayer                              = 13,
	WebApplication                           = 14,
	EFK_MAX                                  = 15,
};

// ScriptStruct OpenIcon.OpenIconData
// 0x0038 (0x0040 - 0x0008)
struct FOpenIconData final : public FTableRowBase
{
public:
	EOpenIconSource                               Source;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconCategory;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconUcode;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOpenIconData) == 0x000008, "Wrong alignment on FOpenIconData");
static_assert(sizeof(FOpenIconData) == 0x000040, "Wrong size on FOpenIconData");
static_assert(offsetof(FOpenIconData, Source) == 0x000008, "Member 'FOpenIconData::Source' has a wrong offset!");
static_assert(offsetof(FOpenIconData, IconName) == 0x000010, "Member 'FOpenIconData::IconName' has a wrong offset!");
static_assert(offsetof(FOpenIconData, IconCategory) == 0x000020, "Member 'FOpenIconData::IconCategory' has a wrong offset!");
static_assert(offsetof(FOpenIconData, IconUcode) == 0x000030, "Member 'FOpenIconData::IconUcode' has a wrong offset!");

// ScriptStruct OpenIcon.CustomIconData
// 0x0040 (0x0048 - 0x0008)
struct FCustomIconData final : public FTableRowBase
{
public:
	class FString                                 IconPack;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconName;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconCategory;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconUcode;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomIconData) == 0x000008, "Wrong alignment on FCustomIconData");
static_assert(sizeof(FCustomIconData) == 0x000048, "Wrong size on FCustomIconData");
static_assert(offsetof(FCustomIconData, IconPack) == 0x000008, "Member 'FCustomIconData::IconPack' has a wrong offset!");
static_assert(offsetof(FCustomIconData, IconName) == 0x000018, "Member 'FCustomIconData::IconName' has a wrong offset!");
static_assert(offsetof(FCustomIconData, IconCategory) == 0x000028, "Member 'FCustomIconData::IconCategory' has a wrong offset!");
static_assert(offsetof(FCustomIconData, IconUcode) == 0x000038, "Member 'FCustomIconData::IconUcode' has a wrong offset!");

}

