#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenCVLensCalibration

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class OpenCVLensCalibration.OpenCVLensCalibrator
// 0x0068 (0x0090 - 0x0028)
class UOpenCVLensCalibrator final : public UObject
{
public:
	struct FVector2D                              MinimumCornerCoordinates;                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaximumCornerCoordinates;                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F50[0x48];                                    // 0x0048(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UOpenCVLensCalibrator* CreateCalibrator(int32 BoardWidth, int32 BoardHeight, float SquareSize, bool bUseFisheyeModel);

	bool CalculateLensParameters(struct FOpenCVLensDistortionParameters* LensDistortionParameters, float* MarginOfError, struct FOpenCVCameraViewInfo* CameraViewInfo);
	bool FeedImage(const class FString& FilePath);
	bool FeedRenderTarget(class UTextureRenderTarget2D* TextureRenderTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OpenCVLensCalibrator">();
	}
	static class UOpenCVLensCalibrator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOpenCVLensCalibrator>();
	}
};
static_assert(alignof(UOpenCVLensCalibrator) == 0x000008, "Wrong alignment on UOpenCVLensCalibrator");
static_assert(sizeof(UOpenCVLensCalibrator) == 0x000090, "Wrong size on UOpenCVLensCalibrator");
static_assert(offsetof(UOpenCVLensCalibrator, MinimumCornerCoordinates) == 0x000028, "Member 'UOpenCVLensCalibrator::MinimumCornerCoordinates' has a wrong offset!");
static_assert(offsetof(UOpenCVLensCalibrator, MaximumCornerCoordinates) == 0x000038, "Member 'UOpenCVLensCalibrator::MaximumCornerCoordinates' has a wrong offset!");

}

