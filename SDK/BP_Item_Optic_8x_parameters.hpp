#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Item_Optic_8x

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_Item_Optic_8x.BP_Item_Optic_8x_C.ExecuteUbergraph_BP_Item_Optic_8x
// 0x0028 (0x0028 - 0x0000)
struct BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F71[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_useFovMaterial;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F72[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x) == 0x000008, "Wrong alignment on BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x");
static_assert(sizeof(BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x) == 0x000028, "Wrong size on BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x");
static_assert(offsetof(BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x, EntryPoint) == 0x000000, "Member 'BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x, Temp_bool_Variable) == 0x000004, "Member 'BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x, Temp_object_Variable) == 0x000008, "Member 'BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x, Temp_object_Variable_1) == 0x000010, "Member 'BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x, K2Node_Event_useFovMaterial) == 0x000018, "Member 'BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x::K2Node_Event_useFovMaterial' has a wrong offset!");
static_assert(offsetof(BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x, K2Node_Select_Default) == 0x000020, "Member 'BP_Item_Optic_8x_C_ExecuteUbergraph_BP_Item_Optic_8x::K2Node_Select_Default' has a wrong offset!");

// Function BP_Item_Optic_8x.BP_Item_Optic_8x_C.SetCorrectiveFovMaterial
// 0x0001 (0x0001 - 0x0000)
struct BP_Item_Optic_8x_C_SetCorrectiveFovMaterial final
{
public:
	bool                                          UseFovMaterial;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Item_Optic_8x_C_SetCorrectiveFovMaterial) == 0x000001, "Wrong alignment on BP_Item_Optic_8x_C_SetCorrectiveFovMaterial");
static_assert(sizeof(BP_Item_Optic_8x_C_SetCorrectiveFovMaterial) == 0x000001, "Wrong size on BP_Item_Optic_8x_C_SetCorrectiveFovMaterial");
static_assert(offsetof(BP_Item_Optic_8x_C_SetCorrectiveFovMaterial, UseFovMaterial) == 0x000000, "Member 'BP_Item_Optic_8x_C_SetCorrectiveFovMaterial::UseFovMaterial' has a wrong offset!");

}

