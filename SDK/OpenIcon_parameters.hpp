#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenIcon

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "OpenIcon_structs.hpp"


namespace SDK::Params
{

// Function OpenIcon.CustomIcon.InitCustomIcon
// 0x0010 (0x0010 - 0x0000)
struct CustomIcon_InitCustomIcon final
{
public:
	class UDataTable*                             InIconData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InIconFont;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomIcon_InitCustomIcon) == 0x000008, "Wrong alignment on CustomIcon_InitCustomIcon");
static_assert(sizeof(CustomIcon_InitCustomIcon) == 0x000010, "Wrong size on CustomIcon_InitCustomIcon");
static_assert(offsetof(CustomIcon_InitCustomIcon, InIconData) == 0x000000, "Member 'CustomIcon_InitCustomIcon::InIconData' has a wrong offset!");
static_assert(offsetof(CustomIcon_InitCustomIcon, InIconFont) == 0x000008, "Member 'CustomIcon_InitCustomIcon::InIconFont' has a wrong offset!");

// Function OpenIcon.CustomIcon.SetIconByID
// 0x000C (0x000C - 0x0000)
struct CustomIcon_SetIconByID final
{
public:
	class FName                                   IconID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomIcon_SetIconByID) == 0x000004, "Wrong alignment on CustomIcon_SetIconByID");
static_assert(sizeof(CustomIcon_SetIconByID) == 0x00000C, "Wrong size on CustomIcon_SetIconByID");
static_assert(offsetof(CustomIcon_SetIconByID, IconID) == 0x000000, "Member 'CustomIcon_SetIconByID::IconID' has a wrong offset!");
static_assert(offsetof(CustomIcon_SetIconByID, Size) == 0x000008, "Member 'CustomIcon_SetIconByID::Size' has a wrong offset!");

// Function OpenIcon.OpenIcon.SetIcon
// 0x0030 (0x0030 - 0x0000)
struct OpenIcon_SetIcon final
{
public:
	EOpenIconSource                               Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F63[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Category;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconUcode;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F64[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenIcon_SetIcon) == 0x000008, "Wrong alignment on OpenIcon_SetIcon");
static_assert(sizeof(OpenIcon_SetIcon) == 0x000030, "Wrong size on OpenIcon_SetIcon");
static_assert(offsetof(OpenIcon_SetIcon, Source) == 0x000000, "Member 'OpenIcon_SetIcon::Source' has a wrong offset!");
static_assert(offsetof(OpenIcon_SetIcon, Category) == 0x000008, "Member 'OpenIcon_SetIcon::Category' has a wrong offset!");
static_assert(offsetof(OpenIcon_SetIcon, IconUcode) == 0x000018, "Member 'OpenIcon_SetIcon::IconUcode' has a wrong offset!");
static_assert(offsetof(OpenIcon_SetIcon, Size) == 0x000028, "Member 'OpenIcon_SetIcon::Size' has a wrong offset!");

// Function OpenIcon.OpenIcon.SetIconByID
// 0x000C (0x000C - 0x0000)
struct OpenIcon_SetIconByID final
{
public:
	class FName                                   IconID;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenIcon_SetIconByID) == 0x000004, "Wrong alignment on OpenIcon_SetIconByID");
static_assert(sizeof(OpenIcon_SetIconByID) == 0x00000C, "Wrong size on OpenIcon_SetIconByID");
static_assert(offsetof(OpenIcon_SetIconByID, IconID) == 0x000000, "Member 'OpenIcon_SetIconByID::IconID' has a wrong offset!");
static_assert(offsetof(OpenIcon_SetIconByID, Size) == 0x000008, "Member 'OpenIcon_SetIconByID::Size' has a wrong offset!");

// Function OpenIcon.OpenIconUtil.CopyToClipboard
// 0x0010 (0x0010 - 0x0000)
struct OpenIconUtil_CopyToClipboard final
{
public:
	class FString                                 S;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenIconUtil_CopyToClipboard) == 0x000008, "Wrong alignment on OpenIconUtil_CopyToClipboard");
static_assert(sizeof(OpenIconUtil_CopyToClipboard) == 0x000010, "Wrong size on OpenIconUtil_CopyToClipboard");
static_assert(offsetof(OpenIconUtil_CopyToClipboard, S) == 0x000000, "Member 'OpenIconUtil_CopyToClipboard::S' has a wrong offset!");

// Function OpenIcon.OpenIconUtil.CustomIconToTexture
// 0x0050 (0x0050 - 0x0000)
struct OpenIconUtil_CustomIconToTexture final
{
public:
	class UDataTable*                             IconData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  IconFont;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IconID;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSize;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpenIconTextureSize                          OutputSize;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F65[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDefaultName;                                    // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F66[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenIconUtil_CustomIconToTexture) == 0x000008, "Wrong alignment on OpenIconUtil_CustomIconToTexture");
static_assert(sizeof(OpenIconUtil_CustomIconToTexture) == 0x000050, "Wrong size on OpenIconUtil_CustomIconToTexture");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture, IconData) == 0x000000, "Member 'OpenIconUtil_CustomIconToTexture::IconData' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture, IconFont) == 0x000008, "Member 'OpenIconUtil_CustomIconToTexture::IconFont' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture, IconID) == 0x000010, "Member 'OpenIconUtil_CustomIconToTexture::IconID' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture, IconSize) == 0x000018, "Member 'OpenIconUtil_CustomIconToTexture::IconSize' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture, OutputSize) == 0x00001C, "Member 'OpenIconUtil_CustomIconToTexture::OutputSize' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture, Path) == 0x000020, "Member 'OpenIconUtil_CustomIconToTexture::Path' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture, Filename) == 0x000030, "Member 'OpenIconUtil_CustomIconToTexture::Filename' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture, UseDefaultName) == 0x000040, "Member 'OpenIconUtil_CustomIconToTexture::UseDefaultName' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture, ReturnValue) == 0x000048, "Member 'OpenIconUtil_CustomIconToTexture::ReturnValue' has a wrong offset!");

// Function OpenIcon.OpenIconUtil.CustomIconToTexture_Advanced
// 0x0190 (0x0190 - 0x0000)
struct OpenIconUtil_CustomIconToTexture_Advanced final
{
public:
	struct FVector2D                              Translation;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0010(0x0014)(Parm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0024(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F67[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ShadowOffset;                                      // 0x0038(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontOutlineSettings                   OutlineSettings;                                   // 0x0048(0x0020)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F68[0x8];                                     // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            StrikeBrush;                                       // 0x0070(0x00D0)(Parm, NativeAccessSpecifierPublic)
	class UDataTable*                             IconData;                                          // 0x0140(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  IconFont;                                          // 0x0148(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IconID;                                            // 0x0150(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSize;                                          // 0x0158(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpenIconTextureSize                          OutputSize;                                        // 0x015C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F69[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0160(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0170(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDefaultName;                                    // 0x0180(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6A[0x7];                                     // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0188(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenIconUtil_CustomIconToTexture_Advanced) == 0x000010, "Wrong alignment on OpenIconUtil_CustomIconToTexture_Advanced");
static_assert(sizeof(OpenIconUtil_CustomIconToTexture_Advanced) == 0x000190, "Wrong size on OpenIconUtil_CustomIconToTexture_Advanced");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, Translation) == 0x000000, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::Translation' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, ColorAndOpacity) == 0x000010, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, ShadowColorAndOpacity) == 0x000024, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, ShadowOffset) == 0x000038, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::ShadowOffset' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, OutlineSettings) == 0x000048, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::OutlineSettings' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, StrikeBrush) == 0x000070, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::StrikeBrush' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, IconData) == 0x000140, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::IconData' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, IconFont) == 0x000148, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::IconFont' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, IconID) == 0x000150, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::IconID' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, IconSize) == 0x000158, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::IconSize' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, OutputSize) == 0x00015C, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::OutputSize' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, Path) == 0x000160, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::Path' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, Filename) == 0x000170, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::Filename' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, UseDefaultName) == 0x000180, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::UseDefaultName' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_CustomIconToTexture_Advanced, ReturnValue) == 0x000188, "Member 'OpenIconUtil_CustomIconToTexture_Advanced::ReturnValue' has a wrong offset!");

// Function OpenIcon.OpenIconUtil.GetCustomIconDataFromTable
// 0x0020 (0x0020 - 0x0000)
struct OpenIconUtil_GetCustomIconDataFromTable final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomIconData>                OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenIconUtil_GetCustomIconDataFromTable) == 0x000008, "Wrong alignment on OpenIconUtil_GetCustomIconDataFromTable");
static_assert(sizeof(OpenIconUtil_GetCustomIconDataFromTable) == 0x000020, "Wrong size on OpenIconUtil_GetCustomIconDataFromTable");
static_assert(offsetof(OpenIconUtil_GetCustomIconDataFromTable, DataTable) == 0x000000, "Member 'OpenIconUtil_GetCustomIconDataFromTable::DataTable' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_GetCustomIconDataFromTable, OutData) == 0x000008, "Member 'OpenIconUtil_GetCustomIconDataFromTable::OutData' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_GetCustomIconDataFromTable, ReturnValue) == 0x000018, "Member 'OpenIconUtil_GetCustomIconDataFromTable::ReturnValue' has a wrong offset!");

// Function OpenIcon.OpenIconUtil.OpenIconToTexture
// 0x0040 (0x0040 - 0x0000)
struct OpenIconUtil_OpenIconToTexture final
{
public:
	class FName                                   IconID;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSize;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpenIconTextureSize                          OutputSize;                                        // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6C[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDefaultName;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6D[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenIconUtil_OpenIconToTexture) == 0x000008, "Wrong alignment on OpenIconUtil_OpenIconToTexture");
static_assert(sizeof(OpenIconUtil_OpenIconToTexture) == 0x000040, "Wrong size on OpenIconUtil_OpenIconToTexture");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture, IconID) == 0x000000, "Member 'OpenIconUtil_OpenIconToTexture::IconID' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture, IconSize) == 0x000008, "Member 'OpenIconUtil_OpenIconToTexture::IconSize' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture, OutputSize) == 0x00000C, "Member 'OpenIconUtil_OpenIconToTexture::OutputSize' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture, Path) == 0x000010, "Member 'OpenIconUtil_OpenIconToTexture::Path' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture, Filename) == 0x000020, "Member 'OpenIconUtil_OpenIconToTexture::Filename' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture, UseDefaultName) == 0x000030, "Member 'OpenIconUtil_OpenIconToTexture::UseDefaultName' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture, ReturnValue) == 0x000038, "Member 'OpenIconUtil_OpenIconToTexture::ReturnValue' has a wrong offset!");

// Function OpenIcon.OpenIconUtil.OpenIconToTexture_Advanced
// 0x0180 (0x0180 - 0x0000)
struct OpenIconUtil_OpenIconToTexture_Advanced final
{
public:
	struct FVector2D                              Translation;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0010(0x0014)(Parm, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0024(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6E[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ShadowOffset;                                      // 0x0038(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontOutlineSettings                   OutlineSettings;                                   // 0x0048(0x0020)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6F[0x8];                                     // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            StrikeBrush;                                       // 0x0070(0x00D0)(Parm, NativeAccessSpecifierPublic)
	class FName                                   IconID;                                            // 0x0140(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSize;                                          // 0x0148(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpenIconTextureSize                          OutputSize;                                        // 0x014C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F70[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Path;                                              // 0x0150(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0160(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDefaultName;                                    // 0x0170(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F71[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0178(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenIconUtil_OpenIconToTexture_Advanced) == 0x000010, "Wrong alignment on OpenIconUtil_OpenIconToTexture_Advanced");
static_assert(sizeof(OpenIconUtil_OpenIconToTexture_Advanced) == 0x000180, "Wrong size on OpenIconUtil_OpenIconToTexture_Advanced");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, Translation) == 0x000000, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::Translation' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, ColorAndOpacity) == 0x000010, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, ShadowColorAndOpacity) == 0x000024, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, ShadowOffset) == 0x000038, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::ShadowOffset' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, OutlineSettings) == 0x000048, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::OutlineSettings' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, StrikeBrush) == 0x000070, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::StrikeBrush' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, IconID) == 0x000140, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::IconID' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, IconSize) == 0x000148, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::IconSize' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, OutputSize) == 0x00014C, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::OutputSize' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, Path) == 0x000150, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::Path' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, Filename) == 0x000160, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::Filename' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, UseDefaultName) == 0x000170, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::UseDefaultName' has a wrong offset!");
static_assert(offsetof(OpenIconUtil_OpenIconToTexture_Advanced, ReturnValue) == 0x000178, "Member 'OpenIconUtil_OpenIconToTexture_Advanced::ReturnValue' has a wrong offset!");

}

