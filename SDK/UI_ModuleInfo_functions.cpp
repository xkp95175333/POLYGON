#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_ModuleInfo

#include "Basic.hpp"

#include "UI_ModuleInfo_classes.hpp"
#include "UI_ModuleInfo_parameters.hpp"


namespace SDK
{

// Function UI_ModuleInfo.UI_ModuleInfo_C.FindModuleCharacteristic
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDataContainerObjectWrapper      DataContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class FString                           CharacteristicKey                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_ModuleInfo_C::FindModuleCharacteristic(const struct FDataContainerObjectWrapper& DataContainer, const class FString& CharacteristicKey, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ModuleInfo_C", "FindModuleCharacteristic");

	Params::UI_ModuleInfo_C_FindModuleCharacteristic Parms{};

	Parms.DataContainer = std::move(DataContainer);
	Parms.CharacteristicKey = std::move(CharacteristicKey);

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function UI_ModuleInfo.UI_ModuleInfo_C.ParseModuleInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           GunClass                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           CurrentModuleClass                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ComparisonModuleClass                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUI_ModuleInfo_C::ParseModuleInfo(class UClass* GunClass, class UClass* CurrentModuleClass, class UClass* ComparisonModuleClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ModuleInfo_C", "ParseModuleInfo");

	Params::UI_ModuleInfo_C_ParseModuleInfo Parms{};

	Parms.GunClass = GunClass;
	Parms.CurrentModuleClass = CurrentModuleClass;
	Parms.ComparisonModuleClass = ComparisonModuleClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_ModuleInfo.UI_ModuleInfo_C.Reset
// (Private, BlueprintCallable, BlueprintEvent)

void UUI_ModuleInfo_C::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ModuleInfo_C", "Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_ModuleInfo.UI_ModuleInfo_C.SetDescription
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ModuleClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUI_ModuleInfo_C::SetDescription(class UClass* ModuleClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ModuleInfo_C", "SetDescription");

	Params::UI_ModuleInfo_C_SetDescription Parms{};

	Parms.ModuleClass = ModuleClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_ModuleInfo.UI_ModuleInfo_C.SetRare
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ModuleClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UUI_ModuleInfo_C::SetRare(class UClass* ModuleClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_ModuleInfo_C", "SetRare");

	Params::UI_ModuleInfo_C_SetRare Parms{};

	Parms.ModuleClass = ModuleClass;

	UObject::ProcessEvent(Func, &Parms);
}

}

