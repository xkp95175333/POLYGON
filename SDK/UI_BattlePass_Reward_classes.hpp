#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_BattlePass_Reward

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "POLYGON_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_BattlePass_Reward.UI_BattlePass_Reward_C
// 0x0168 (0x03E8 - 0x0280)
class UUI_BattlePass_Reward_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       GetReward;                                         // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AllowGetReward;                                    // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HoveredAnimation;                                  // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SelectedAnimation;                                 // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FreeAnimation;                                     // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                Border_BackgroundLine;                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Lock;                                       // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Icon;                                        // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_IconGlow;                                    // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Lock;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             NamedSlot_Image;                                   // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_InstantReward;                             // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_IsFree;                                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_LevelProgress;                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_General;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Level;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FName                                   LevelID;                                           // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsSelected;                                        // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3304[0x7];                                     // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBattlePassReward                      LevelInfo;                                         // 0x0318(0x00C0)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsReseived;                                        // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3305[0x7];                                     // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PG_PlayerController_Menu_C*         PlayerController;                                  // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_UI_BattlePass_Reward(int32 EntryPoint);
	void OnLoaded_E66304D4422C547ABC6111AC5A695EFA(class UObject* Loaded);
	void OnLoaded_EADB5D764CEA7912CFE75BA847730F20(class UObject* Loaded);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void PlayReceiveRewardAnimation();
	void PreConstruct(bool IsDesignTime);
	void Set_Is_Selected(bool Selected);
	void SetIsReceived(bool Param_IsReseived);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_BattlePass_Reward_C">();
	}
	static class UUI_BattlePass_Reward_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_BattlePass_Reward_C>();
	}
};
static_assert(alignof(UUI_BattlePass_Reward_C) == 0x000008, "Wrong alignment on UUI_BattlePass_Reward_C");
static_assert(sizeof(UUI_BattlePass_Reward_C) == 0x0003E8, "Wrong size on UUI_BattlePass_Reward_C");
static_assert(offsetof(UUI_BattlePass_Reward_C, UberGraphFrame) == 0x000280, "Member 'UUI_BattlePass_Reward_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, GetReward) == 0x000288, "Member 'UUI_BattlePass_Reward_C::GetReward' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, AllowGetReward) == 0x000290, "Member 'UUI_BattlePass_Reward_C::AllowGetReward' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, HoveredAnimation) == 0x000298, "Member 'UUI_BattlePass_Reward_C::HoveredAnimation' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, SelectedAnimation) == 0x0002A0, "Member 'UUI_BattlePass_Reward_C::SelectedAnimation' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, FreeAnimation) == 0x0002A8, "Member 'UUI_BattlePass_Reward_C::FreeAnimation' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, Border_BackgroundLine) == 0x0002B0, "Member 'UUI_BattlePass_Reward_C::Border_BackgroundLine' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, Border_Lock) == 0x0002B8, "Member 'UUI_BattlePass_Reward_C::Border_Lock' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, Image_Icon) == 0x0002C0, "Member 'UUI_BattlePass_Reward_C::Image_Icon' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, Image_IconGlow) == 0x0002C8, "Member 'UUI_BattlePass_Reward_C::Image_IconGlow' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, Image_Lock) == 0x0002D0, "Member 'UUI_BattlePass_Reward_C::Image_Lock' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, NamedSlot_Image) == 0x0002D8, "Member 'UUI_BattlePass_Reward_C::NamedSlot_Image' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, Overlay_InstantReward) == 0x0002E0, "Member 'UUI_BattlePass_Reward_C::Overlay_InstantReward' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, Overlay_IsFree) == 0x0002E8, "Member 'UUI_BattlePass_Reward_C::Overlay_IsFree' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, ProgressBar_LevelProgress) == 0x0002F0, "Member 'UUI_BattlePass_Reward_C::ProgressBar_LevelProgress' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, SizeBox_General) == 0x0002F8, "Member 'UUI_BattlePass_Reward_C::SizeBox_General' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, TextBlock_Level) == 0x000300, "Member 'UUI_BattlePass_Reward_C::TextBlock_Level' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, LevelID) == 0x000308, "Member 'UUI_BattlePass_Reward_C::LevelID' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, IsSelected) == 0x000310, "Member 'UUI_BattlePass_Reward_C::IsSelected' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, LevelInfo) == 0x000318, "Member 'UUI_BattlePass_Reward_C::LevelInfo' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, IsReseived) == 0x0003D8, "Member 'UUI_BattlePass_Reward_C::IsReseived' has a wrong offset!");
static_assert(offsetof(UUI_BattlePass_Reward_C, PlayerController) == 0x0003E0, "Member 'UUI_BattlePass_Reward_C::PlayerController' has a wrong offset!");

}

