#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModelViewViewModel

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "ModelViewViewModel_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class ModelViewViewModel.MVVMViewClass
// 0x0088 (0x00B0 - 0x0028)
class UMVVMViewClass final : public UWidgetBlueprintGeneratedClassExtension
{
public:
	TArray<struct FMVVMViewClass_SourceCreator>   SourceCreators;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMVVMViewClass_CompiledBinding> CompiledBindings;                                  // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FMVVMCompiledBindingLibrary            BindingLibrary;                                    // 0x0048(0x0060)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1EDF[0x8];                                     // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MVVMViewClass">();
	}
	static class UMVVMViewClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMVVMViewClass>();
	}
};
static_assert(alignof(UMVVMViewClass) == 0x000008, "Wrong alignment on UMVVMViewClass");
static_assert(sizeof(UMVVMViewClass) == 0x0000B0, "Wrong size on UMVVMViewClass");
static_assert(offsetof(UMVVMViewClass, SourceCreators) == 0x000028, "Member 'UMVVMViewClass::SourceCreators' has a wrong offset!");
static_assert(offsetof(UMVVMViewClass, CompiledBindings) == 0x000038, "Member 'UMVVMViewClass::CompiledBindings' has a wrong offset!");
static_assert(offsetof(UMVVMViewClass, BindingLibrary) == 0x000048, "Member 'UMVVMViewClass::BindingLibrary' has a wrong offset!");

// Class ModelViewViewModel.MVVMSubsystem
// 0x0008 (0x0038 - 0x0030)
class UMVVMSubsystem final : public UEngineSubsystem
{
public:
	class UMVVMViewModelCollectionObject*         GlobalViewModelCollection;                         // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool DoesWidgetTreeContainedWidget(const class UWidgetTree* WidgetTree, const class UWidget* ViewWidget) const;
	class UMVVMViewModelCollectionObject* GetGlobalViewModelCollection() const;
	struct FMVVMAvailableBinding K2_GetAvailableBinding(const class UClass* Param_Class, const struct FMVVMBindingName& BindingName, const class UClass* Accessor) const;
	TArray<struct FMVVMAvailableBinding> K2_GetAvailableBindings(const class UClass* Param_Class, const class UClass* Accessor) const;
	class UMVVMView* K2_GetViewFromUserWidget(const class UUserWidget* UserWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MVVMSubsystem">();
	}
	static class UMVVMSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMVVMSubsystem>();
	}
};
static_assert(alignof(UMVVMSubsystem) == 0x000008, "Wrong alignment on UMVVMSubsystem");
static_assert(sizeof(UMVVMSubsystem) == 0x000038, "Wrong size on UMVVMSubsystem");
static_assert(offsetof(UMVVMSubsystem, GlobalViewModelCollection) == 0x000030, "Member 'UMVVMSubsystem::GlobalViewModelCollection' has a wrong offset!");

// Class ModelViewViewModel.MVVMViewModelBase
// 0x0040 (0x0068 - 0x0028)
class UMVVMViewModelBase final : public UObject
{
public:
	uint8                                         Pad_1EE2[0x40];                                    // 0x0028(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_AddFieldValueChangedDelegate(const struct FFieldNotificationId& FieldId, TDelegate<void(class UObject* Object, const struct FFieldNotificationId& Field)> Delegate);
	void K2_BroadcastFieldValueChanged(const struct FFieldNotificationId& FieldId);
	void K2_RemoveFieldValueChangedDelegate(const struct FFieldNotificationId& FieldId, TDelegate<void(class UObject* Object, const struct FFieldNotificationId& Field)> Delegate);
	bool K2_SetPropertyValue(const int32& OldValue, const int32& NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MVVMViewModelBase">();
	}
	static class UMVVMViewModelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMVVMViewModelBase>();
	}
};
static_assert(alignof(UMVVMViewModelBase) == 0x000008, "Wrong alignment on UMVVMViewModelBase");
static_assert(sizeof(UMVVMViewModelBase) == 0x000068, "Wrong size on UMVVMViewModelBase");

// Class ModelViewViewModel.MVVMViewWorldSubsystem
// 0x0060 (0x00A0 - 0x0040)
class UMVVMViewWorldSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_1EE4[0x60];                                    // 0x0040(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MVVMViewWorldSubsystem">();
	}
	static class UMVVMViewWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMVVMViewWorldSubsystem>();
	}
};
static_assert(alignof(UMVVMViewWorldSubsystem) == 0x000008, "Wrong alignment on UMVVMViewWorldSubsystem");
static_assert(sizeof(UMVVMViewWorldSubsystem) == 0x0000A0, "Wrong size on UMVVMViewWorldSubsystem");

// Class ModelViewViewModel.MVVMViewModelCollectionObject
// 0x0028 (0x0050 - 0x0028)
class UMVVMViewModelCollectionObject final : public UObject
{
public:
	struct FMVVMViewModelCollection               ViewModelCollection;                               // 0x0028(0x0028)(Transient, NativeAccessSpecifierPrivate)

public:
	bool AddViewModelInstance(const struct FMVVMViewModelContext& Context, class UMVVMViewModelBase* ViewModel);
	int32 RemoveAllViewModelInstance(class UMVVMViewModelBase* ViewModel);
	bool RemoveViewModel(const struct FMVVMViewModelContext& Context);

	class UMVVMViewModelBase* FindFirstViewModelInstanceOfType(const TSubclassOf<class UMVVMViewModelBase>& ViewModelClass) const;
	class UMVVMViewModelBase* FindViewModelInstance(const struct FMVVMViewModelContext& Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MVVMViewModelCollectionObject">();
	}
	static class UMVVMViewModelCollectionObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMVVMViewModelCollectionObject>();
	}
};
static_assert(alignof(UMVVMViewModelCollectionObject) == 0x000008, "Wrong alignment on UMVVMViewModelCollectionObject");
static_assert(sizeof(UMVVMViewModelCollectionObject) == 0x000050, "Wrong size on UMVVMViewModelCollectionObject");
static_assert(offsetof(UMVVMViewModelCollectionObject, ViewModelCollection) == 0x000028, "Member 'UMVVMViewModelCollectionObject::ViewModelCollection' has a wrong offset!");

// Class ModelViewViewModel.MVVMViewModelBlueprintGeneratedClass
// 0x0020 (0x0390 - 0x0370)
class UMVVMViewModelBlueprintGeneratedClass final : public UBlueprintGeneratedClass
{
public:
	TArray<struct FFieldNotificationId>           FieldNotifyNames;                                  // 0x0370(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1EE8[0x10];                                    // 0x0380(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MVVMViewModelBlueprintGeneratedClass">();
	}
	static class UMVVMViewModelBlueprintGeneratedClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMVVMViewModelBlueprintGeneratedClass>();
	}
};
static_assert(alignof(UMVVMViewModelBlueprintGeneratedClass) == 0x000010, "Wrong alignment on UMVVMViewModelBlueprintGeneratedClass");
static_assert(sizeof(UMVVMViewModelBlueprintGeneratedClass) == 0x000390, "Wrong size on UMVVMViewModelBlueprintGeneratedClass");
static_assert(offsetof(UMVVMViewModelBlueprintGeneratedClass, FieldNotifyNames) == 0x000370, "Member 'UMVVMViewModelBlueprintGeneratedClass::FieldNotifyNames' has a wrong offset!");

// Class ModelViewViewModel.MVVMView
// 0x0040 (0x0068 - 0x0028)
class UMVVMView final : public UUserWidgetExtension
{
public:
	class UMVVMViewClass*                         ClassExtension;                                    // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1EE9[0x38];                                    // 0x0030(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetViewModel(class FName ViewModelName, TScriptInterface<class INotifyFieldValueChanged> ViewModel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MVVMView">();
	}
	static class UMVVMView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMVVMView>();
	}
};
static_assert(alignof(UMVVMView) == 0x000008, "Wrong alignment on UMVVMView");
static_assert(sizeof(UMVVMView) == 0x000068, "Wrong size on UMVVMView");
static_assert(offsetof(UMVVMView, ClassExtension) == 0x000028, "Member 'UMVVMView::ClassExtension' has a wrong offset!");

}

