#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_General

#include "Basic.hpp"

#include "POLYGON_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPFL_General.BPFL_General_C.Convert Corrency Code To Sign
// 0x0038 (0x0038 - 0x0000)
struct BPFL_General_C_Convert_Corrency_Code_To_Sign final
{
public:
	class FString                                 CurrencyCode;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   Sign;                                              // 0x0018(0x0018)(Parm, OutParm)
	bool                                          K2Node_SwitchString_CmpSuccess;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_General_C_Convert_Corrency_Code_To_Sign) == 0x000008, "Wrong alignment on BPFL_General_C_Convert_Corrency_Code_To_Sign");
static_assert(sizeof(BPFL_General_C_Convert_Corrency_Code_To_Sign) == 0x000038, "Wrong size on BPFL_General_C_Convert_Corrency_Code_To_Sign");
static_assert(offsetof(BPFL_General_C_Convert_Corrency_Code_To_Sign, CurrencyCode) == 0x000000, "Member 'BPFL_General_C_Convert_Corrency_Code_To_Sign::CurrencyCode' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_Convert_Corrency_Code_To_Sign, __WorldContext) == 0x000010, "Member 'BPFL_General_C_Convert_Corrency_Code_To_Sign::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_Convert_Corrency_Code_To_Sign, Sign) == 0x000018, "Member 'BPFL_General_C_Convert_Corrency_Code_To_Sign::Sign' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_Convert_Corrency_Code_To_Sign, K2Node_SwitchString_CmpSuccess) == 0x000030, "Member 'BPFL_General_C_Convert_Corrency_Code_To_Sign::K2Node_SwitchString_CmpSuccess' has a wrong offset!");

// Function BPFL_General.BPFL_General_C.GetActorRelativeLocation
// 0x00A8 (0x00A8 - 0x0000)
struct BPFL_General_C_GetActorRelativeLocation final
{
public:
	class AActor*                                 ParentActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ChildActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_General_C_GetActorRelativeLocation) == 0x000008, "Wrong alignment on BPFL_General_C_GetActorRelativeLocation");
static_assert(sizeof(BPFL_General_C_GetActorRelativeLocation) == 0x0000A8, "Wrong size on BPFL_General_C_GetActorRelativeLocation");
static_assert(offsetof(BPFL_General_C_GetActorRelativeLocation, ParentActor) == 0x000000, "Member 'BPFL_General_C_GetActorRelativeLocation::ParentActor' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetActorRelativeLocation, ChildActor) == 0x000008, "Member 'BPFL_General_C_GetActorRelativeLocation::ChildActor' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetActorRelativeLocation, __WorldContext) == 0x000010, "Member 'BPFL_General_C_GetActorRelativeLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetActorRelativeLocation, ReturnValue) == 0x000018, "Member 'BPFL_General_C_GetActorRelativeLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetActorRelativeLocation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000030, "Member 'BPFL_General_C_GetActorRelativeLocation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetActorRelativeLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BPFL_General_C_GetActorRelativeLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetActorRelativeLocation, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000060, "Member 'BPFL_General_C_GetActorRelativeLocation::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetActorRelativeLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000078, "Member 'BPFL_General_C_GetActorRelativeLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetActorRelativeLocation, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000090, "Member 'BPFL_General_C_GetActorRelativeLocation::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");

// Function BPFL_General.BPFL_General_C.GetDefaultModuleClassByType
// 0x0068 (0x0068 - 0x0000)
struct BPFL_General_C_GetDefaultModuleClassByType final
{
public:
	EGunModuleType                                ModuleType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F14[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DefaultModuleClass;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EGunModuleType                                Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F15[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable;                               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_1;                             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_2;                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_3;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_4;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_5;                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_6;                             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_7;                             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_General_C_GetDefaultModuleClassByType) == 0x000008, "Wrong alignment on BPFL_General_C_GetDefaultModuleClassByType");
static_assert(sizeof(BPFL_General_C_GetDefaultModuleClassByType) == 0x000068, "Wrong size on BPFL_General_C_GetDefaultModuleClassByType");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, ModuleType) == 0x000000, "Member 'BPFL_General_C_GetDefaultModuleClassByType::ModuleType' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, __WorldContext) == 0x000008, "Member 'BPFL_General_C_GetDefaultModuleClassByType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, DefaultModuleClass) == 0x000010, "Member 'BPFL_General_C_GetDefaultModuleClassByType::DefaultModuleClass' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, Temp_byte_Variable) == 0x000018, "Member 'BPFL_General_C_GetDefaultModuleClassByType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, Temp_class_Variable) == 0x000020, "Member 'BPFL_General_C_GetDefaultModuleClassByType::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, Temp_class_Variable_1) == 0x000028, "Member 'BPFL_General_C_GetDefaultModuleClassByType::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, Temp_class_Variable_2) == 0x000030, "Member 'BPFL_General_C_GetDefaultModuleClassByType::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, Temp_class_Variable_3) == 0x000038, "Member 'BPFL_General_C_GetDefaultModuleClassByType::Temp_class_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, Temp_class_Variable_4) == 0x000040, "Member 'BPFL_General_C_GetDefaultModuleClassByType::Temp_class_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, Temp_class_Variable_5) == 0x000048, "Member 'BPFL_General_C_GetDefaultModuleClassByType::Temp_class_Variable_5' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, Temp_class_Variable_6) == 0x000050, "Member 'BPFL_General_C_GetDefaultModuleClassByType::Temp_class_Variable_6' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, Temp_class_Variable_7) == 0x000058, "Member 'BPFL_General_C_GetDefaultModuleClassByType::Temp_class_Variable_7' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetDefaultModuleClassByType, K2Node_Select_Default) == 0x000060, "Member 'BPFL_General_C_GetDefaultModuleClassByType::K2Node_Select_Default' has a wrong offset!");

// Function BPFL_General.BPFL_General_C.GetGameInstance
// 0x0028 (0x0028 - 0x0000)
struct BPFL_General_C_GetGameInstance final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PG_GameInstance_C*                  MyGameIntance;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_PG_GameInstance_C*                  K2Node_DynamicCast_AsBP_PG_Game_Instance;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_General_C_GetGameInstance) == 0x000008, "Wrong alignment on BPFL_General_C_GetGameInstance");
static_assert(sizeof(BPFL_General_C_GetGameInstance) == 0x000028, "Wrong size on BPFL_General_C_GetGameInstance");
static_assert(offsetof(BPFL_General_C_GetGameInstance, __WorldContext) == 0x000000, "Member 'BPFL_General_C_GetGameInstance::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameInstance, MyGameIntance) == 0x000008, "Member 'BPFL_General_C_GetGameInstance::MyGameIntance' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameInstance, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'BPFL_General_C_GetGameInstance::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameInstance, K2Node_DynamicCast_AsBP_PG_Game_Instance) == 0x000018, "Member 'BPFL_General_C_GetGameInstance::K2Node_DynamicCast_AsBP_PG_Game_Instance' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameInstance, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPFL_General_C_GetGameInstance::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_General.BPFL_General_C.GetGameModeBP_Game
// 0x0028 (0x0028 - 0x0000)
struct BPFL_General_C_GetGameModeBP_Game final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PG_GameMode_Game_C*                 MyGameMode;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PG_GameMode_Game_C*                 K2Node_DynamicCast_AsBP_PG_Game_Mode_Game;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_General_C_GetGameModeBP_Game) == 0x000008, "Wrong alignment on BPFL_General_C_GetGameModeBP_Game");
static_assert(sizeof(BPFL_General_C_GetGameModeBP_Game) == 0x000028, "Wrong size on BPFL_General_C_GetGameModeBP_Game");
static_assert(offsetof(BPFL_General_C_GetGameModeBP_Game, __WorldContext) == 0x000000, "Member 'BPFL_General_C_GetGameModeBP_Game::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameModeBP_Game, MyGameMode) == 0x000008, "Member 'BPFL_General_C_GetGameModeBP_Game::MyGameMode' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameModeBP_Game, CallFunc_GetGameMode_ReturnValue) == 0x000010, "Member 'BPFL_General_C_GetGameModeBP_Game::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameModeBP_Game, K2Node_DynamicCast_AsBP_PG_Game_Mode_Game) == 0x000018, "Member 'BPFL_General_C_GetGameModeBP_Game::K2Node_DynamicCast_AsBP_PG_Game_Mode_Game' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameModeBP_Game, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPFL_General_C_GetGameModeBP_Game::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_General.BPFL_General_C.GetGameStateBP
// 0x0028 (0x0028 - 0x0000)
struct BPFL_General_C_GetGameStateBP final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PG_GameState_Game_C*                MyGameState;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PG_GameState_Game_C*                K2Node_DynamicCast_AsBP_PG_Game_State_Game;        // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_General_C_GetGameStateBP) == 0x000008, "Wrong alignment on BPFL_General_C_GetGameStateBP");
static_assert(sizeof(BPFL_General_C_GetGameStateBP) == 0x000028, "Wrong size on BPFL_General_C_GetGameStateBP");
static_assert(offsetof(BPFL_General_C_GetGameStateBP, __WorldContext) == 0x000000, "Member 'BPFL_General_C_GetGameStateBP::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameStateBP, MyGameState) == 0x000008, "Member 'BPFL_General_C_GetGameStateBP::MyGameState' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameStateBP, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'BPFL_General_C_GetGameStateBP::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameStateBP, K2Node_DynamicCast_AsBP_PG_Game_State_Game) == 0x000018, "Member 'BPFL_General_C_GetGameStateBP::K2Node_DynamicCast_AsBP_PG_Game_State_Game' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetGameStateBP, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPFL_General_C_GetGameStateBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPFL_General.BPFL_General_C.GetRareColor
// 0x00A8 (0x00A8 - 0x0000)
struct BPFL_General_C_GetRareColor final
{
public:
	EItemRareType                                 Rare;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F16[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NewParam;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemRareType                                 Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F17[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_General_C_GetRareColor) == 0x000008, "Wrong alignment on BPFL_General_C_GetRareColor");
static_assert(sizeof(BPFL_General_C_GetRareColor) == 0x0000A8, "Wrong size on BPFL_General_C_GetRareColor");
static_assert(offsetof(BPFL_General_C_GetRareColor, Rare) == 0x000000, "Member 'BPFL_General_C_GetRareColor::Rare' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, __WorldContext) == 0x000008, "Member 'BPFL_General_C_GetRareColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, NewParam) == 0x000010, "Member 'BPFL_General_C_GetRareColor::NewParam' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, Temp_byte_Variable) == 0x000020, "Member 'BPFL_General_C_GetRareColor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, Temp_struct_Variable) == 0x000024, "Member 'BPFL_General_C_GetRareColor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, Temp_struct_Variable_1) == 0x000034, "Member 'BPFL_General_C_GetRareColor::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, Temp_struct_Variable_2) == 0x000044, "Member 'BPFL_General_C_GetRareColor::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, Temp_struct_Variable_3) == 0x000054, "Member 'BPFL_General_C_GetRareColor::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, Temp_struct_Variable_4) == 0x000064, "Member 'BPFL_General_C_GetRareColor::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, Temp_struct_Variable_5) == 0x000074, "Member 'BPFL_General_C_GetRareColor::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, Temp_struct_Variable_6) == 0x000084, "Member 'BPFL_General_C_GetRareColor::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BPFL_General_C_GetRareColor, K2Node_Select_Default) == 0x000094, "Member 'BPFL_General_C_GetRareColor::K2Node_Select_Default' has a wrong offset!");

}

