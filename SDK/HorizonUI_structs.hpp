#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HorizonUI

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum HorizonUI.EHorizonDialogueTextOverflowWrapMethod
// NumValues: 0x0003
enum class EHorizonDialogueTextOverflowWrapMethod : uint8
{
	Normal                                   = 0,
	BreakAll                                 = 1,
	EHorizonDialogueTextOverflowWrapMethod_MAX = 2,
};

// Enum HorizonUI.EHorizonDialogueTextOverflowWarpMethod_DEPRECATED
// NumValues: 0x0004
enum class EHorizonDialogueTextOverflowWarpMethod_DEPRECATED : uint8
{
	Normal                                   = 0,
	BreakAll                                 = 1,
	Invalidated                              = 2,
	EHorizonDialogueTextOverflowWarpMethod_MAX = 3,
};

// Enum HorizonUI.EHorizonDialogueSegmentType
// NumValues: 0x000A
enum class EHorizonDialogueSegmentType : uint8
{
	Invalidated                              = 0,
	Text                                     = 1,
	NewLine                                  = 2,
	NewPage                                  = 3,
	Image                                    = 4,
	PaperFlipbook                            = 5,
	Material                                 = 6,
	HyperText                                = 7,
	Custom                                   = 8,
	EHorizonDialogueSegmentType_MAX          = 9,
};

// Enum HorizonUI.EHorizonUIInputMode
// NumValues: 0x0005
enum class EHorizonUIInputMode : uint8
{
	Invalidated                              = 0,
	GameAndUI                                = 1,
	UIOnly                                   = 2,
	GameOnly                                 = 3,
	EHorizonUIInputMode_MAX                  = 4,
};

// ScriptStruct HorizonUI.HorizonDialogueHypertextResult
// 0x0078 (0x0078 - 0x0000)
struct FHorizonDialogueHypertextResult final
{
public:
	class UHorizonDialogueMsgTextBlock*           DialogueMsgTextBlock;                              // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SegmentIndex;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineIndex;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlockIndex;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HypertextReference;                                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            UrlEncodeMap;                                      // 0x0028(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorizonDialogueHypertextResult) == 0x000008, "Wrong alignment on FHorizonDialogueHypertextResult");
static_assert(sizeof(FHorizonDialogueHypertextResult) == 0x000078, "Wrong size on FHorizonDialogueHypertextResult");
static_assert(offsetof(FHorizonDialogueHypertextResult, DialogueMsgTextBlock) == 0x000000, "Member 'FHorizonDialogueHypertextResult::DialogueMsgTextBlock' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueHypertextResult, SegmentIndex) == 0x000008, "Member 'FHorizonDialogueHypertextResult::SegmentIndex' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueHypertextResult, LineIndex) == 0x00000C, "Member 'FHorizonDialogueHypertextResult::LineIndex' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueHypertextResult, BlockIndex) == 0x000010, "Member 'FHorizonDialogueHypertextResult::BlockIndex' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueHypertextResult, HypertextReference) == 0x000018, "Member 'FHorizonDialogueHypertextResult::HypertextReference' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueHypertextResult, UrlEncodeMap) == 0x000028, "Member 'FHorizonDialogueHypertextResult::UrlEncodeMap' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonDialogueBlockInfo
// 0x0068 (0x0068 - 0x0000)
struct FHorizonDialogueBlockInfo final
{
public:
	class FString                                 MsgText;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113E[0x10];                                    // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RubyText;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113F[0x8];                                     // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentCharIndex;                                  // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SegmentReferenceIndex;                             // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BlockSize;                                         // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RubyTextBlockSize;                                 // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorizonDialogueBlockInfo) == 0x000008, "Wrong alignment on FHorizonDialogueBlockInfo");
static_assert(sizeof(FHorizonDialogueBlockInfo) == 0x000068, "Wrong size on FHorizonDialogueBlockInfo");
static_assert(offsetof(FHorizonDialogueBlockInfo, MsgText) == 0x000000, "Member 'FHorizonDialogueBlockInfo::MsgText' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlockInfo, RubyText) == 0x000020, "Member 'FHorizonDialogueBlockInfo::RubyText' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlockInfo, CurrentCharIndex) == 0x000038, "Member 'FHorizonDialogueBlockInfo::CurrentCharIndex' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlockInfo, SegmentReferenceIndex) == 0x00003C, "Member 'FHorizonDialogueBlockInfo::SegmentReferenceIndex' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlockInfo, Name) == 0x000040, "Member 'FHorizonDialogueBlockInfo::Name' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlockInfo, BlockSize) == 0x000048, "Member 'FHorizonDialogueBlockInfo::BlockSize' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlockInfo, RubyTextBlockSize) == 0x000058, "Member 'FHorizonDialogueBlockInfo::RubyTextBlockSize' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonDialogueRubyTextInfo
// 0x00C0 (0x00C0 - 0x0000)
struct FHorizonDialogueRubyTextInfo final
{
public:
	uint8                                         Pad_1140[0x18];                                    // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0018(0x0014)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1141[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0030(0x0058)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ShadowColorAndOpacity;                             // 0x0098(0x0014)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                PaddingMargin;                                     // 0x00AC(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1142[0x4];                                     // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHorizonDialogueRubyTextInfo) == 0x000008, "Wrong alignment on FHorizonDialogueRubyTextInfo");
static_assert(sizeof(FHorizonDialogueRubyTextInfo) == 0x0000C0, "Wrong size on FHorizonDialogueRubyTextInfo");
static_assert(offsetof(FHorizonDialogueRubyTextInfo, ColorAndOpacity) == 0x000018, "Member 'FHorizonDialogueRubyTextInfo::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueRubyTextInfo, Font) == 0x000030, "Member 'FHorizonDialogueRubyTextInfo::Font' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueRubyTextInfo, ShadowOffset) == 0x000088, "Member 'FHorizonDialogueRubyTextInfo::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueRubyTextInfo, ShadowColorAndOpacity) == 0x000098, "Member 'FHorizonDialogueRubyTextInfo::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueRubyTextInfo, PaddingMargin) == 0x0000AC, "Member 'FHorizonDialogueRubyTextInfo::PaddingMargin' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonDialogueSegmentInfo
// 0x0270 (0x0270 - 0x0000)
struct FHorizonDialogueSegmentInfo final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0010(0x0014)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1143[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0028(0x0058)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ShadowColorAndOpacity;                             // 0x0090(0x0014)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         DialogueMsgSpeed;                                  // 0x00A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DialogueMsgWait;                                   // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1144[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                PaddingMargin;                                     // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateColor                            HypertextHoveredColor;                             // 0x00C0(0x0014)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateColor                            HypertextVisitedColor;                             // 0x00D4(0x0014)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UHorizonButton>             BackgroundButtonClass;                             // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DialogueSoundVolumeMultiplier;                     // 0x00F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DialogueSoundPitchMultiplier;                      // 0x00F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DialogueSoundStartTime;                            // 0x00F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1145[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DialogueSound;                                     // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1146[0x88];                                    // 0x0108(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventPayload;                                      // 0x0190(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x01A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHorizonDialogueRubyTextInfo           RubyTextInfo;                                      // 0x01B0(0x00C0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorizonDialogueSegmentInfo) == 0x000008, "Wrong alignment on FHorizonDialogueSegmentInfo");
static_assert(sizeof(FHorizonDialogueSegmentInfo) == 0x000270, "Wrong size on FHorizonDialogueSegmentInfo");
static_assert(offsetof(FHorizonDialogueSegmentInfo, Text) == 0x000000, "Member 'FHorizonDialogueSegmentInfo::Text' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, ColorAndOpacity) == 0x000010, "Member 'FHorizonDialogueSegmentInfo::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, Font) == 0x000028, "Member 'FHorizonDialogueSegmentInfo::Font' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, ShadowOffset) == 0x000080, "Member 'FHorizonDialogueSegmentInfo::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, ShadowColorAndOpacity) == 0x000090, "Member 'FHorizonDialogueSegmentInfo::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, DialogueMsgSpeed) == 0x0000A4, "Member 'FHorizonDialogueSegmentInfo::DialogueMsgSpeed' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, DialogueMsgWait) == 0x0000A8, "Member 'FHorizonDialogueSegmentInfo::DialogueMsgWait' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, PaddingMargin) == 0x0000B0, "Member 'FHorizonDialogueSegmentInfo::PaddingMargin' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, HypertextHoveredColor) == 0x0000C0, "Member 'FHorizonDialogueSegmentInfo::HypertextHoveredColor' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, HypertextVisitedColor) == 0x0000D4, "Member 'FHorizonDialogueSegmentInfo::HypertextVisitedColor' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, BackgroundButtonClass) == 0x0000E8, "Member 'FHorizonDialogueSegmentInfo::BackgroundButtonClass' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, DialogueSoundVolumeMultiplier) == 0x0000F0, "Member 'FHorizonDialogueSegmentInfo::DialogueSoundVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, DialogueSoundPitchMultiplier) == 0x0000F4, "Member 'FHorizonDialogueSegmentInfo::DialogueSoundPitchMultiplier' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, DialogueSoundStartTime) == 0x0000F8, "Member 'FHorizonDialogueSegmentInfo::DialogueSoundStartTime' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, DialogueSound) == 0x000100, "Member 'FHorizonDialogueSegmentInfo::DialogueSound' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, EventPayload) == 0x000190, "Member 'FHorizonDialogueSegmentInfo::EventPayload' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, Tags) == 0x0001A0, "Member 'FHorizonDialogueSegmentInfo::Tags' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfo, RubyTextInfo) == 0x0001B0, "Member 'FHorizonDialogueSegmentInfo::RubyTextInfo' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonDialogueSegmentInfoRubyTextStyle
// 0x0060 (0x0060 - 0x0000)
struct FHorizonDialogueSegmentInfoRubyTextStyle final
{
public:
	TArray<class FString>                         Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateColor>                    ColorAndOpacity;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateFontInfo>                 Font;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ShadowOffset;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateColor>                    ShadowColorAndOpacity;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMargin>                        PaddingMargin;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorizonDialogueSegmentInfoRubyTextStyle) == 0x000008, "Wrong alignment on FHorizonDialogueSegmentInfoRubyTextStyle");
static_assert(sizeof(FHorizonDialogueSegmentInfoRubyTextStyle) == 0x000060, "Wrong size on FHorizonDialogueSegmentInfoRubyTextStyle");
static_assert(offsetof(FHorizonDialogueSegmentInfoRubyTextStyle, Text) == 0x000000, "Member 'FHorizonDialogueSegmentInfoRubyTextStyle::Text' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoRubyTextStyle, ColorAndOpacity) == 0x000010, "Member 'FHorizonDialogueSegmentInfoRubyTextStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoRubyTextStyle, Font) == 0x000020, "Member 'FHorizonDialogueSegmentInfoRubyTextStyle::Font' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoRubyTextStyle, ShadowOffset) == 0x000030, "Member 'FHorizonDialogueSegmentInfoRubyTextStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoRubyTextStyle, ShadowColorAndOpacity) == 0x000040, "Member 'FHorizonDialogueSegmentInfoRubyTextStyle::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoRubyTextStyle, PaddingMargin) == 0x000050, "Member 'FHorizonDialogueSegmentInfoRubyTextStyle::PaddingMargin' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonDialogueDialoguePageResult
// 0x0004 (0x0004 - 0x0000)
struct FHorizonDialogueDialoguePageResult final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorizonDialogueDialoguePageResult) == 0x000004, "Wrong alignment on FHorizonDialogueDialoguePageResult");
static_assert(sizeof(FHorizonDialogueDialoguePageResult) == 0x000004, "Wrong size on FHorizonDialogueDialoguePageResult");
static_assert(offsetof(FHorizonDialogueDialoguePageResult, PageIndex) == 0x000000, "Member 'FHorizonDialogueDialoguePageResult::PageIndex' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonDialogueSegmentInfoStyle
// 0x0278 (0x0278 - 0x0000)
struct FHorizonDialogueSegmentInfoStyle final
{
public:
	class FName                                   StyleName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateColor>                    ColorAndOpacity;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateFontInfo>                 Font;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 FontSize;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           TypefaceFontName;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ShadowOffset;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateColor>                    ShadowColorAndOpacity;                             // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DialogueMsgSpeed;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DialogueMsgWait;                                   // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMargin>                        PaddingMargin;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         HypertextReference;                                // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateColor>                    HypertextHoveredColor;                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSlateColor>                    HypertextVisitedColor;                             // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UHorizonButton>>     BackgroundButtonClass;                             // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Texture2D;                                         // 0x00E8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               Material;                                          // 0x0118(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPaperSprite>            PaperSprite;                                       // 0x0148(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              DialogueSound;                                     // 0x0178(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 DialogueSoundVolumeMultiplier;                     // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DialogueSoundPitchMultiplier;                      // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DialogueSoundStartTime;                            // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPaperFlipbook>          PaperFlipbook;                                     // 0x01D8(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ImageSize;                                         // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHorizonDialogueSegmentInfoRubyTextStyle RubyTextStyleInfo;                                 // 0x0218(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorizonDialogueSegmentInfoStyle) == 0x000008, "Wrong alignment on FHorizonDialogueSegmentInfoStyle");
static_assert(sizeof(FHorizonDialogueSegmentInfoStyle) == 0x000278, "Wrong size on FHorizonDialogueSegmentInfoStyle");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, StyleName) == 0x000000, "Member 'FHorizonDialogueSegmentInfoStyle::StyleName' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, Text) == 0x000008, "Member 'FHorizonDialogueSegmentInfoStyle::Text' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, ColorAndOpacity) == 0x000018, "Member 'FHorizonDialogueSegmentInfoStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, Font) == 0x000028, "Member 'FHorizonDialogueSegmentInfoStyle::Font' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, FontSize) == 0x000038, "Member 'FHorizonDialogueSegmentInfoStyle::FontSize' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, TypefaceFontName) == 0x000048, "Member 'FHorizonDialogueSegmentInfoStyle::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, ShadowOffset) == 0x000058, "Member 'FHorizonDialogueSegmentInfoStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, ShadowColorAndOpacity) == 0x000068, "Member 'FHorizonDialogueSegmentInfoStyle::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, DialogueMsgSpeed) == 0x000078, "Member 'FHorizonDialogueSegmentInfoStyle::DialogueMsgSpeed' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, DialogueMsgWait) == 0x000088, "Member 'FHorizonDialogueSegmentInfoStyle::DialogueMsgWait' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, PaddingMargin) == 0x000098, "Member 'FHorizonDialogueSegmentInfoStyle::PaddingMargin' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, HypertextReference) == 0x0000A8, "Member 'FHorizonDialogueSegmentInfoStyle::HypertextReference' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, HypertextHoveredColor) == 0x0000B8, "Member 'FHorizonDialogueSegmentInfoStyle::HypertextHoveredColor' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, HypertextVisitedColor) == 0x0000C8, "Member 'FHorizonDialogueSegmentInfoStyle::HypertextVisitedColor' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, BackgroundButtonClass) == 0x0000D8, "Member 'FHorizonDialogueSegmentInfoStyle::BackgroundButtonClass' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, Texture2D) == 0x0000E8, "Member 'FHorizonDialogueSegmentInfoStyle::Texture2D' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, Material) == 0x000118, "Member 'FHorizonDialogueSegmentInfoStyle::Material' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, PaperSprite) == 0x000148, "Member 'FHorizonDialogueSegmentInfoStyle::PaperSprite' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, DialogueSound) == 0x000178, "Member 'FHorizonDialogueSegmentInfoStyle::DialogueSound' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, DialogueSoundVolumeMultiplier) == 0x0001A8, "Member 'FHorizonDialogueSegmentInfoStyle::DialogueSoundVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, DialogueSoundPitchMultiplier) == 0x0001B8, "Member 'FHorizonDialogueSegmentInfoStyle::DialogueSoundPitchMultiplier' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, DialogueSoundStartTime) == 0x0001C8, "Member 'FHorizonDialogueSegmentInfoStyle::DialogueSoundStartTime' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, PaperFlipbook) == 0x0001D8, "Member 'FHorizonDialogueSegmentInfoStyle::PaperFlipbook' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, ImageSize) == 0x000208, "Member 'FHorizonDialogueSegmentInfoStyle::ImageSize' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueSegmentInfoStyle, RubyTextStyleInfo) == 0x000218, "Member 'FHorizonDialogueSegmentInfoStyle::RubyTextStyleInfo' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonDialogueBlinkingCursorInfo
// 0x0070 (0x0070 - 0x0000)
struct FHorizonDialogueBlinkingCursorInfo final
{
public:
	TSoftObjectPtr<class UPaperFlipbook>          Flipbook;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0030(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUseSize;                                          // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1147[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Size;                                              // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PaddingPos;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1148[0x8];                                     // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHorizonDialogueBlinkingCursorInfo) == 0x000008, "Wrong alignment on FHorizonDialogueBlinkingCursorInfo");
static_assert(sizeof(FHorizonDialogueBlinkingCursorInfo) == 0x000070, "Wrong size on FHorizonDialogueBlinkingCursorInfo");
static_assert(offsetof(FHorizonDialogueBlinkingCursorInfo, Flipbook) == 0x000000, "Member 'FHorizonDialogueBlinkingCursorInfo::Flipbook' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlinkingCursorInfo, ColorAndOpacity) == 0x000030, "Member 'FHorizonDialogueBlinkingCursorInfo::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlinkingCursorInfo, bUseSize) == 0x000044, "Member 'FHorizonDialogueBlinkingCursorInfo::bUseSize' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlinkingCursorInfo, Size) == 0x000048, "Member 'FHorizonDialogueBlinkingCursorInfo::Size' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueBlinkingCursorInfo, PaddingPos) == 0x000058, "Member 'FHorizonDialogueBlinkingCursorInfo::PaddingPos' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonMultiToggleButtonState
// 0x0100 (0x0100 - 0x0000)
struct FHorizonMultiToggleButtonState final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1149[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0030(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHorizonMultiToggleButtonState) == 0x000010, "Wrong alignment on FHorizonMultiToggleButtonState");
static_assert(sizeof(FHorizonMultiToggleButtonState) == 0x000100, "Wrong size on FHorizonMultiToggleButtonState");
static_assert(offsetof(FHorizonMultiToggleButtonState, Text) == 0x000000, "Member 'FHorizonMultiToggleButtonState::Text' has a wrong offset!");
static_assert(offsetof(FHorizonMultiToggleButtonState, TextColor) == 0x000018, "Member 'FHorizonMultiToggleButtonState::TextColor' has a wrong offset!");
static_assert(offsetof(FHorizonMultiToggleButtonState, Brush) == 0x000030, "Member 'FHorizonMultiToggleButtonState::Brush' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonDialogueLineInfo
// 0x0038 (0x0038 - 0x0000)
struct FHorizonDialogueLineInfo final
{
public:
	int32                                         CurrentDialogueBlockIndex;                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLineHeight;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineWidth;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHorizonDialogueBlockInfo>      DialogueBlockInfoList;                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewPage;                                          // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114B[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHorizonDialogueLineInfo) == 0x000008, "Wrong alignment on FHorizonDialogueLineInfo");
static_assert(sizeof(FHorizonDialogueLineInfo) == 0x000038, "Wrong size on FHorizonDialogueLineInfo");
static_assert(offsetof(FHorizonDialogueLineInfo, CurrentDialogueBlockIndex) == 0x000000, "Member 'FHorizonDialogueLineInfo::CurrentDialogueBlockIndex' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueLineInfo, MaxLineHeight) == 0x000004, "Member 'FHorizonDialogueLineInfo::MaxLineHeight' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueLineInfo, LineWidth) == 0x000008, "Member 'FHorizonDialogueLineInfo::LineWidth' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueLineInfo, DialogueBlockInfoList) == 0x000010, "Member 'FHorizonDialogueLineInfo::DialogueBlockInfoList' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueLineInfo, Position) == 0x000020, "Member 'FHorizonDialogueLineInfo::Position' has a wrong offset!");
static_assert(offsetof(FHorizonDialogueLineInfo, bNewPage) == 0x000030, "Member 'FHorizonDialogueLineInfo::bNewPage' has a wrong offset!");

// ScriptStruct HorizonUI.HorizonDialoguePageInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FHorizonDialoguePageInfo final
{
public:
	uint8                                         Pad_114C[0xC];                                     // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHorizonDialoguePageInfo) == 0x000004, "Wrong alignment on FHorizonDialoguePageInfo");
static_assert(sizeof(FHorizonDialoguePageInfo) == 0x00000C, "Wrong size on FHorizonDialoguePageInfo");

}

