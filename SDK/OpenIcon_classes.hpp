#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenIcon

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "OpenIcon_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class OpenIcon.CustomIcon
// 0x0050 (0x0390 - 0x0340)
class UCustomIcon final : public UTextBlock
{
public:
	class UDataTable*                             IconData;                                          // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                IconFont;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSize;                                          // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5E[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconPack;                                          // 0x0350(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconCategory;                                      // 0x0360(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   IconSymbol;                                        // 0x0370(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5F[0x8];                                     // 0x0388(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitCustomIcon(class UDataTable* InIconData, class UObject* InIconFont);
	void SetIconByID(class FName IconID, int32 Size);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomIcon">();
	}
	static class UCustomIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomIcon>();
	}
};
static_assert(alignof(UCustomIcon) == 0x000010, "Wrong alignment on UCustomIcon");
static_assert(sizeof(UCustomIcon) == 0x000390, "Wrong size on UCustomIcon");
static_assert(offsetof(UCustomIcon, IconData) == 0x000338, "Member 'UCustomIcon::IconData' has a wrong offset!");
static_assert(offsetof(UCustomIcon, IconFont) == 0x000340, "Member 'UCustomIcon::IconFont' has a wrong offset!");
static_assert(offsetof(UCustomIcon, IconSize) == 0x000348, "Member 'UCustomIcon::IconSize' has a wrong offset!");
static_assert(offsetof(UCustomIcon, IconPack) == 0x000350, "Member 'UCustomIcon::IconPack' has a wrong offset!");
static_assert(offsetof(UCustomIcon, IconCategory) == 0x000360, "Member 'UCustomIcon::IconCategory' has a wrong offset!");
static_assert(offsetof(UCustomIcon, IconSymbol) == 0x000370, "Member 'UCustomIcon::IconSymbol' has a wrong offset!");

// Class OpenIcon.OpenIcon
// 0x0050 (0x0390 - 0x0340)
class UOpenIcon final : public UTextBlock
{
public:
	EOpenIconSource                               IconSource;                                        // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFA_Category                                  FA_Category;                                       // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMD_Category                                  MD_Category;                                       // 0x033A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFK_Category                                  FK_Category;                                       // 0x033B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F60[0x4];                                     // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconCategory;                                      // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconSize;                                          // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F61[0x4];                                     // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   IconSymbol;                                        // 0x0358(0x0018)(Edit, NativeAccessSpecifierPublic)
	class UDataTable*                             OpenIconDT;                                        // 0x0370(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                OpenIconFontObject;                                // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F62[0x10];                                    // 0x0380(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIcon(EOpenIconSource Source, const class FString& Category, const class FString& IconUcode, int32 Size);
	void SetIconByID(class FName IconID, int32 Size);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OpenIcon">();
	}
	static class UOpenIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOpenIcon>();
	}
};
static_assert(alignof(UOpenIcon) == 0x000010, "Wrong alignment on UOpenIcon");
static_assert(sizeof(UOpenIcon) == 0x000390, "Wrong size on UOpenIcon");
static_assert(offsetof(UOpenIcon, IconSource) == 0x000338, "Member 'UOpenIcon::IconSource' has a wrong offset!");
static_assert(offsetof(UOpenIcon, FA_Category) == 0x000339, "Member 'UOpenIcon::FA_Category' has a wrong offset!");
static_assert(offsetof(UOpenIcon, MD_Category) == 0x00033A, "Member 'UOpenIcon::MD_Category' has a wrong offset!");
static_assert(offsetof(UOpenIcon, FK_Category) == 0x00033B, "Member 'UOpenIcon::FK_Category' has a wrong offset!");
static_assert(offsetof(UOpenIcon, IconCategory) == 0x000340, "Member 'UOpenIcon::IconCategory' has a wrong offset!");
static_assert(offsetof(UOpenIcon, IconSize) == 0x000350, "Member 'UOpenIcon::IconSize' has a wrong offset!");
static_assert(offsetof(UOpenIcon, IconSymbol) == 0x000358, "Member 'UOpenIcon::IconSymbol' has a wrong offset!");
static_assert(offsetof(UOpenIcon, OpenIconDT) == 0x000370, "Member 'UOpenIcon::OpenIconDT' has a wrong offset!");
static_assert(offsetof(UOpenIcon, OpenIconFontObject) == 0x000378, "Member 'UOpenIcon::OpenIconFontObject' has a wrong offset!");

// Class OpenIcon.OpenIconUtil
// 0x0000 (0x0028 - 0x0028)
class UOpenIconUtil final : public UBlueprintFunctionLibrary
{
public:
	static void CopyToClipboard(const class FString& S);
	static class UTexture2D* CustomIconToTexture(class UDataTable* IconData, class UFont* IconFont, const class FName IconID, const int32 IconSize, const EOpenIconTextureSize OutputSize, const class FString& Path, const class FString& Filename, bool UseDefaultName);
	static class UTexture2D* CustomIconToTexture_Advanced(const struct FVector2D& Translation, const struct FSlateColor& ColorAndOpacity, const struct FLinearColor& ShadowColorAndOpacity, const struct FVector2D& ShadowOffset, const struct FFontOutlineSettings& OutlineSettings, const struct FSlateBrush& StrikeBrush, class UDataTable* IconData, class UFont* IconFont, const class FName IconID, const int32 IconSize, const EOpenIconTextureSize OutputSize, const class FString& Path, const class FString& Filename, bool UseDefaultName);
	static bool GetCustomIconDataFromTable(class UDataTable* DataTable, TArray<struct FCustomIconData>* OutData);
	static class UTexture2D* OpenIconToTexture(const class FName IconID, const int32 IconSize, const EOpenIconTextureSize OutputSize, const class FString& Path, const class FString& Filename, bool UseDefaultName);
	static class UTexture2D* OpenIconToTexture_Advanced(const struct FVector2D& Translation, const struct FSlateColor& ColorAndOpacity, const struct FLinearColor& ShadowColorAndOpacity, const struct FVector2D& ShadowOffset, const struct FFontOutlineSettings& OutlineSettings, const struct FSlateBrush& StrikeBrush, const class FName IconID, const int32 IconSize, const EOpenIconTextureSize OutputSize, const class FString& Path, const class FString& Filename, bool UseDefaultName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OpenIconUtil">();
	}
	static class UOpenIconUtil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOpenIconUtil>();
	}
};
static_assert(alignof(UOpenIconUtil) == 0x000008, "Wrong alignment on UOpenIconUtil");
static_assert(sizeof(UOpenIconUtil) == 0x000028, "Wrong size on UOpenIconUtil");

}

