#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MediaFrameworkUtilities

#include "Basic.hpp"

#include "OpenCVLensDistortion_structs.hpp"


namespace SDK::Params
{

// Function MediaFrameworkUtilities.MediaBundle.GetLensDisplacementTexture
// 0x0008 (0x0008 - 0x0000)
struct MediaBundle_GetLensDisplacementTexture final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundle_GetLensDisplacementTexture) == 0x000008, "Wrong alignment on MediaBundle_GetLensDisplacementTexture");
static_assert(sizeof(MediaBundle_GetLensDisplacementTexture) == 0x000008, "Wrong size on MediaBundle_GetLensDisplacementTexture");
static_assert(offsetof(MediaBundle_GetLensDisplacementTexture, ReturnValue) == 0x000000, "Member 'MediaBundle_GetLensDisplacementTexture::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundle.GetMaterial
// 0x0008 (0x0008 - 0x0000)
struct MediaBundle_GetMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundle_GetMaterial) == 0x000008, "Wrong alignment on MediaBundle_GetMaterial");
static_assert(sizeof(MediaBundle_GetMaterial) == 0x000008, "Wrong size on MediaBundle_GetMaterial");
static_assert(offsetof(MediaBundle_GetMaterial, ReturnValue) == 0x000000, "Member 'MediaBundle_GetMaterial::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundle.GetMediaPlayer
// 0x0008 (0x0008 - 0x0000)
struct MediaBundle_GetMediaPlayer final
{
public:
	class UMediaPlayer*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundle_GetMediaPlayer) == 0x000008, "Wrong alignment on MediaBundle_GetMediaPlayer");
static_assert(sizeof(MediaBundle_GetMediaPlayer) == 0x000008, "Wrong size on MediaBundle_GetMediaPlayer");
static_assert(offsetof(MediaBundle_GetMediaPlayer, ReturnValue) == 0x000000, "Member 'MediaBundle_GetMediaPlayer::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundle.GetMediaSource
// 0x0008 (0x0008 - 0x0000)
struct MediaBundle_GetMediaSource final
{
public:
	class UMediaSource*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundle_GetMediaSource) == 0x000008, "Wrong alignment on MediaBundle_GetMediaSource");
static_assert(sizeof(MediaBundle_GetMediaSource) == 0x000008, "Wrong size on MediaBundle_GetMediaSource");
static_assert(offsetof(MediaBundle_GetMediaSource, ReturnValue) == 0x000000, "Member 'MediaBundle_GetMediaSource::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundle.GetMediaTexture
// 0x0008 (0x0008 - 0x0000)
struct MediaBundle_GetMediaTexture final
{
public:
	class UMediaTexture*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundle_GetMediaTexture) == 0x000008, "Wrong alignment on MediaBundle_GetMediaTexture");
static_assert(sizeof(MediaBundle_GetMediaTexture) == 0x000008, "Wrong size on MediaBundle_GetMediaTexture");
static_assert(offsetof(MediaBundle_GetMediaTexture, ReturnValue) == 0x000000, "Member 'MediaBundle_GetMediaTexture::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundle.GetUndistortedCameraViewInfo
// 0x000C (0x000C - 0x0000)
struct MediaBundle_GetUndistortedCameraViewInfo final
{
public:
	struct FOpenCVCameraViewInfo                  ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundle_GetUndistortedCameraViewInfo) == 0x000004, "Wrong alignment on MediaBundle_GetUndistortedCameraViewInfo");
static_assert(sizeof(MediaBundle_GetUndistortedCameraViewInfo) == 0x00000C, "Wrong size on MediaBundle_GetUndistortedCameraViewInfo");
static_assert(offsetof(MediaBundle_GetUndistortedCameraViewInfo, ReturnValue) == 0x000000, "Member 'MediaBundle_GetUndistortedCameraViewInfo::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundle.OnMediaOpenFailed
// 0x0010 (0x0010 - 0x0000)
struct MediaBundle_OnMediaOpenFailed final
{
public:
	class FString                                 DeviceUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundle_OnMediaOpenFailed) == 0x000008, "Wrong alignment on MediaBundle_OnMediaOpenFailed");
static_assert(sizeof(MediaBundle_OnMediaOpenFailed) == 0x000010, "Wrong size on MediaBundle_OnMediaOpenFailed");
static_assert(offsetof(MediaBundle_OnMediaOpenFailed, DeviceUrl) == 0x000000, "Member 'MediaBundle_OnMediaOpenFailed::DeviceUrl' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundle.OnMediaOpenOpened
// 0x0010 (0x0010 - 0x0000)
struct MediaBundle_OnMediaOpenOpened final
{
public:
	class FString                                 DeviceUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundle_OnMediaOpenOpened) == 0x000008, "Wrong alignment on MediaBundle_OnMediaOpenOpened");
static_assert(sizeof(MediaBundle_OnMediaOpenOpened) == 0x000010, "Wrong size on MediaBundle_OnMediaOpenOpened");
static_assert(offsetof(MediaBundle_OnMediaOpenOpened, DeviceUrl) == 0x000000, "Member 'MediaBundle_OnMediaOpenOpened::DeviceUrl' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundleActorBase.GetMediaBundle
// 0x0008 (0x0008 - 0x0000)
struct MediaBundleActorBase_GetMediaBundle final
{
public:
	class UMediaBundle*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundleActorBase_GetMediaBundle) == 0x000008, "Wrong alignment on MediaBundleActorBase_GetMediaBundle");
static_assert(sizeof(MediaBundleActorBase_GetMediaBundle) == 0x000008, "Wrong size on MediaBundleActorBase_GetMediaBundle");
static_assert(offsetof(MediaBundleActorBase_GetMediaBundle, ReturnValue) == 0x000000, "Member 'MediaBundleActorBase_GetMediaBundle::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundleActorBase.RequestOpenMediaSource
// 0x0001 (0x0001 - 0x0000)
struct MediaBundleActorBase_RequestOpenMediaSource final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundleActorBase_RequestOpenMediaSource) == 0x000001, "Wrong alignment on MediaBundleActorBase_RequestOpenMediaSource");
static_assert(sizeof(MediaBundleActorBase_RequestOpenMediaSource) == 0x000001, "Wrong size on MediaBundleActorBase_RequestOpenMediaSource");
static_assert(offsetof(MediaBundleActorBase_RequestOpenMediaSource, ReturnValue) == 0x000000, "Member 'MediaBundleActorBase_RequestOpenMediaSource::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaBundleActorBase.SetComponent
// 0x0010 (0x0010 - 0x0000)
struct MediaBundleActorBase_SetComponent final
{
public:
	class UPrimitiveComponent*                    InPrimitive;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaSoundComponent*                   InMediaSound;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaBundleActorBase_SetComponent) == 0x000008, "Wrong alignment on MediaBundleActorBase_SetComponent");
static_assert(sizeof(MediaBundleActorBase_SetComponent) == 0x000010, "Wrong size on MediaBundleActorBase_SetComponent");
static_assert(offsetof(MediaBundleActorBase_SetComponent, InPrimitive) == 0x000000, "Member 'MediaBundleActorBase_SetComponent::InPrimitive' has a wrong offset!");
static_assert(offsetof(MediaBundleActorBase_SetComponent, InMediaSound) == 0x000008, "Member 'MediaBundleActorBase_SetComponent::InMediaSound' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaProfileBlueprintLibrary.GetAllMediaOutputProxy
// 0x0010 (0x0010 - 0x0000)
struct MediaProfileBlueprintLibrary_GetAllMediaOutputProxy final
{
public:
	TArray<class UProxyMediaOutput*>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaProfileBlueprintLibrary_GetAllMediaOutputProxy) == 0x000008, "Wrong alignment on MediaProfileBlueprintLibrary_GetAllMediaOutputProxy");
static_assert(sizeof(MediaProfileBlueprintLibrary_GetAllMediaOutputProxy) == 0x000010, "Wrong size on MediaProfileBlueprintLibrary_GetAllMediaOutputProxy");
static_assert(offsetof(MediaProfileBlueprintLibrary_GetAllMediaOutputProxy, ReturnValue) == 0x000000, "Member 'MediaProfileBlueprintLibrary_GetAllMediaOutputProxy::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaProfileBlueprintLibrary.GetAllMediaSourceProxy
// 0x0010 (0x0010 - 0x0000)
struct MediaProfileBlueprintLibrary_GetAllMediaSourceProxy final
{
public:
	TArray<class UProxyMediaSource*>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaProfileBlueprintLibrary_GetAllMediaSourceProxy) == 0x000008, "Wrong alignment on MediaProfileBlueprintLibrary_GetAllMediaSourceProxy");
static_assert(sizeof(MediaProfileBlueprintLibrary_GetAllMediaSourceProxy) == 0x000010, "Wrong size on MediaProfileBlueprintLibrary_GetAllMediaSourceProxy");
static_assert(offsetof(MediaProfileBlueprintLibrary_GetAllMediaSourceProxy, ReturnValue) == 0x000000, "Member 'MediaProfileBlueprintLibrary_GetAllMediaSourceProxy::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaProfileBlueprintLibrary.GetMediaProfile
// 0x0008 (0x0008 - 0x0000)
struct MediaProfileBlueprintLibrary_GetMediaProfile final
{
public:
	class UMediaProfile*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaProfileBlueprintLibrary_GetMediaProfile) == 0x000008, "Wrong alignment on MediaProfileBlueprintLibrary_GetMediaProfile");
static_assert(sizeof(MediaProfileBlueprintLibrary_GetMediaProfile) == 0x000008, "Wrong size on MediaProfileBlueprintLibrary_GetMediaProfile");
static_assert(offsetof(MediaProfileBlueprintLibrary_GetMediaProfile, ReturnValue) == 0x000000, "Member 'MediaProfileBlueprintLibrary_GetMediaProfile::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.MediaProfileBlueprintLibrary.SetMediaProfile
// 0x0008 (0x0008 - 0x0000)
struct MediaProfileBlueprintLibrary_SetMediaProfile final
{
public:
	class UMediaProfile*                          MediaProfile;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaProfileBlueprintLibrary_SetMediaProfile) == 0x000008, "Wrong alignment on MediaProfileBlueprintLibrary_SetMediaProfile");
static_assert(sizeof(MediaProfileBlueprintLibrary_SetMediaProfile) == 0x000008, "Wrong size on MediaProfileBlueprintLibrary_SetMediaProfile");
static_assert(offsetof(MediaProfileBlueprintLibrary_SetMediaProfile, MediaProfile) == 0x000000, "Member 'MediaProfileBlueprintLibrary_SetMediaProfile::MediaProfile' has a wrong offset!");

// Function MediaFrameworkUtilities.ProxyMediaOutput.IsProxyValid
// 0x0001 (0x0001 - 0x0000)
struct ProxyMediaOutput_IsProxyValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProxyMediaOutput_IsProxyValid) == 0x000001, "Wrong alignment on ProxyMediaOutput_IsProxyValid");
static_assert(sizeof(ProxyMediaOutput_IsProxyValid) == 0x000001, "Wrong size on ProxyMediaOutput_IsProxyValid");
static_assert(offsetof(ProxyMediaOutput_IsProxyValid, ReturnValue) == 0x000000, "Member 'ProxyMediaOutput_IsProxyValid::ReturnValue' has a wrong offset!");

// Function MediaFrameworkUtilities.ProxyMediaSource.IsProxyValid
// 0x0001 (0x0001 - 0x0000)
struct ProxyMediaSource_IsProxyValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProxyMediaSource_IsProxyValid) == 0x000001, "Wrong alignment on ProxyMediaSource_IsProxyValid");
static_assert(sizeof(ProxyMediaSource_IsProxyValid) == 0x000001, "Wrong size on ProxyMediaSource_IsProxyValid");
static_assert(offsetof(ProxyMediaSource_IsProxyValid, ReturnValue) == 0x000000, "Member 'ProxyMediaSource_IsProxyValid::ReturnValue' has a wrong offset!");

}

