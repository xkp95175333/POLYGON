#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Task_Multiplayer_ConnectToServer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Actions_structs.hpp"
#include "Actions_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Task_Multiplayer_ConnectToServer.Task_Multiplayer_ConnectToServer_C
// 0x0058 (0x0100 - 0x00A8)
class UTask_Multiplayer_ConnectToServer_C final : public UAction
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_PG_PlayerController_Menu_C*         PlayerController;                                  // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPartyId*                               JoinedSquad;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnFinished;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsUseMatchmaker;                                   // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_34A3[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IP;                                                // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ServerPort;                                        // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         BeaconPort;                                        // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 Password;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void CustomEvent_0(const struct FClientWriteEventResponse& Result, class UObject* CustomData);
	void CustomEvent_1(const struct FPlayFabError& Error, class UObject* CustomData);
	void ExecuteUbergraph_Task_Multiplayer_ConnectToServer(int32 EntryPoint);
	void OnCanceled_Event();
	void OnFinished__DelegateSignature(bool IsSuccessful);
	void OnPasswordEntered_Event();
	void OnPlayFabResponse_3F9ED0AB4BF39E9BF514A8BC8A2291FA(const struct FPlayFabBaseModel& Response, class UObject* CustomData, bool Successful);
	void OnReserveSlotFinished_Event(bool IsSuccessful, uint8 ErrorCode);
	void ReceiveActivate();
	void ReceiveFinished(const EActionState Reason);
	void WritePlayerEvent_Failure(const struct FPlayFabError& Error, class UObject* CustomData);
	void WritePlayerEvent_Success(const struct FClientWriteEventResponse& Result, class UObject* CustomData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Task_Multiplayer_ConnectToServer_C">();
	}
	static class UTask_Multiplayer_ConnectToServer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTask_Multiplayer_ConnectToServer_C>();
	}
};
static_assert(alignof(UTask_Multiplayer_ConnectToServer_C) == 0x000008, "Wrong alignment on UTask_Multiplayer_ConnectToServer_C");
static_assert(sizeof(UTask_Multiplayer_ConnectToServer_C) == 0x000100, "Wrong size on UTask_Multiplayer_ConnectToServer_C");
static_assert(offsetof(UTask_Multiplayer_ConnectToServer_C, UberGraphFrame) == 0x0000A8, "Member 'UTask_Multiplayer_ConnectToServer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTask_Multiplayer_ConnectToServer_C, PlayerController) == 0x0000B0, "Member 'UTask_Multiplayer_ConnectToServer_C::PlayerController' has a wrong offset!");
static_assert(offsetof(UTask_Multiplayer_ConnectToServer_C, JoinedSquad) == 0x0000B8, "Member 'UTask_Multiplayer_ConnectToServer_C::JoinedSquad' has a wrong offset!");
static_assert(offsetof(UTask_Multiplayer_ConnectToServer_C, OnFinished) == 0x0000C0, "Member 'UTask_Multiplayer_ConnectToServer_C::OnFinished' has a wrong offset!");
static_assert(offsetof(UTask_Multiplayer_ConnectToServer_C, IsUseMatchmaker) == 0x0000D0, "Member 'UTask_Multiplayer_ConnectToServer_C::IsUseMatchmaker' has a wrong offset!");
static_assert(offsetof(UTask_Multiplayer_ConnectToServer_C, IP) == 0x0000D8, "Member 'UTask_Multiplayer_ConnectToServer_C::IP' has a wrong offset!");
static_assert(offsetof(UTask_Multiplayer_ConnectToServer_C, ServerPort) == 0x0000E8, "Member 'UTask_Multiplayer_ConnectToServer_C::ServerPort' has a wrong offset!");
static_assert(offsetof(UTask_Multiplayer_ConnectToServer_C, BeaconPort) == 0x0000EC, "Member 'UTask_Multiplayer_ConnectToServer_C::BeaconPort' has a wrong offset!");
static_assert(offsetof(UTask_Multiplayer_ConnectToServer_C, Password) == 0x0000F0, "Member 'UTask_Multiplayer_ConnectToServer_C::Password' has a wrong offset!");

}

