#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenCVLensCalibration

#include "Basic.hpp"

#include "OpenCVLensDistortion_structs.hpp"


namespace SDK::Params
{

// Function OpenCVLensCalibration.OpenCVLensCalibrator.CreateCalibrator
// 0x0018 (0x0018 - 0x0000)
struct OpenCVLensCalibrator_CreateCalibrator final
{
public:
	int32                                         BoardWidth;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoardHeight;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquareSize;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFisheyeModel;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F51[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOpenCVLensCalibrator*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCVLensCalibrator_CreateCalibrator) == 0x000008, "Wrong alignment on OpenCVLensCalibrator_CreateCalibrator");
static_assert(sizeof(OpenCVLensCalibrator_CreateCalibrator) == 0x000018, "Wrong size on OpenCVLensCalibrator_CreateCalibrator");
static_assert(offsetof(OpenCVLensCalibrator_CreateCalibrator, BoardWidth) == 0x000000, "Member 'OpenCVLensCalibrator_CreateCalibrator::BoardWidth' has a wrong offset!");
static_assert(offsetof(OpenCVLensCalibrator_CreateCalibrator, BoardHeight) == 0x000004, "Member 'OpenCVLensCalibrator_CreateCalibrator::BoardHeight' has a wrong offset!");
static_assert(offsetof(OpenCVLensCalibrator_CreateCalibrator, SquareSize) == 0x000008, "Member 'OpenCVLensCalibrator_CreateCalibrator::SquareSize' has a wrong offset!");
static_assert(offsetof(OpenCVLensCalibrator_CreateCalibrator, bUseFisheyeModel) == 0x00000C, "Member 'OpenCVLensCalibrator_CreateCalibrator::bUseFisheyeModel' has a wrong offset!");
static_assert(offsetof(OpenCVLensCalibrator_CreateCalibrator, ReturnValue) == 0x000010, "Member 'OpenCVLensCalibrator_CreateCalibrator::ReturnValue' has a wrong offset!");

// Function OpenCVLensCalibration.OpenCVLensCalibrator.CalculateLensParameters
// 0x0060 (0x0060 - 0x0000)
struct OpenCVLensCalibrator_CalculateLensParameters final
{
public:
	struct FOpenCVLensDistortionParameters        LensDistortionParameters;                          // 0x0000(0x0048)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MarginOfError;                                     // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOpenCVCameraViewInfo                  CameraViewInfo;                                    // 0x004C(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F52[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenCVLensCalibrator_CalculateLensParameters) == 0x000008, "Wrong alignment on OpenCVLensCalibrator_CalculateLensParameters");
static_assert(sizeof(OpenCVLensCalibrator_CalculateLensParameters) == 0x000060, "Wrong size on OpenCVLensCalibrator_CalculateLensParameters");
static_assert(offsetof(OpenCVLensCalibrator_CalculateLensParameters, LensDistortionParameters) == 0x000000, "Member 'OpenCVLensCalibrator_CalculateLensParameters::LensDistortionParameters' has a wrong offset!");
static_assert(offsetof(OpenCVLensCalibrator_CalculateLensParameters, MarginOfError) == 0x000048, "Member 'OpenCVLensCalibrator_CalculateLensParameters::MarginOfError' has a wrong offset!");
static_assert(offsetof(OpenCVLensCalibrator_CalculateLensParameters, CameraViewInfo) == 0x00004C, "Member 'OpenCVLensCalibrator_CalculateLensParameters::CameraViewInfo' has a wrong offset!");
static_assert(offsetof(OpenCVLensCalibrator_CalculateLensParameters, ReturnValue) == 0x000058, "Member 'OpenCVLensCalibrator_CalculateLensParameters::ReturnValue' has a wrong offset!");

// Function OpenCVLensCalibration.OpenCVLensCalibrator.FeedImage
// 0x0018 (0x0018 - 0x0000)
struct OpenCVLensCalibrator_FeedImage final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F53[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenCVLensCalibrator_FeedImage) == 0x000008, "Wrong alignment on OpenCVLensCalibrator_FeedImage");
static_assert(sizeof(OpenCVLensCalibrator_FeedImage) == 0x000018, "Wrong size on OpenCVLensCalibrator_FeedImage");
static_assert(offsetof(OpenCVLensCalibrator_FeedImage, FilePath) == 0x000000, "Member 'OpenCVLensCalibrator_FeedImage::FilePath' has a wrong offset!");
static_assert(offsetof(OpenCVLensCalibrator_FeedImage, ReturnValue) == 0x000010, "Member 'OpenCVLensCalibrator_FeedImage::ReturnValue' has a wrong offset!");

// Function OpenCVLensCalibration.OpenCVLensCalibrator.FeedRenderTarget
// 0x0010 (0x0010 - 0x0000)
struct OpenCVLensCalibrator_FeedRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 TextureRenderTarget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F54[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenCVLensCalibrator_FeedRenderTarget) == 0x000008, "Wrong alignment on OpenCVLensCalibrator_FeedRenderTarget");
static_assert(sizeof(OpenCVLensCalibrator_FeedRenderTarget) == 0x000010, "Wrong size on OpenCVLensCalibrator_FeedRenderTarget");
static_assert(offsetof(OpenCVLensCalibrator_FeedRenderTarget, TextureRenderTarget) == 0x000000, "Member 'OpenCVLensCalibrator_FeedRenderTarget::TextureRenderTarget' has a wrong offset!");
static_assert(offsetof(OpenCVLensCalibrator_FeedRenderTarget, ReturnValue) == 0x000008, "Member 'OpenCVLensCalibrator_FeedRenderTarget::ReturnValue' has a wrong offset!");

}

